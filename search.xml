<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BLAST短序列比对没有结果</title>
    <url>/2023/08/03/BLAST%E7%9F%AD%E5%BA%8F%E5%88%97%E6%AF%94%E5%AF%B9%E6%B2%A1%E6%9C%89%E7%BB%93%E6%9E%9C/</url>
    <content><![CDATA[<p>BLAST短序列比对hg19，没有比对结果。需要设置特定参数。</p>
<span id="more"></span>


<h1 id="运行环境、问题说明"><a href="#运行环境、问题说明" class="headerlink" title="运行环境、问题说明"></a>运行环境、问题说明</h1><ul>
<li>版本：ncbi-blast-2.14.0+</li>
<li>模块：blastn</li>
<li>参考：blast db是用hg19建的</li>
<li>问题：比对引物序列（21~23 nt）没有结果，没有任何报错信息</li>
<li>测试：比对稍微长点的序列（130 nt）有结果</li>
<li>测试：同样的引物短序列在UCSC的BLAT有比对结果</li>
</ul>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>blastn比对短序列，要设置这3个参数：  </p>
<ul>
<li>-dust必须设置成no，否则可能没有结果</li>
<li>-word_size设置成query序列长度的1&#x2F;2</li>
<li>-evalue设置大一点，例如1000，否则可能会漏掉部分结果</li>
</ul>
<h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><h3 id="参考1"><a href="#参考1" class="headerlink" title="参考1"></a>参考1</h3><p><a href="https://bioinformatics.stackexchange.com/questions/4226/blastn-no-hits-found#:~:text=The%20way%20blast%20works%20is%20%28simplifying%20a%20bit%29,word%20size%2C%20no%20match%20will%20ever%20be%20found">BLAST(n): No hits found</a>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Masking</span><br><span class="line">Blast will mask low complexity regions by default. Since your sequence is nothing but Gs, it is a safe bet that it is being masked, so no hits will be found for it.</span><br><span class="line">2. Score/e-value thresholds</span><br><span class="line">Another source of complication is that even if a match is found, that match will have very bad scores. Both the actual score of the alignment and the e-value will be very bad. Since this is such a simple sequence, it will always score badly.</span><br><span class="line">3. Word-size</span><br><span class="line">The way blast works is (simplifying a bit) by finding a match for N residues (the word size) and then extending that match if extending increases the score. If your query sequence is shorter than the word size, no match will ever be found.</span><br></pre></td></tr></table></figure>
<p>以上3个可能原因：</p>
<ol>
<li>不是，query序列不是低复杂度序列</li>
<li>不是，测试了-evalue 1、-evalue 10，没结果</li>
<li>不是，测试了-word_size 4，没结果</li>
</ol>
<h3 id="参考2（建议仔细看这个）"><a href="#参考2（建议仔细看这个）" class="headerlink" title="参考2（建议仔细看这个）"></a>参考2（建议仔细看这个）</h3><p><a href="https://web.cas.org/help/BLAST/topics/shrt_seq.htm">Searching Short Sequences</a><br>参考2的操作说明针对的是在线版本的blast；软件对应的参数就是这3个，具体说明看<code>blastn -help</code>。  </p>
<p>最终设置如下3个参数，可以比对出大部分query：  </p>
<ul>
<li><p>-dust no</p>
<ul>
<li>是否用DUST算法过滤query序列，调用的应该是dustmasker。默认是开启DUST的，默认参数是level 20 window 64 linker 1。</li>
<li>可能是在这个window参数下，我的query太短了，所以都被滤掉了，其实根本没有进行比对，所以只设置-word_size是无效的？</li>
</ul>
</li>
<li><p>-word_size 11</p>
<ul>
<li>word_size我的理解可能是相当于比对起始的种子序列长度？</li>
<li>blastn的help里只写了需要≥4，没写默认是多少。</li>
<li>参考2里说blastn默认的word_size是11，但是测试了不设置word_size时没有结果，设置为11时有结果。</li>
<li>参考2里说可以调小word_size，但建议最小是query长度的1&#x2F;2。</li>
<li>测试了4和11都有结果，4会慢很多。6线程，4跑了9m57.677s，11跑了0m1.174s。</li>
</ul>
</li>
<li><p>-evalue 1000</p>
<ul>
<li>看到有些结果的Evalue是0.003，如果设置-evalue 1e-5会漏掉这部分结果</li>
</ul>
</li>
</ul>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sample=&quot;Test&quot;</span><br><span class="line">query_fa=&quot;Input.fa&quot;</span><br><span class="line">threads=&quot;6&quot;</span><br><span class="line"></span><br><span class="line">database=&quot;/xxxx/balst_db&quot;</span><br><span class="line"></span><br><span class="line">identity=&quot;98&quot;</span><br><span class="line">cov_hsp=&quot;95&quot;</span><br><span class="line"></span><br><span class="line"># Long Query Sequence</span><br><span class="line"># blastn -query $query_fa -db $database -out $&#123;sample&#125;.noheader -outfmt &quot;6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore&quot; -num_threads $threads -perc_identity $identity -qcov_hsp_perc $cov_hsp -evalue 1e-5</span><br><span class="line"></span><br><span class="line"># Short Query Sequence</span><br><span class="line">blastn -query $query_fa -db $database -out $&#123;sample&#125;.noheader -outfmt &quot;6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore&quot; -num_threads $threads -perc_identity $identity -qcov_hsp_perc $cov_hsp -evalue 1000 -dust no -word_size 11</span><br><span class="line"></span><br><span class="line">echo -e &quot;Query Seq-id\tSubject Seq-id\tIdentity\tAlignment length\tMismatch\tGap Open\tQuery Start\tQuery End\tSubject Start\tSubject End\tEvalue\tBitscore&quot; &gt; $&#123;sample&#125;.tsv</span><br><span class="line"></span><br><span class="line">cat $&#123;sample&#125;.noheader &gt;&gt; $&#123;sample&#125;.tsv</span><br><span class="line"></span><br><span class="line">rm -f $&#123;sample&#125;.noheader</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>BLAST</tag>
        <tag>Mapping</tag>
        <tag>比对</tag>
      </tags>
  </entry>
  <entry>
    <title>BLAST及NT库本地化</title>
    <url>/2023/04/16/BLAST%E5%8F%8ANT%E5%BA%93%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
    <content><![CDATA[<p>下载NCBI的NT数据库到服务器本地<br>Blast比对结果中输出物种信息<br>用TaxonKit、blastdbcmd、makeblastdb建立子库  </p>
<span id="more"></span>  

<h1 id="NT库本地化"><a href="#NT库本地化" class="headerlink" title="NT库本地化"></a>NT库本地化</h1><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ol>
<li><p>可选文件格式</p>
<ol>
<li>blast index文件<br> <code>https://ftp.ncbi.nlm.nih.gov/blast/db</code>中的nt.*.tar.gz 。<br> 下载完成后，MD5验证，解压文件，就可以直接用于blast。index中已经包含物种Taxonomy信息。但是压缩包中没有Fasta文件，需要的话可以用blastdbcmd提取。</li>
<li>Fasta文件<br><code>https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA</code>中的nt.gz 。<br>下载完成并解压后，需要自建blast index；如果结果中还需要物种Taxonomy信息，建index前还需要准备好TaxIDMapFile文件。</li>
</ol>
</li>
<li><p>下载blast index文件<br> wget下载有点问题，不知道是服务器还是网络问题，wget下载的文件总是MD5校验失败；有时候重新下又能校验成功。<br> aspera下载不行，链接NCBI失败，可能是必须开放某个指定端口。<br> 最后是用的rsync下载。  </p>
<ol>
<li>文件列表下载   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync --no-motd --files-from=&lt;文件列表&gt; &lt;文件源&gt; &lt;下载存放路径&gt;</span><br><span class="line"># 示例</span><br><span class="line">rsync --no-motd --files-from=***/File.list rsync://ftp.ncbi.nlm.nih.gov/blast/db/ ***/NT_Database</span><br></pre></td></tr></table></figure>
 File.list（每个文件1列）<br> <img src="https://pic.imgdb.cn/item/643c01890d2dde57770d7686.jpg" alt="File.list"></li>
</ol>
<ul>
<li>实际下载文件路径是&lt;文件源&gt;加上File.list中的内容，完整路径如：rsync:&#x2F;&#x2F;ftp.ncbi.nlm.nih.gov&#x2F;blast&#x2F;db&#x2F;nt.22.tar.gz。</li>
<li>当File.list中的内容包含子目录，&lt;下载存放路径&gt;中会自动生成对应层级目录，例如File.list中的内容是“blast&#x2F;db&#x2F;nt.22.tar.gz”，则下载的nt.22.tar.gz会保存在<code>&lt;下载存放路径&gt;/blast/db</code>中。</li>
</ul>
<ol start="2">
<li>并行下载<br> 推荐这种方式，文件列表逐个下载太慢，这个每行加“&amp;”后台并行下载文件比较快。   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync --no-motd &lt;文件源&gt; &lt;下载存放路径&gt;</span><br><span class="line"># 示例</span><br><span class="line">rsync --no-motd rsync://ftp.ncbi.nlm.nih.gov/blast/db/nt.22.tar.gz ***/NT_Database &amp;</span><br><span class="line">rsync --no-motd rsync://ftp.ncbi.nlm.nih.gov/blast/db/nt.23.tar.gz ***/NT_Database &amp;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="MD5验证"><a href="#MD5验证" class="headerlink" title="MD5验证"></a>MD5验证</h2><p><code>https://ftp.ncbi.nlm.nih.gov/blast/db</code>中还有nt.*.tar.gz.md5文件，用于MD5验证。<br>全部nt.<em>.tar.gz和nt.</em>.tar.gz.md5文件都下载完后，md5文件合并一起验证。<br>nt.all.md5.check中，文件名后是OK即文件完整；如果是Fail，则不完整，需要重新下载该文件。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 合并所有md5文件</span><br><span class="line">cat nt.*.tar.gz.md5 &gt; nt.all.md5</span><br><span class="line"># md5验证</span><br><span class="line">md5sum -c nt.all.md5 &gt; nt.all.md5.check</span><br></pre></td></tr></table></figure>

<h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><p><code>tar -zxvf nt.*.tar.gz</code><br>解压后，nt.*.tar.gz文件删除或者备份都可以。<br>一般是删除？除了需要迁移到别的服务器，好像也没有能再用到的地方了。  </p>
<h2 id="Blast比对"><a href="#Blast比对" class="headerlink" title="Blast比对"></a>Blast比对</h2><p>blast结果中Subject Seq-id（NT库的序列ID）格式为“gi|384474605|emb|HE793683.1|”，含有<a href="https://www.ncbi.nlm.nih.gov/genbank/sequenceids/">GI numbers</a>和<a href="https://support.nlm.nih.gov/knowledgebase/article/KA-03436/en-us">GenBank accession numbers</a>；不包含Taxid信息。<br>如果blast index中有Taxonomy信息，可以在输出格式增加staxids sscinames，使结果额外输出物种的Taxid和物种名称。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Shell</span><br><span class="line"></span><br><span class="line">sample=&quot;Input&quot;</span><br><span class="line">query_fa=&quot;Input.fa&quot;</span><br><span class="line"></span><br><span class="line">database=&quot;&lt;NT库目录&gt;/nt&quot;</span><br><span class="line">identity=&quot;98&quot;</span><br><span class="line">cov_hsp=&quot;90&quot;</span><br><span class="line">evalue=&quot;1e-5&quot;</span><br><span class="line"></span><br><span class="line">threads=&quot;8&quot;</span><br><span class="line"></span><br><span class="line"># 如果不export BLASTDB的话，要在bashrc声明BLASTDB，否则报错</span><br><span class="line"># 在-outfmt添加staxids sscinames，使结果额外输出物种Taxid、物种名称</span><br><span class="line">export BLASTDB=&lt;NT库目录&gt; &amp;&amp; blastn -query $&#123;query_fa&#125; -db $&#123;database&#125; -out $&#123;sample&#125;.noheader -outfmt &quot;6  qaccver saccver pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids sscinames stitle&quot; -num_threads $&#123;threads&#125; -evalue $&#123;evalue&#125; -perc_identity $&#123;identity&#125; -qcov_hsp_perc $&#123;cov_hsp&#125;</span><br><span class="line"></span><br><span class="line"># 表头</span><br><span class="line">echo -e &quot;Query Seq-id\tSubject Seq-id\tIdentity\tAlignment length\tMismatch\tGap Open\tQuery Start\tQuery End\tSubject Start\tSubject End\tEvalue\tBitscore\tTaxonomy ID\tScientific Name\tSeq Title&quot; &gt; $&#123;sample&#125;.tsv</span><br><span class="line"></span><br><span class="line"># 合并blast结果和表头</span><br><span class="line">cat $&#123;sample&#125;.noheader &gt;&gt; $&#123;sample&#125;.tsv</span><br><span class="line"></span><br><span class="line"># 删除没有表头的blast结果</span><br><span class="line">rm -f $&#123;sample&#125;.noheader</span><br></pre></td></tr></table></figure>

<h1 id="构建子库"><a href="#构建子库" class="headerlink" title="构建子库"></a>构建子库</h1><ul>
<li>用blastdbcmd可以根据Taxid从NT库抽取相关序列，从而构建子库。  </li>
<li>用<a href="https://bioinf.shenwei.me/taxonkit/">TaxonKit</a>可以获取某个Taxid节点以下所有Taxid，也就是说不止可以抽取单个物种的序列，还可以提供Taxid列表来抽取整个目、科、属…的序列。  </li>
<li>TaxonKit需要<a href="https://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz">taxdump.tar.gz</a>。NT库和taxdump.tar.gz最好日期一致，因为Taxonomy会更新，可能导致NT库的Taxid和TaxonKit提取的有区别。具体见TaxonKit的<a href="https://bioinf.shenwei.me/taxonkit/chinese/#taxid-changelog-taxid">TaxID changelog</a>。  </li>
<li>如果要用Taxid统计blast结果中的物种信息，需要注意有些亚种&#x2F;株的Taxid与物种（Species）等级Taxid不一样。如Streptococcus parasanguinis ATCC 903（Taxid 888048）的Rank是strain；它是属于Streptococcus parasanguinis（Taxid 1318）这个物种的。用taxonkit lineage可以获取某个Taxid在物种等级的名称和Taxid。如<code>echo 888048 | taxonkit lineage | taxonkit reformat -t -f \&quot;&#123;s&#125;\&quot; | cut -f 3,4</code>。  </li>
<li>用子库作为参考序列blast时，将-db参数换成{Index_Dir}&#x2F;${Name}.fa即可。</li>
</ul>
<p>以链球菌属举例，在NCBI的<a href="https://www.ncbi.nlm.nih.gov/taxonomy">Taxonomy数据库</a>可以找到Streptococcus的Taxid是1301。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Shell</span><br><span class="line"></span><br><span class="line">Name=&quot;Streptococcus&quot;</span><br><span class="line">Taxid=&quot;1301&quot;</span><br><span class="line">Index_Dir=&quot;Streptococcus_Index&quot;</span><br><span class="line"></span><br><span class="line"># 获取该Taxid节点以下所有子节点的Taxid</span><br><span class="line">taxonkit list -I &quot;&quot; --ids $Taxid &gt; $&#123;Index_Dir&#125;/$&#123;Name&#125;.taxid</span><br><span class="line"></span><br><span class="line"># 提取相关序列</span><br><span class="line">blastdbcmd -db &lt;NT库目录&gt;/nt -taxidlist $&#123;Index_Dir&#125;/$&#123;Name&#125;.taxid &gt; $&#123;Index_Dir&#125;/$&#123;Name&#125;.fa</span><br><span class="line"></span><br><span class="line"># 提取GenBank accession numbers（GI号也可以）和Taxid的对应关系文件</span><br><span class="line">blastdbcmd -db &lt;NT库目录&gt;/nt -taxidlist $&#123;Index_Dir&#125;/$&#123;Name&#125;.taxid -outfmt &quot;%a %T&quot; &gt; $&#123;Index_Dir&#125;/taxid_map.txt</span><br><span class="line"></span><br><span class="line"># 建blast index，通过-parse_seqids -taxid_map在index中附加物种Taxonomy信息</span><br><span class="line">makeblastdb -dbtype nucl -in $&#123;Index_Dir&#125;/$&#123;Name&#125;.fa -out $&#123;Index_Dir&#125;/$&#123;Name&#125;.fa -parse_seqids -taxid_map $&#123;Index_Dir&#125;/taxid_map.txt</span><br><span class="line"></span><br><span class="line"># 提取序列的GenBank accession numbers、Taxid、物种名称（比对用不上，就是看看参考里有什么）</span><br><span class="line">blastdbcmd -db &lt;NT库目录&gt;/nt -taxidlist $&#123;Index_Dir&#125;/$&#123;Name&#125;.taxid -outfmt &quot;%a  %T  %S&quot; &gt; $&#123;Index_Dir&#125;/$&#123;Name&#125;.Name.tsv</span><br></pre></td></tr></table></figure>
<p>taxid_map.txt（第1列GenBank accession numbers，第2列Taxid）<br><img src="https://pic.imgdb.cn/item/643c01cc0d2dde57770dcff5.jpg" alt="taxid_map.txt"><br>Name.tsv（第1列GenBank accession numbers，第2列Taxid，第3列物种名称）<br><img src="https://pic.imgdb.cn/item/643c01b20d2dde57770dad98.jpg" alt="Name.tsv">  </p>
<h1 id="假如用nt-gz建库"><a href="#假如用nt-gz建库" class="headerlink" title="假如用nt.gz建库"></a>假如用nt.gz建库</h1><ul>
<li>nt.gz解压后是NT库的fasta文件。如果不需要物种信息的话，直接makeblastdb建库就行。如果balst结果要有物种信息，则需要提供GenBank accession numbers和Taxid对应关系，类似上面的子库构建的-parse_seqids -taxid_map方式。  </li>
<li>GenBank accession numbers和Taxid对应关系文件可以用<a href="https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/nucl_gb.accession2taxid.gz">nucl_gb.accession2taxid.gz</a>。和taxdump.tar.gz一样原因，accession2taxid最好与NT库日期一致。  </li>
<li>nucl_gb.accession2taxid.gz格式是tsv，第一列Accession，第二列Accession.version，第三列TaxId，第四列GI；整理成taxid_map格式后，用makeblastdb加-parse_seqids -taxid_map建库就行。</li>
</ul>
<h1 id="一些blastn参数"><a href="#一些blastn参数" class="headerlink" title="一些blastn参数"></a>一些blastn参数</h1><p>-task：默认是megablast，可选blastn、blastn-short、dc-megablast、megablast、rmblastn<br>-query：需要比对的fasta序列<br>-db：数据库路径，写到fasta前缀为止，如***&#x2F;NT_Database&#x2F;nt<br>-out：输出文件<br>-outfmt：输出格式，6是tab分割且无表头的格式，其他格式见blastn帮助文档<br>-num_threads：线程数，默认1；与-mt_mode相关，具体见<a href="https://www.ncbi.nlm.nih.gov/books/NBK571452/">这里</a><br>-evalue：e值过滤阈值，默认10<br>-perc_identity：identity百分比过滤阈值，取值0 ~ 100<br>-qcov_hsp_perc：hsp覆盖度百分比过滤阈值，取值0 ~ 100<br>-max_target_seqs：输出结果保留多少比对上的subject序列，默认500，建议大于等于5<br>-max_hsps：每个query序列比对上的每个subject序列保留多少个HSP，需要填写大于等于1，无默认值  </p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>BLAST</tag>
        <tag>NT</tag>
        <tag>数据库</tag>
        <tag>TaxonKit</tag>
      </tags>
  </entry>
  <entry>
    <title>Bam文件操作</title>
    <url>/2023/05/22/Bam%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>用Linux命令行或软件对Bam文件进行操作</p>
<span id="more"></span>

<h1 id="统计CIGAR，从多到少排序"><a href="#统计CIGAR，从多到少排序" class="headerlink" title="统计CIGAR，从多到少排序"></a>统计CIGAR，从多到少排序</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sambamba view -F &quot;ref_name==&#x27;******&#x27; and not secondary_alignment and not supplementary&quot; ******.bam | cut -f 6 | sort | uniq -c | sed -r &#x27;s/^\s+//&#x27; | sed -r &#x27;s/\s+/\t/&#x27; | sort -k 1 -nr &gt; CIGAR.tsv</span><br></pre></td></tr></table></figure>

<h1 id="提取Reads，转fasta"><a href="#提取Reads，转fasta" class="headerlink" title="提取Reads，转fasta"></a>提取Reads，转fasta</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sambamba view -F &quot;ref_name==&#x27;******&#x27; and not secondary_alignment and not supplementary&quot; ******.bam | cut -f 1,10 | sed &#x27;s/^/&gt;/&#x27; | sed -r &#x27;s/\t/\n/&#x27; &gt; Target.fa</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Bam</tag>
        <tag>Sambamba</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Windows桌面端 释放占用空间</title>
    <url>/2023/11/05/Docker-Windows%E6%A1%8C%E9%9D%A2%E7%AB%AF-%E9%87%8A%E6%94%BE%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>Docker Windows桌面端，删除容器后，占用空间没有释放</p>
<span id="more"></span>


<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Docker Windows桌面端，删除容器后，占用空间没有释放</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>ext4.vhdx磁盘空间会根据加载的数据自动增长，但是无法自动回收。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>注：Docker的ext4.vhdx可能在以下路径：C:\Users\YOURNAME\AppData\Local\Docker\wsl\data  </p>
<ol>
<li>退出Docker Windows桌面端  </li>
<li>PowerShell运行：wsl –shutdown  </li>
<li>【可选用diskpart】<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PowerShell运行以下命令</span><br><span class="line"># 进入diskpart</span><br><span class="line">diskpart</span><br><span class="line"># 选择虚拟机文件</span><br><span class="line">select vdisk file=&quot;【填写ext4.vhdx绝对路径】&quot;</span><br><span class="line">attach vdisk readonly</span><br><span class="line"># 回收虚拟机文件无用空间</span><br><span class="line">compact vdisk</span><br><span class="line"># 断开虚拟机文件</span><br><span class="line">detach vdisk</span><br><span class="line"># 退出diskpart</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
【可选用optimize-vhd，需要已安装Hyper-V】  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PowerShell运行以下命令</span><br><span class="line">optimize-vhd -Path 【填写ext4.vhdx绝对路径】 -Mode full</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>diskpart</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/437983382">https://zhuanlan.zhihu.com/p/437983382</a></li>
<li><a href="https://blog.csdn.net/Caoyang_He/article/details/120507716">https://blog.csdn.net/Caoyang_He/article/details/120507716</a></li>
</ol>
<p>optimize-vhd</p>
<ol>
<li><a href="https://learn.microsoft.com/zh-hk/powershell/module/hyper-v/optimize-vhd?view=windowsserver2022-ps&viewFallbackFrom=win10-ps">https://learn.microsoft.com/zh-hk/powershell/module/hyper-v/optimize-vhd?view=windowsserver2022-ps&amp;viewFallbackFrom=win10-ps</a></li>
<li><a href="https://www.cnblogs.com/cccy0/p/16918476.html">https://www.cnblogs.com/cccy0/p/16918476.html</a></li>
<li><a href="https://www.hanselman.com/blog/shrink-your-wsl2-virtual-disks-and-docker-images-and-reclaim-disk-space">https://www.hanselman.com/blog/shrink-your-wsl2-virtual-disks-and-docker-images-and-reclaim-disk-space</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/538805830">https://zhuanlan.zhihu.com/p/538805830</a></li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Cutadapt拆分MGI数据</title>
    <url>/2023/05/27/Cutadapt%E6%8B%86%E5%88%86MGI%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>用Cutadapt拆分MGI测序仪的下机数据</p>
<span id="more"></span>

<h1 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h1><p>用华大测序仪上机测序时，如果选择不由测序仪自动拆分，测序完成后，只会得到一个包含index序列的Fastq文件。<br>使用Cutadapt，可以比较方便地按你需要的index，拆分成多个Fastq文件；还可以参数指定用多个线程拆分，会比较快。<br>同样的方法也可以用于一些包含Tag序列的Fastq文件，例如基因表达谱分析（DGE，Digital Gene Expression Tag Profiling）的数据。  </p>
<h1 id="输入文件"><a href="#输入文件" class="headerlink" title="输入文件"></a>输入文件</h1><ul>
<li><p>MGI下机的包含index序列的Fastq文件<br>以下示例是测序读长是50，用的是Dual Barcode 8 bp + 8 bp的Fastq文件。<br><img src="https://pic1.imgdb.cn/item/64719df0f024cca173d96bd8.png" alt="Input_Fq"></p>
</li>
<li><p>目标index序列的Fasta文件<br>按以下格式写成Fasta文件。序列末尾的*$*符号，是为了保证检出的index序列是完整地出现在序列3’末端，详见<a href="https://cutadapt.readthedocs.io/en/stable/guide.html#overview-of-adapter-types">Cutadapt文档 Overview of adapter types</a>。<br><img src="https://pic1.imgdb.cn/item/64719df0f024cca173d96bff.png" alt="Index_Fa"></p>
</li>
</ul>
<h1 id="拆分脚本"><a href="#拆分脚本" class="headerlink" title="拆分脚本"></a>拆分脚本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Shell</span><br><span class="line"></span><br><span class="line">### 参数 ###</span><br><span class="line"># 输入Fastq文件</span><br><span class="line">Input=&quot;xxxxxx.fq.gz&quot;</span><br><span class="line"># Index Fasta文件</span><br><span class="line">Index=&quot;index.fa&quot;</span><br><span class="line"># 输出目录</span><br><span class="line">Result_Dir=&quot;Result&quot;</span><br><span class="line"># 测序读长</span><br><span class="line">Read_Length=50</span><br><span class="line"># 调用核数量</span><br><span class="line">Core=6</span><br><span class="line"></span><br><span class="line">### 拆分 ###</span><br><span class="line">rm -fr $Result_Dir</span><br><span class="line">mkdir -p $Result_Dir</span><br><span class="line"># 用&#123;name&#125;可以使输出文件名用$Index中的Reads ID作为文件名前缀</span><br><span class="line">cutadapt -j $Core --no-indels -e 0 --quality-cutoff 0 --minimum-length $Read_Length --maximum-length $Read_Length -a file:$Index -o $Result_Dir/&#123;name&#125;.fq.gz $Input</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cutadapt.readthedocs.io/en/stable/guide.html#demultiplexing">Cutadapt文档 Demultiplexing</a></p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Cutadapt</tag>
        <tag>MGI</tag>
        <tag>数据拆分</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker转Singularity</title>
    <url>/2023/04/24/Docker%E8%BD%ACSingularity/</url>
    <content><![CDATA[<p>Docker镜像转换为Singularity的sif格式镜像文件</p>
<span id="more"></span>

<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>本地搭建了一些docker镜像，已有的方案用Cromwell投递WDL项目时用的是Singularity镜像，所以需要转为Singularity的sif格式镜像文件。  </p>
<h1 id="错误方案"><a href="#错误方案" class="headerlink" title="错误方案"></a>错误方案</h1><p>同事之前已经写了一个将docker hub的镜像pull下来并转为sif格式的脚本，想改成用singularity build去处理本地docker镜像。<br>但是发现生成的sif文件名称没有sha256后面的验证码。<br>正常生成的sif名称类似：***_varscan2_sha256_b235818***************595db587df.sif，但是singularity build生成的的会类似***<em>varscan2_sha256</em>.sif。<br>原因是sha256验证码取的是docker镜像的RepoDigests，此信息只有当镜像被上传到docker hub后才会有。<br>本地搭建的，未上传到docker hub的镜像，使用docker images –digests查看会见到该镜像的DIGEST列的值为&lt;none&gt;。所以其实是sha256码本身就不存在，所以无法生成对应的文件名。<br>其实没有sha256的Singularity的sif格式镜像文件也可以用于Cromwell投递WDL项目，需要Cromwell配置文件设置参数。[这里挖一个坑，写好填上]  </p>
<p>已有的用于Docker转换为Singularity的脚本：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"></span><br><span class="line">docker=$1</span><br><span class="line"></span><br><span class="line">export SINGULARITY_CACHEDIR=[存放Singularity镜像的目录]</span><br><span class="line">CACHE_DIR=$SINGULARITY_CACHEDIR</span><br><span class="line">DOCKER_NAME=$(echo $docker | cut -d&quot;:&quot; -f 1 | sed -e &#x27;s/\//_/&#x27;)</span><br><span class="line">SHA_NAME=$(docker inspect --format=&#x27;&#123;&#123;index .RepoDigests 0&#125;&#125;&#x27; $&#123;docker&#125; | cut -d&quot;:&quot; -f 2)</span><br><span class="line">SHA_TAG=&quot;sha256_$&#123;SHA_NAME&#125;&quot;</span><br><span class="line">IMAGE=$CACHE_DIR/$&#123;DOCKER_NAME&#125;_$&#123;SHA_TAG&#125;.sif</span><br><span class="line">if [ ! -f $IMAGE ]; then</span><br><span class="line">    singularity pull $IMAGE docker://$&#123;docker&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h1 id="正确方案"><a href="#正确方案" class="headerlink" title="正确方案"></a>正确方案</h1><p>先将本地的docker image上传到docker hub上（<a href="https://blog.csdn.net/u013258415/article/details/80050956/">参考</a>），生成Docker镜像的RepoDigests后，再跑一下上面的shell脚本。  </p>
<ol>
<li>注册docker hub账户，<code>https://hub.docker.com/</code>。  </li>
<li>在服务器上登录docker hub，命令行docker login，输账号密码。  </li>
<li>检查镜像的REPOSITORY命名方式，必须是“注册用户名&#x2F;镜像名”。不符合的可以用docker tag <old_REPOSITORY> <new_REPOSITORY>修改。修改后可以docker rmi 把旧的删掉。  </new_REPOSITORY></old_REPOSITORY></li>
<li>上传镜像到docker hub，命令行docker push REPOSITORY:TAG，等待上传完毕即可。无需重新pull镜像，上传完本地的镜像就会有RepoDigests，可以通过docker images –digests查看。  </li>
<li>退出当前docker hub账号，命令行docker logout。  </li>
<li>使用上面的shell脚本将docker容器转为sif格式，传入参数是docker image的REPOSITORY:TAG。</li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Singularity</tag>
        <tag>WDL</tag>
        <tag>Cromwell</tag>
      </tags>
  </entry>
  <entry>
    <title>Falco测试</title>
    <url>/2023/12/03/Falco%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>Falco软件测试，主要看与FastQC的分析时间、结果一致性、报告界面的差异。</p>
<span id="more"></span>

<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><ul>
<li>falco 1.2.1</li>
<li>FastQC v0.11.8</li>
</ul>
<h1 id="软件简介"><a href="#软件简介" class="headerlink" title="软件简介"></a>软件简介</h1><p><a href="https://github.com/smithlabcode/falco">Falco</a>是对FastQC的emulation（仿真？），基本上是把FastQC重新实现了一遍，应该是用的C++？<br>然后它比FastQC多了些参数，说明文档里有写[Falco only]的例如-subsample、-bisulfite、-reverse-complement等。</p>
<h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><ul>
<li>用一对Fastq文件做了测试，每个Fastq是53692232条序列，读长150。</li>
<li>两个软件的统计结果是一样的。但是Falco的分析时间没有减少很多。考虑到FastQC本身有大部分模块是只抽前100,000条序列计算，计算量不大，时间相差不多也可以理解。<br><img src="https://pic.imgdb.cn/item/656c3886c458853aef95e9ce.png" alt="分析时间比较"></li>
<li>主要问题是，它的html报告需要加载一些在线资源（应该是css还有plotly？），然后动态生成报告和图。但是这些资源在国内访问不了或者加载速度很慢，就变成没图，甚至连报告打不开；但是用了魔法就没问题了。</li>
<li>22年5月的一个Issue有提到这个问题，<a href="https://github.com/smithlabcode/falco/issues/33">add CSS and javascript to HTML page source code</a>，但是没人回复。<br>能打开的时候是这样的，好处是鼠标放图上，能显示具体的值。<br><img src="https://pic.imgdb.cn/item/656c38edc458853aef974722.png" alt="Falco报告界面"></li>
</ul>
<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># shell</span><br><span class="line"></span><br><span class="line">Test_Dir=&quot;/xxx/Software_Test/Falco_QC&quot;</span><br><span class="line">Falco_Result_Dir=&quot;$Test_Dir/Result_Falco&quot;</span><br><span class="line">FastQC_Result_Dir=&quot;$Test_Dir/Result_FastQC&quot;</span><br><span class="line"></span><br><span class="line">Data_R1=&quot;Sample_R1.fastq.gz&quot;</span><br><span class="line">Data_R2=&quot;Sample_R2.fastq.gz&quot;</span><br><span class="line"></span><br><span class="line">rm -fr $Falco_Result_Dir $FastQC_Result_Dir</span><br><span class="line">mkdir $Falco_Result_Dir $FastQC_Result_Dir</span><br><span class="line"></span><br><span class="line">echo &quot;[Falco] Start : `date`&quot;</span><br><span class="line">time /xxx/Software/falco/bin/falco --quiet --extract --nogroup --threads 4 -o $Falco_Result_Dir $Data_R1 $Data_R2</span><br><span class="line">echo &quot;[Falco] Finish : `date`&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;-----------------------------------------------------------------------------------------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;[FastQC] Start : `date`&quot;</span><br><span class="line">time /xxx/fastqc --quiet --extract --nogroup --threads 4 -o $FastQC_Result_Dir $Data_R1 $Data_R2</span><br><span class="line">echo &quot;[FastQC] Finish : `date`&quot;</span><br></pre></td></tr></table></figure>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>这个软件在国内是个鸡肋：分析时间没减少很多，报告还打不开。<br>除非是有在线云平台想给客户一个有交互的报告界面。但是也要先把那些资源本地化，再修改html文件。还不如自己直接实现一个类似的界面。</p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Falco</tag>
        <tag>FastQC</tag>
        <tag>质控</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastq、Fasta文件操作</title>
    <url>/2023/05/22/Fastq%E3%80%81Fasta%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>用Linux命令行或软件对Fastq、Fasta文件进行操作</p>
<span id="more"></span>

<h1 id="fastq转换为fasta"><a href="#fastq转换为fasta" class="headerlink" title="fastq转换为fasta"></a>fastq转换为fasta</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk &#x27;&#123;if(NR%4 == 1)&#123;print &quot;&gt;&quot; substr($0, 2)&#125;&#125;&#123;if(NR%4 == 2)&#123;print&#125;&#125;&#x27; $fastq &gt; $fasta</span><br></pre></td></tr></table></figure>

<h1 id="fasta去重"><a href="#fasta去重" class="headerlink" title="fasta去重"></a>fasta去重</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastx_toolkit_0.0.13/bin/fastx_collapser -i Target.fa -o Target.dedup.fa</span><br></pre></td></tr></table></figure>

<h1 id="fastq提取并统计某个部分碱基序列"><a href="#fastq提取并统计某个部分碱基序列" class="headerlink" title="fastq提取并统计某个部分碱基序列"></a>fastq提取并统计某个部分碱基序列</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这里举例的是第101个碱基~最后一个碱基</span><br><span class="line">less $fastq | sed -n &#x27;0~2p&#x27; | sed -n &#x27;1~2p&#x27; | cut -c 101- | sort | uniq -c | sed -r &#x27;s/^\s+//&#x27; | sed &#x27;s/\s/\t/&#x27; &gt; $stat_tsv</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Fastq</tag>
        <tag>Fasta</tag>
        <tag>fastx_toolkit</tag>
      </tags>
  </entry>
  <entry>
    <title>IGV自定义参考基因组</title>
    <url>/2023/05/03/IGV%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E8%80%83%E5%9F%BA%E5%9B%A0%E7%BB%84/</url>
    <content><![CDATA[<p>IGV 2.11.0版本以上，自定义参考基因组的方法</p>
<span id="more"></span>

<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><p>IGV版本：2.13.0  </p>
<h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><p>对b37的参考基因组fasta文件做了一些修改，需要在IGV中浏览它，而且需要有Refseq的基因注释信息的Track。  </p>
<h1 id="信息说明"><a href="#信息说明" class="headerlink" title="信息说明"></a>信息说明</h1><h2 id="版本差异"><a href="#版本差异" class="headerlink" title="版本差异"></a>版本差异</h2><p>IGV 2.11.0版本以上，是用一个JSON文件去指定和加载参考基因组的。<br>同时弃用了之前版本的.genome格式；通过选项Genomes -&gt; Greate .genome File…的加载方式也取消了。  </p>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://github.com/igvteam/igv/wiki/JSON-Genome-Format">格式说明</a> <code>https://github.com/igvteam/igv/wiki/JSON-Genome-Format</code><br><a href="https://github.com/igvteam/igv.js/wiki/Reference-Genome">属性说明</a> <code>https://github.com/igvteam/igv.js/wiki/Reference-Genome</code>  </p>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>IGV 2.11.0版本以上自定义参考基因组JSON文件，只有是fastaURL必填，其他都是可选。<br>所有URL都可以是在线资源或本地路径。  </p>
<ul>
<li>id：该参考基因组的名称，可选。<del>就是在Genome下拉框里显示的基因组名称。</del>需要是hs1、hg38、hg19、hg18、hg17、hg16其中之一，否则IGV的BLAT功能会没反应。具体原因见<code>IGV的BLAT</code>。  </li>
<li>name：描述信息，可选。就是在Genome下拉框里显示的基因组名称。  </li>
<li>fastaURL：参考基因组Fasta的URL，必填。可以是线上的，如UCSC等数据库中的fasta文件；也可以是本地的，如服务器上的fasta文件路径。  </li>
<li>indexURL：参考基因组Fasta的索引（.fai）文件，可选。但如果不提供.fai文件，会一次性加载整个fasta文件。  </li>
<li>cytobandURL：UCSC格式的cytoBand文件的URL，可选。是用于画染色体示意图的，可以在UCSC的goldenPath找到cytoBand.txt.gz，例如<a href="https://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/">hg19</a>的。UCSC上有<a href="https://genome.ucsc.edu/cgi-bin/hgTables?db=hg38&hgta_group=map&hgta_track=cytoBand&hgta_table=cytoBand&hgta_doSchema=describe+table+schema">cytoBand文件格式说明</a>。  </li>
<li>tracks：加载参考基因组时，同时加载的一系列Tracks，例如默认的hg19基因组的RefSeq Gene描述信息，可选。IGV的Github有<a href="https://github.com/igvteam/igv.js/wiki/Tracks-2.0">tracks格式说明</a>。</li>
</ul>
<h2 id="加载方法"><a href="#加载方法" class="headerlink" title="加载方法"></a>加载方法</h2><p>写完JSON文件后，在软件中加载自定义参考基因组的方法：Genomes -&gt; Load Genome from File… -&gt; 选择参考基因组json文件</p>
<h1 id="JSON示例"><a href="#JSON示例" class="headerlink" title="JSON示例"></a>JSON示例</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;b37chr&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;Human (b37 with chr)&quot;,</span><br><span class="line">  &quot;fastaURL&quot;: &quot;/xxx/database/b37chr/human_g1k_v37_decoy_chr.fasta&quot;,</span><br><span class="line">  &quot;indexURL&quot;: &quot;/xxx/database/b37chr/human_g1k_v37_decoy_chr.fasta.fai&quot;,</span><br><span class="line">  &quot;cytobandURL&quot;: &quot;/xxx/database/b37chr/cytoBand.txt&quot;,</span><br><span class="line">  &quot;tracks&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Refseq Genes&quot;,</span><br><span class="line">      &quot;format&quot;: &quot;refgene&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;/xxx/database/b37chr/ncbiRefSeq.sorted.txt.gz&quot;,</span><br><span class="line">      &quot;indexURL&quot;: &quot;/xxx/database/b37chr/ncbiRefSeq.sorted.txt.gz.tbi&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Target 1&quot;,</span><br><span class="line">      &quot;format&quot;: &quot;bed&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;/xxx/database/b37chr/bed/Target_1.bed&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Target 2&quot;,</span><br><span class="line">      &quot;format&quot;: &quot;bed&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;/xxx/database/b37chr/bed/Target_2.bed&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="IGV的BLAT"><a href="#IGV的BLAT" class="headerlink" title="IGV的BLAT"></a>IGV的BLAT</h1><ul>
<li><a href="https://github.com/igvteam/igv/wiki/Customizing-BLAT/f1cc79c0b3c8c27c1d612e4a025a1eee94bd8f56">Customizing BLAT</a></li>
<li><a href="https://igv.org/doc/desktop/#UserGuide/tools/blat/">BLAT</a><br>从以上官方文档可以知道，IGV的BLAT功能，本质是将待查询序列形成一个命令，传到UCSC的网页服务进行分析。<br>所以如果命令中的某些参数不对，会导致BLAT功能失效，例如指定数据库的db参数。经过测试发现JSON文件的id就是命令中的db参数。<br>从<a href="https://igv.org/services/blatUCSC.php">https://igv.org/services/blatUCSC.php</a>的<code>&lt;SELECT NAME=&#39;db&#39;&gt;</code>这部分，可以看到UCSC在线服务<a href="https://genome.ucsc.edu/cgi-bin/hgBlat">Human BLAT Search</a>的5个人类基因组对应的db参数取值。<br>如果需要转为使用本地服务器的BLAT功能，或者其他物种的数据库，可以看这篇文章：<a href="https://www.jianshu.com/p/e5aceeb98a98">如何在IGV上使用BLAT搜索非模式物种</a>。</li>
</ul>
<hr>
<h1 id="文章更新记录"><a href="#文章更新记录" class="headerlink" title="文章更新记录"></a>文章更新记录</h1><h2 id="2025-03-25"><a href="#2025-03-25" class="headerlink" title="2025.03.25"></a>2025.03.25</h2><ol>
<li><code>参数说明</code>中id和name的说明有误，已更正。</li>
<li>新增<code>IGV的BLAT</code>相关信息。</li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>IGV</tag>
        <tag>BLAT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2025/03/25/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Hexo搭建博客常用的命令</p>
<span id="more"></span>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>以下第1.2.步可以参考以下一些文章，会更详细清晰<br><a href="https://blog.csdn.net/itcast_cn/article/details/129876490">Hexo+github搭建个人博客网站</a><br><a href="https://blog.csdn.net/lang_xw/article/details/143050877">GitHub+Hexo搭建个人博客 - 详细教程</a><br><a href="https://zhuanlan.zhihu.com/p/688561305">【2024】从零开始用Hexo+GithubPage搭建个人网站（保姆级）</a>  </p>
<h1 id="1-部署GitHub仓库-x2F-Pages"><a href="#1-部署GitHub仓库-x2F-Pages" class="headerlink" title="1. 部署GitHub仓库&#x2F;Pages"></a>1. 部署GitHub仓库&#x2F;Pages</h1><ol>
<li>注册 GitHub 账号  </li>
<li>在 GitHub 创建仓库，命名为 <code>&lt;username&gt;.github.io</code>（个人主页）或自定义仓库。  </li>
<li>安装 Hexo 部署插件  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>修改 Hexo 的 <code>_config.yml</code>，添加部署配置  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;repository&gt;.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># 或 gh-pages（自定义仓库时常用）</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="2-Hexo环境"><a href="#2-Hexo环境" class="headerlink" title="2. Hexo环境"></a>2. Hexo环境</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Hexo 命令行工具</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Hexo 项目（替换 &lt;folder&gt; 为你的项目目录名）</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br></pre></td></tr></table></figure>

<h1 id="3-编写博客"><a href="#3-编写博客" class="headerlink" title="3. 编写博客"></a>3. 编写博客</h1><p><a href="https://hexo.io/zh-cn/">Hexo官网</a><br><a href="https://hexo.io/themes/">Hexo主题</a>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建新文章（在 source/_posts 下生成 Markdown 文件，生成后会提示绝对路径）</span></span><br><span class="line"><span class="comment"># source/scaffolds/post.md 是文章模板，hexo new会基于此模板生成Markdown 文件，可以根据需要自定义模板</span></span><br><span class="line">hexo new <span class="string">&quot;文章标题&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动本地服务器（默认 http://localhost:4000），可在浏览器实时预览博客效果</span></span><br><span class="line">hexo server  <span class="comment"># 可以简写: hexo s</span></span><br></pre></td></tr></table></figure>

<h1 id="4-部署到GitHub"><a href="#4-部署到GitHub" class="headerlink" title="4. 部署到GitHub"></a>4. 部署到GitHub</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 组合命令：清除缓存和旧生成文件 + 生成 + 部署</span></span><br><span class="line">hexo clean; hexo generate; hexo deploy </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Illumina index hopping 原理</title>
    <url>/2023/06/27/Illumina-index-hopping-%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>Illumina的Patterned Flow Cell使用了更易产生index hopping的化学反应。通过更谨慎的实验​​准备，可能改善这种情况，可以忽略对大多数下游应用的影响。</p>
<span id="more"></span>

<h1 id="QC-Fail-Sequencing内容"><a href="#QC-Fail-Sequencing内容" class="headerlink" title="QC Fail Sequencing内容"></a>QC Fail Sequencing内容</h1><p><strong>以下内容摘录并翻译自QC Fail Sequencing，完整内容请查看：</strong><br><a href="https://sequencing.qcfail.com/articles/the-latest-illumina-sequencers-muddle-samples/">The latest Illumina sequencers muddle samples</a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近，《Wired》杂志刊登了一篇文章，讨论新型号测序仪的问题。这篇文章记录了一位斯坦福大学研究人员的经历，他在研究血液干细胞时似乎得到了有趣的发现。然而，潜在的重要发现其实很明显是测序技术问题的副产品，导致在测序过程中不同的样本产生混淆。这对于相关科学家（据报道他浪费了一年的工作成果）来说是不幸的，但这一技术问题的影响给更多的分子生物学和基因组学界研究人员敲响了警钟。  </p>
<h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><p>斯坦福大学的研究人员将他们的发现放在了<a href="http://dx.doi.org/10.1101/125724">bioRxiv</a>上。他们使用 HiSeq 4000 对小鼠单细胞 RNA-Seq 样本进行了测序。与通常处理单细胞数据时一样，他们对样本进行了多重（multiplex）处理：一种在 DNA 分子两端用预定义条形码标记（index &#x2F; barcode）的技术，然后将来自不同文库的DNA组合起来。然后将这组样本和加上条形码一起进行测序，产生的 FASTQ 文件可以使用专业软件进行“多路分解”（de-multiplexed &#x2F; index拆分），使研究人员能够判断序列来自哪个文库。<br>在观察样品制备过程中使用的 384 孔板上样本的表达模式的空间排列时，发现了可疑情况。每个孔中应包含只来自单个细胞的 cDNA，并且样品应随机分布在各个孔中。令人惊讶的是，如果某个基因在特定的孔中有非常高的水平表达，那么在该孔的同一行和同一列的所有或大多数孔中也会检测到信号，但水平较低，从而在孔中形成特征性的十字形表达模式（如下图所示）。在其他类型的文库也可以观察到类似的模式，例如 ATAC-Seq。研究人员认为该模式与 technical artefact 的情况最为一致。<br><img src="https://pic.imgdb.cn/item/649a55d01ddac507cc6c9d50.png" alt="barcode_swapping_heatmap">  </p>
<h2 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h2><p>斯坦福大学小组在另一台 HiSeq 4000 上对他们的样本进行了重新测序，并观察到了相同的模式，但是在 NextSeq 500 上进行测序时没有观察到该模式。这一点非常重要，因为旧型号的 NextSeq 500 没有使用Patterned Flow Cell，这表明问题只存在于有这种设计的测序仪。这种图案化排列模式是由数十亿个固定大小的纳米孔组成，均匀分布在Flow Cell中，使其比上一代测序仪分隔出DNA簇的密度高得多。<br>被混淆的信号的十字形图案与文库分配的barcode有关，表明barcode被错误识别。为了进一步研究，他们用以下3种条件进行了实验：</p>
<ol>
<li>cDNA &#x2F; 试剂 (包含index引物)</li>
<li>只有试剂 (包含index引物)</li>
<li>没有 cDNA &#x2F; 没有试剂</li>
</ol>
<p>不含试剂也不含cDNA的孔（条件3）相对应的barcode序列非常少。与此形成鲜明对比的是，在仅缺少cDNA的孔（条件2）中发现了许多序列（约为含有cDNA的孔（条件1）的平均值的7%）。此外，这些序列约80%比对到小鼠基因组 (mm10) 。这表明index引物的存在导致了样品的混淆，因此在混合处理多个样品时将出现大量信号混淆，称为“标签跳跃”（index hopping）或“条形码交换”（barcode swapping）。<br>虽然上述的百分比令人不安，但其他研究人员也报告观察到相同的现象，混淆水平显着降低。 CRUK剑桥研究所基因组学负责人James Hadfield观察到标签跳跃比例约为0.1 - 0.2%，这对于大多数下游应用来说应该不会造成太大问题。<br>（事实上​​，<a href="https://sequencing.qcfail.com/articles/mixing-sample-types-in-a-flowcell-lane-generates-cross-contamination-artefacts/">在之前的non-patterned测序仪上观察到的标签跳跃水平非常低</a>，但只有差异很大的样本进行混合测序，例如将RNA-Seq与ChIP-Seq样本混合测序，才会出现明显问题。）  </p>
<h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><p>在HiSeq 4000上观察到的标签跳跃可能是由于patterned flow cell，因此预计HiSeq 3000和HiSeq X Ten以及NovaSeq测序仪也会发生这种情况。使用patterned flow cell需要用到一种新型测序化学反应，称为exclusion amplification (ExAmp)，取代non-patterned flow cell上使用的传统的桥式扩增来生成簇（cluster）。<br>这种新的测序化学反应的技术细节尚未公开，但可以查阅相关专利来了解整个过程，因此可以合理地推测标签跳跃发生在簇生成之前，因为簇生成所需的所有试剂都存在于该反应混合物中。该混合物中游离的index引物有可能作为文库片段的引物并通过DNA聚合酶进行延伸。这些分子，携带了错误的条形码，可以自由地生成DNA簇。传统的non-patterned flow cell的情况并非如此，在传统的flow cell设计中，DNA片段与flow cell杂交后，游离的index会被洗掉。只有在此步骤之后，才会添加DNA聚合酶并启动序列延伸。<br><img src="https://pic.imgdb.cn/item/649e445c1ddac507ccc8bea5.png" alt="barcode_swap_mechanism"><br>目前尚不清楚如何通过一般的生物信息学方法来去除这种artefacts，实际上可能可以通过实验方案解决。在处理少量样本时，研究人员应该停止采用单条形码（single-barcode）策略，而应该使用双条形码（double-barcode）样本。测序后，应该过滤序列，仅保留两个条形码都一致而且是预期的序列。由于双条形码都跳跃应该是一种罕见事件，因此采取此步骤应该会大大减少样本的错误分配。<br>当对许多样本进行混合测序时（即使没有条形码跳跃问题，也已经需要用双条形码），斯坦福大学研究人员建议使用条形码对，其中每个单独的条形码仅使用一次。尽管该方法减少了可用条形码组合的数量，但它仍然可以使许多样品在同一lane上测序。此外，他们提出了从文库中去除游离引物的纯化策略。<br>Illumina最近发表了一篇<a href="https://www.illumina.com/content/dam/illumina-marketing/documents/products/whitepapers/index-hopping-white-paper-770-2017-004.pdf?linkId=36607862">论文</a>，证实了标签跳跃的发生。他们表示，通过正确地清理游离引物并实施其他实验技术，对于大多数下游应用来说，应该可以将标签跳跃最小化到可以忽略不计的水平。该论文还建议在单个lane上只混合测序相似条件的样本。他们给出了大脑与肝脏RNA-Seq的例子，某个转录本在肝脏中以高水平存在，但在大脑中根本不存在。由于标签跳跃，导致该转录本可能在大脑中以低水平表达。 Illumina 建议，通过单个lane上只混合相似的样本（即大脑或肝脏），可以避免此问题。然而，这肯定不是理想的解决方案，因为研究人员需要提前知道样本的表达谱是怎样的，而且这种策略会导致批次效应的问题更严重。  </p>
<h1 id="更多相关信息"><a href="#更多相关信息" class="headerlink" title="更多相关信息"></a>更多相关信息</h1><h2 id="Illumina-Index-Hopping的说明"><a href="#Illumina-Index-Hopping的说明" class="headerlink" title="Illumina | Index Hopping的说明"></a>Illumina | Index Hopping的说明</h2><p>简单说明了Index Hopping导致样本混淆的问题，列出了一些相关文档。<br><a href="https://www.illumina.com/techniques/sequencing/ngs-library-prep/multiplexing.html?langsel=/us/">Sample Multiplexing Overview</a></p>
<h2 id="Illumina-如何降低Index-Hopping"><a href="#Illumina-如何降低Index-Hopping" class="headerlink" title="Illumina | 如何降低Index Hopping"></a>Illumina | 如何降低Index Hopping</h2><p>Index Hopping是什么，有什么影响，如何减少发生。<br><a href="https://www.illumina.com/techniques/sequencing/ngs-library-prep/multiplexing/index-hopping.html?langsel=/us/">Minimize index hopping in multiplexed runs</a></p>
<h2 id="IDT-Dual-index接头减少index-hopping"><a href="#IDT-Dual-index接头减少index-hopping" class="headerlink" title="IDT | Dual index接头减少index hopping"></a>IDT | Dual index接头减少index hopping</h2><p>说明了Dual index接头如何减少index hopping，有非常详细的图表和数据。<br><a href="https://sg.idtdna.com/pages/technology/next-generation-sequencing/dual-index-adapters-reduce-index-hopping">Dual index adapters reduce index hopping</a></p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Illumina</tag>
        <tag>Index Hopping</tag>
        <tag>测序原理</tag>
        <tag>QC Fail Sequencing</tag>
      </tags>
  </entry>
  <entry>
    <title>Illumina测序产生的重复序列</title>
    <url>/2023/06/21/Illumina%E6%B5%8B%E5%BA%8F%E4%BA%A7%E7%94%9F%E7%9A%84%E9%87%8D%E5%A4%8D%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>Illumina的Patterned Flow Cell产生重复序列</p>
<span id="more"></span>

<h1 id="QC-Fail-Sequencing内容"><a href="#QC-Fail-Sequencing内容" class="headerlink" title="QC Fail Sequencing内容"></a>QC Fail Sequencing内容</h1><p><strong>以下内容摘录并翻译自QC Fail Sequencing，完整内容请查看：</strong><br><a href="https://sequencing.qcfail.com/articles/illumina-patterned-flow-cells-generate-duplicated-sequences/">Illumina Patterned Flow Cells Generate Duplicated Sequences</a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Illumina最近的一项创新是有序的流动槽，它首次应用在HiSeq X，随后也应用于HiSeq 3000和HiSeq 4000测序仪。通过规律化排列数十亿个固定大小的纳米孔，使其在流动槽中均匀分布，能够产生更高密度的DNA簇（可以更有效地利用Flow Cell表面积，增加数据产出，减少成本，降低运行时间）。<br>虽然有以上这些优点，但有证据表明，与早期设计（Nonpatterned Flow Cell）相比，Patterned Flow Cell会产生更多的重复序列。  </p>
<h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><p>使用 HiSeq 4000和HiSeq 2500（用的是Nonpatterned Flow Cell）对同一个Hi-C文库进行测序。测序后，数据使用 HiCUP 分析。<br>与预期一致，HiSeq 4000产出的原始Reads数是383M， 远多于HiSeq 2500的257M。<br>然而，同一文库的这两次测序之间的重复序列比例存在显着差异。经过去重处理后，HiSeq 2500只有 <strong>2%</strong> 的原始序列被过滤，这与HiSeq 4000去除了 <strong>33%</strong> 形成鲜明对比。<br><img src="https://pic.imgdb.cn/item/6492ad6b1ddac507ccd24753.png" alt="duplicates_graph"><br>经过HiCUP流程分析后，用不同测序仪测序的两个样本最后都剩余55M Reads，HiSeq 4000原本增加的数据产出被抵消了。  </p>
<h2 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h2><p>在研究两台测序仪之间的差异之前，为了排除这种可能性：即HiSeq 4000测到的重复序列比例增加，仅仅是因为它测到了更多di-tags（一般测序文库里的DNA Fragments），即给定样本被测序的次数越多，测到重复序列的可能性就越高（也就是测序数据量较高，文库复杂度较低时，出现的Dup率高的情况）。为了确认这一点，对HiSeq 4000的FASTQ文件随机抽样，缩小到与 HiSeq 2500相同的Reads数量。然后还是用HiCUP流程分析，这次HiSeq 4000数据中的 <strong>25%</strong> 在去重步骤中被过滤掉，仍然远远超过HiSeq 2500的 <strong>2%</strong> 。<br>为了查证产生重复序列的可能原因，我们分析了流动槽上重复序列的空间分布。对于两台测序仪，重复序列都是均一形式分布，没有呈现出明显的“热点”区域。虽然重复序列没有分布在流动槽的特定区域，但一般来说，重复序列仍然可能与其拷贝有位置相关关系。为了验证这一假设，我们找到重复序列的两个拷贝序列，并记录它们的位置是在1还是2个Tiles上（Illumina数据可以通过Reads ID知道该Read&#x2F;cluster的坐标，包括Lane、Tile、X、Y，就可以判断两条Reads是否来源于同一个Tile）。值得注意的是，HiSeq 2500的重复序列有 <strong>1%</strong> 来自同一个Tile，而HiSeq 4000是 <strong>92%</strong> 。这种重复序列的位置接近性，说明在HiSeq 4000上观察到的重复序列主要是测序仪特有的Sequencing artefacts。<br><img src="https://pic.imgdb.cn/item/6492b8a91ddac507cce7f2ed.png" alt="one_two_tile_graph"><br>为了进一步表现这种二维距离，我们提取了只来自1个Tile的重复序列，然后记录了同一重复序列之间的相对位置（还是基于Illumina数据的Reads ID中含有的坐标信息）。下图将这些序列的相对距离展示为密度图（对于每个重复序列，其中一条序列被指定为原点，图中显示了“其他重复序列”与原点的相对位置）。<br><img src="https://pic.imgdb.cn/item/6492bada1ddac507ccebfb32.png" alt="relative_position_of_duplicates"><br>HiSeq 2500 除了靠近原点的高密度区域外，在整个图上的是均匀分布的。而HiSeq 4000 原点周围的密度升高更为明显，几乎所有其他重复序列都集中在原点区域。我们猜测远离原点的那些重复序列是来源于真实的生物学重复（biological duplicates）或实验导致的PCR重复（experimental PCR duplicates）。而那些接近原点的重复序列更有可能是由测序仪导致的（optical duplicates）。这再次说明了HiSeq 4000产生了更多的duplication artefacts。<br>然后，我们研究了HiSeq 4000上的重复序列是否仅出现在相邻的纳米孔，或流动槽中同一局部区域中的某些纳米孔。虽然我们无法获得FASTQ坐标系与特定某个纳米孔的直接关联信息，但可以通过紧邻原点创建该区域的密度图来可视化HiSeq 4000流动槽。该图清楚地表明，在原点周围的多个孔中发现了重复序列，并且随着远离原点，这种趋势会减小。而HiSeq 2500数据中，正如预期，看不到纳米孔图案分布特征。<br><img src="https://pic.imgdb.cn/item/6492c0061ddac507ccf6128c.png" alt="duplicates_patterned_flowcell-1"><br><img src="https://pic.imgdb.cn/item/6492c0471ddac507ccf693ca.png" alt="duplicates_unordered_flowcell-1">  </p>
<h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><p>其他研究者已经讨论过Patterned Flow Cell有产生更多重复序列的倾向性。在最近发表在 CRUK-CI Core Genomics 博客上的一篇<a href="http://core-genomics.blogspot.co.uk/2016/05/increased-read-duplication-on-patterned.html">文章</a>中，James Hadfield 报告说，来自一个簇的文库分子可能会返回到周围的溶液中，然后作为相邻flow cell（应该是nanowell？）中第二个簇的种子。有人提出，可以通过增加上机文库浓度来最大程度地减少这些重新播种（re-seeding）事件，但是代价是会产生没有用的多克隆簇（指的应该是文库的experimental PCR duplicates？）。因此，需要在这两个相互竞争的问题之间取得平衡，使特异的有效的序列数量最大化。我们直接与Illumina讨论了这个问题，Illumina同意这一策略，并建议patterned flowcell测序仪可能需要逐个测序仪地进行校准，以确定最佳上机浓度。  </p>
<h1 id="更多相关信息"><a href="#更多相关信息" class="headerlink" title="更多相关信息"></a>更多相关信息</h1><h2 id="Patterned-和-Nonpatterned-Flow-Cell"><a href="#Patterned-和-Nonpatterned-Flow-Cell" class="headerlink" title="Patterned 和 Nonpatterned Flow Cell"></a>Patterned 和 Nonpatterned Flow Cell</h2><p>这篇Illumina的官方文档，比较清楚地说明了Patterned 和 Nonpatterned Flow Cell在测序时的一些区别。<br><a href="https://www.illumina.com/content/dam/illumina-marketing/documents/products/technotes/hiseq-x-percent-pf-technical-note-770-2014-043.pdf">Calculating Percent Passing Filter for Patterned and Nonpatterned Flow Cells</a>  </p>
<h2 id="RTA软件"><a href="#RTA软件" class="headerlink" title="RTA软件"></a>RTA软件</h2><p>Patterned Flow Cell通过规律排布纳米孔，使测序芯片产生更多的簇，更多数据；同时也通过升级RTA（Real Time Analysis）软件，减少了从图像到序列转换的分析时间。<br><a href="https://www.illumina.com/content/dam/illumina-marketing/documents/products/appnotes/novaseq-hiseq-q30-app-note-770-2017-010.pdf">NovaSeq™ 6000 System Quality Scores and RTA3 Software</a>  </p>
<h2 id="过滤optical-duplicates序列"><a href="#过滤optical-duplicates序列" class="headerlink" title="过滤optical duplicates序列"></a>过滤optical duplicates序列</h2><p>在<a href="https://sequencing.qcfail.com/articles/illumina-patterned-flow-cells-generate-duplicated-sequences/">Illumina Patterned Flow Cells Generate Duplicated Sequences</a>原文的Mitigation部分（没翻译这部分，有兴趣请看原文）有提到Picard过滤optical duplicates的方法。<br>目前Picard已经被整合到了GATK中，相关模块和参数是MarkDuplicates (Picard)的–OPTICAL_DUPLICATE_PIXEL_DISTANCE。<br>GATK 4.4.0.0的<a href="https://gatk.broadinstitute.org/hc/en-us/articles/13832748517275-MarkDuplicates-Picard-#--OPTICAL_DUPLICATE_PIXEL_DISTANCE">MarkDuplicates (Picard)</a>说明文档中有写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For the patterned flowcell models, 2500 is moreappropriate. </span><br><span class="line">For other platforms and models, users should experiment to find what works best.</span><br></pre></td></tr></table></figure>
<p>使用Patterned Flow Cell的测序平台，推荐–OPTICAL_DUPLICATE_PIXEL_DISTANCE参数设置为2500，但其实默认参数是100。<br>所以最好在分析前确认测序芯片类型，然后设置合适的参数。</p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Illumina</tag>
        <tag>测序原理</tag>
        <tag>QC Fail Sequencing</tag>
        <tag>Duplicate</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令行文本文件操作</title>
    <url>/2023/05/22/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Linux命令对文本文件的操作</p>
<span id="more"></span>

<h1 id="表头行转成列"><a href="#表头行转成列" class="headerlink" title="表头行转成列"></a>表头行转成列</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head -1 *.txt | awk &#x27;&#123;for(i=1;i&lt;=NF;i++)a[NR,i]=$i&#125;END&#123;for(j=1;j&lt;=NF;j++)for(k=1;k&lt;=NR;k++)printf k==NR?a[k,j] RS:a[k,j] FS&#125;&#x27;|less -SN</span><br></pre></td></tr></table></figure>

<h1 id="修改文件时间"><a href="#修改文件时间" class="headerlink" title="修改文件时间"></a>修改文件时间</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch -m -d &quot;20220411 1306&quot; File.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户管理</title>
    <url>/2023/05/21/Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>Linux系统的用户查看、创建、目录权限</p>
<span id="more"></span>

<h1 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h1><p>查看当前系统已存在的用户  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | cut -d : -f 1</span><br></pre></td></tr></table></figure>

<h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><h2 id="创建非正规新用户"><a href="#创建非正规新用户" class="headerlink" title="创建非正规新用户"></a>创建非正规新用户</h2><p>以下创建方法，不会创建home、无归属用户组  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">useradd -M -N [name]</span><br><span class="line"># 修改/创建用户密码（可用简单密码）</span><br><span class="line">echo [password] | passwd --stdin [name]</span><br></pre></td></tr></table></figure>
<h2 id="创建正规新用户"><a href="#创建正规新用户" class="headerlink" title="创建正规新用户"></a>创建正规新用户</h2><p>以下创建方法，会同时创建该用户的home目录，主用户组为参数指定的group  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">useradd -m -g [group] [name]</span><br><span class="line"># 创建用户密码（不可用简单密码）</span><br><span class="line">passwd [name]</span><br></pre></td></tr></table></figure>

<h1 id="操作用户组"><a href="#操作用户组" class="headerlink" title="操作用户组"></a>操作用户组</h1><h2 id="创建新用户组"><a href="#创建新用户组" class="headerlink" title="创建新用户组"></a>创建新用户组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd [group]</span><br></pre></td></tr></table></figure>
<h2 id="查看组内有哪些用户"><a href="#查看组内有哪些用户" class="headerlink" title="查看组内有哪些用户"></a>查看组内有哪些用户</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/group|grep ^[group]</span><br></pre></td></tr></table></figure>
<h2 id="将用户添加进组"><a href="#将用户添加进组" class="headerlink" title="将用户添加进组"></a>将用户添加进组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -a -G [group] [name]</span><br></pre></td></tr></table></figure>
<h2 id="查看用户的主用户组、所属用户组"><a href="#查看用户的主用户组、所属用户组" class="headerlink" title="查看用户的主用户组、所属用户组"></a>查看用户的主用户组、所属用户组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id [name]</span><br></pre></td></tr></table></figure>

<h1 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h1><h2 id="改变文件或目录的所有者及用户组"><a href="#改变文件或目录的所有者及用户组" class="headerlink" title="改变文件或目录的所有者及用户组"></a>改变文件或目录的所有者及用户组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -R 递归目录内的所有文件  </span><br><span class="line">chown -R [name]:[group] [file/dir]</span><br></pre></td></tr></table></figure>
<h2 id="改变文件或目录的权限"><a href="#改变文件或目录的权限" class="headerlink" title="改变文件或目录的权限"></a>改变文件或目录的权限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 只有文件所有者和root用户可以修改文件或目录的权限</span><br><span class="line"># -R 递归目录内的所有文件</span><br><span class="line"># 指定权限（八进制语法）：读4，写2，操作1</span><br><span class="line">chmod -R [文件所有者权限、文件所有组内用户权限、其他用户权限] [file/dir]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL操作</title>
    <url>/2023/05/22/MySQL%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>MySQL数据库的一些常用操作命令</p>
<span id="more"></span>


<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="mysql连接-x2F-登录"><a href="#mysql连接-x2F-登录" class="headerlink" title="mysql连接&#x2F;登录"></a>mysql连接&#x2F;登录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<h2 id="查看mysql中的数据库"><a href="#查看mysql中的数据库" class="headerlink" title="查看mysql中的数据库"></a>查看mysql中的数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>
<h2 id="选择-x2F-进入某个数据库"><a href="#选择-x2F-进入某个数据库" class="headerlink" title="选择&#x2F;进入某个数据库"></a>选择&#x2F;进入某个数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure>
<h2 id="查看数据库中的表格"><a href="#查看数据库中的表格" class="headerlink" title="查看数据库中的表格"></a>查看数据库中的表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>
<h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database &lt;数据库名&gt;;</span><br><span class="line">CREATE DATABASE IF NOT EXISTS RUNOOB DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure>


<h1 id="表格操作"><a href="#表格操作" class="headerlink" title="表格操作"></a>表格操作</h1><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>WHERE 子句的字符串比较是不区分大小写的。 你可以使用 BINARY关键字来区分大小写<br>SELECT * from runoob_tbl WHERE runoob_author&#x3D;’菜鸟教程’;<br>SELECT * from runoob_tbl WHERE BINARY runoob_author&#x3D;’runoob.com’;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 where 列名 = &quot;列的名字&quot;;</span><br></pre></td></tr></table></figure>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名称 set 列名称=新值 where 更新条件;</span><br></pre></td></tr></table></figure>
<h2 id="字符串批量修改"><a href="#字符串批量修改" class="headerlink" title="字符串批量修改"></a>字符串批量修改</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE table_name SET field=REPLACE(field, &#x27;old-string&#x27;, &#x27;new-string&#x27;);</span><br></pre></td></tr></table></figure>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名称 where 删除条件;</span><br></pre></td></tr></table></figure>
<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p>如果数据是字符型，必须使用单引号或者双引号，如：”value”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 (&quot;列名1&quot;,&quot;列名2&quot;) values (&quot;第一列内容&quot;, &quot;第二列内容&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from 表名;</span><br><span class="line">select count(id) from 表名;</span><br><span class="line">select max(&quot;列名&quot;) from 表名;</span><br></pre></td></tr></table></figure>
<h2 id="新建表格"><a href="#新建表格" class="headerlink" title="新建表格"></a>新建表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名 （列名 列类型）;</span><br></pre></td></tr></table></figure>
<h2 id="删除表格"><a href="#删除表格" class="headerlink" title="删除表格"></a>删除表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure>
<h2 id="表格新增列"><a href="#表格新增列" class="headerlink" title="表格新增列"></a>表格新增列</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 add column 列名 数据类型 约束;</span><br></pre></td></tr></table></figure>
<h2 id="表格删除列"><a href="#表格删除列" class="headerlink" title="表格删除列"></a>表格删除列</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop 列名;</span><br></pre></td></tr></table></figure>
<h2 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 change 原列名 新列名 数据类型 约束;</span><br></pre></td></tr></table></figure>

<h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1><ol>
<li>菜鸟教程-MySQL教程 <a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置Samba</title>
    <url>/2023/05/01/Linux%E9%85%8D%E7%BD%AESamba/</url>
    <content><![CDATA[<p>Linux系统配置Samba服务，Windows系统设置网络映射，实现共享目录</p>
<span id="more"></span>

<p><a href="https://blog.51cto.com/aby028/1830125">参考文档</a></p>
<h1 id="安装Samba"><a href="#安装Samba" class="headerlink" title="安装Samba"></a>安装Samba</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install samba</span><br></pre></td></tr></table></figure>
<p>这个服务器之前已经安装过了，所以截图里是yum list，看看版本<br><img src="https://pic2.imgdb.cn/item/644f98820d2dde57774b9feb.png" alt="安装Samba"></p>
<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 备份旧的配置文件</span><br><span class="line">cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</span><br><span class="line"># 修改配置文件，添加一段映射目录的设置信息，如下图</span><br><span class="line">vi /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.imgdb.cn/item/644f98750d2dde57774b9724.png" alt="Samba配置文件">  </p>
<ul>
<li>[blast]是windows系统设置网络映射时要填的目录名称</li>
<li>comment是注释信息</li>
<li>path是Linux本地要映射出去的实际路径</li>
<li>public和browseable是路径是否公共&#x2F;可见？具体区别不太清楚</li>
<li>writeable是可写权限</li>
<li>write list是设置可写用户，用“@用户组名”可以设置可写用户组</li>
<li>creat mask是设置上传的文件读写权限</li>
<li>directory mask是设置上传的文件夹读写权限</li>
</ul>
<h1 id="testparm测试配置文件是否错误"><a href="#testparm测试配置文件是否错误" class="headerlink" title="testparm测试配置文件是否错误"></a>testparm测试配置文件是否错误</h1><p>testparm专门用于测试 &#x2F;etc&#x2F;samba&#x2F;smb.conf 文件格式是否正确<br>命令行输testparm ，回车即可<br><img src="https://pic2.imgdb.cn/item/644f98620d2dde57774b8854.png" alt="testparm测试"></p>
<h1 id="修改Linux要映射的目录权限"><a href="#修改Linux要映射的目录权限" class="headerlink" title="修改Linux要映射的目录权限"></a>修改Linux要映射的目录权限</h1><p>可能不改权限，也能正常写入文件？  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /xxx/data/xxx_BLAST  </span><br></pre></td></tr></table></figure>

<h1 id="关闭防火墙和SElinux"><a href="#关闭防火墙和SElinux" class="headerlink" title="关闭防火墙和SElinux"></a>关闭防火墙和SElinux</h1><p>这个服务器本来就关了，所以下面这2条命令没有测试过<br>不确定是不是不关也可以正常映射  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关闭防火墙的ip包过滤服务？</span><br><span class="line">service iptables stop</span><br><span class="line"># 也可以直接修改/etc/sysconfig/selinux文件</span><br><span class="line">setenforce  0</span><br></pre></td></tr></table></figure>

<h1 id="设置访问用户信息"><a href="#设置访问用户信息" class="headerlink" title="设置访问用户信息"></a>设置访问用户信息</h1><p>samba的访问用户是Linux系统中已存在的用户，只需设置该用户的samba服务密码即可<br>注意该用户名或该用户组，在Samba配置时是不是在write list里  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># [user]是用户名，回车后，输2次密码，完成设置</span><br><span class="line">smbpasswd -a [user]</span><br><span class="line"># 重启samba服务</span><br><span class="line">service smb restart</span><br></pre></td></tr></table></figure>

<h1 id="Windows设置网络映射"><a href="#Windows设置网络映射" class="headerlink" title="Windows设置网络映射"></a>Windows设置网络映射</h1><p>我的电脑，右键，映射网络驱动器<br>驱动器随便选一个盘符，映射成功之后，我的电脑里会出现这个盘<br>文件夹格式：\\[服务器ip]\[Samba配置文件设置的目录名称，如上面的blast]<br><img src="https://pic2.imgdb.cn/item/644f98320d2dde57774b61ec.jpg" alt="设置网络映射1"><br>输入samba访问用户和密码，点击确定，完成映射<br><img src="https://pic2.imgdb.cn/item/644f98520d2dde57774b78e1.png" alt="设置网络映射2"></p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Samba</tag>
        <tag>网络映射</tag>
        <tag>共享目录</tag>
      </tags>
  </entry>
  <entry>
    <title>Pacbio三代数据SV分析</title>
    <url>/2023/05/26/Pacbio%E4%B8%89%E4%BB%A3%E6%95%B0%E6%8D%AESV%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>（未解决） Pacbio CCS(HIFI)数据，IGV能看到的Deletion，用三代SV软件call不出</p>
<span id="more"></span>

<h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><p>输入文件是一个Pacbio CCS(HIFI)数据，是用pbmm2 1.5.0 (commit v1.5.0-1-gadeb061)比对得到的Bam文件。<br>需要确认一个9.5k Deletion的情况，已在IGV明确找到softclip fragment比对位置。  </p>
<h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><h2 id="pbsv"><a href="#pbsv" class="headerlink" title="pbsv"></a>pbsv</h2><p>因为是Pacbio的数据，所以一开始是用pbsv分析。但是出现以下问题：  </p>
<h3 id="pbmm2特定版本结果只与pbsv特定版本兼容？"><a href="#pbmm2特定版本结果只与pbsv特定版本兼容？" class="headerlink" title="pbmm2特定版本结果只与pbsv特定版本兼容？"></a>pbmm2特定版本结果只与pbsv特定版本兼容？</h3><p>从bioconda找到<a href="https://anaconda.org/bioconda/pbsv/files">不同版本的pbsv</a>。<br>测试了2.3.0、2.4.0、2.4.1、2.6.0、2.6.2、2.9.0，不同版本的pbsv discover结果.svsig.gz文件都有差别。<br>但是只在2.4.1、2.6.0、2.6.2的pbsv call的TRACE级别Log中有看见一些cluster。所以pbmm2 1.5.0应该对应2.4.1、2.6.0、2.6.2版本的pbsv？<br>后续接着用2.6.2版本的pbsv分析。  </p>
<h3 id="pbsv-call不出"><a href="#pbsv-call不出" class="headerlink" title="pbsv call不出"></a>pbsv call不出</h3><p>.svsig.gz中能看到支持该Deletion的记录，但最终call的结果里没有该Deletion。<br>pbsv call的TRACE级别Log文件中能看到：  </p>
<ul>
<li>有警告信息：Could not find parse function for type: s。但是<a href="https://github.com/PacificBiosciences/pbbioconda/issues/455">.svsig.gz文件不提供文件格式说明</a>，没法确认是不是这个警告导致没结果。</li>
<li>看见的cluster都是Insertion的，而且都因为failed coverage被过滤掉。该Deletion连cluster都没有。</li>
</ul>
<h2 id="Sniffles2"><a href="#Sniffles2" class="headerlink" title="Sniffles2"></a>Sniffles2</h2><p>pbsv不行，于是试了下Sniffles2。</p>
<h3 id="Sniffles-2-可能有bug"><a href="#Sniffles-2-可能有bug" class="headerlink" title="Sniffles 2 可能有bug"></a>Sniffles 2 可能有bug</h3><p>先用的Sniffles 2，发现github上有人说Sniffles2可能会漏检大片段缺失：<br><a href="https://github.com/fritzsedlazeck/Sniffles/issues/390">https://github.com/fritzsedlazeck/Sniffles/issues/390</a><br><a href="https://github.com/fritzsedlazeck/Sniffles/issues/367">https://github.com/fritzsedlazeck/Sniffles/issues/367</a><br>原因：未知。<br>可能的解决方法：（1）用sniffles 1；（2）用cuteSV。  </p>
<h3 id="Sniffles-1-报错"><a href="#Sniffles-1-报错" class="headerlink" title="Sniffles 1 报错"></a>Sniffles 1 报错</h3><p><code>No MD string detected! Check bam file! Otherwise generate using e.g. samtools.</code><br><a href="https://github.com/fritzsedlazeck/Sniffles/issues/149">https://github.com/fritzsedlazeck/Sniffles/issues/149</a><br><a href="https://github.com/fritzsedlazeck/Sniffles/issues/58">https://github.com/fritzsedlazeck/Sniffles/issues/58</a><br><a href="https://github.com/lh3/minimap2/issues/142">https://github.com/lh3/minimap2/issues/142</a><br>原因：minimap2旧版本不输出XS标签。<br>解决方法：（1）用samtools calmd给Bam文件添加XS标签；（2）更新minimap2并在比对时添加–MD参数。  </p>
<h3 id="Sniffles-1、Sniffles-2-都call不出"><a href="#Sniffles-1、Sniffles-2-都call不出" class="headerlink" title="Sniffles 1、Sniffles 2 都call不出"></a>Sniffles 1、Sniffles 2 都call不出</h3><p>Sniffles 2.0.7用–no-qc参数只找到一些Insertion的SV。<br>Sniffles 1.0.12用–ccs_reads –cs_string –min_support 1 –cluster_support 1也是只找到与Sniffles 2相同的Insertion。  </p>
<h2 id="cuteSV"><a href="#cuteSV" class="headerlink" title="cuteSV"></a>cuteSV</h2><h3 id="cuteSV-call不出"><a href="#cuteSV-call不出" class="headerlink" title="cuteSV call不出"></a>cuteSV call不出</h3><p>使用的版本是cuteSV 2.0.2。<br>按<a href="https://github.com/tjiangHIT/cuteSV">github文档</a>的建议，用了For PacBio CCS(HIFI) data和For force calling两种参数组合都只call出两个Insertion。  </p>
]]></content>
      <categories>
        <category>Unsolved</category>
      </categories>
      <tags>
        <tag>Pacbio</tag>
        <tag>三代</tag>
        <tag>SV</tag>
        <tag>pbsv</tag>
        <tag>Sniffles</tag>
        <tag>cuteSV</tag>
      </tags>
  </entry>
  <entry>
    <title>Python文本及脚本加密</title>
    <url>/2023/05/29/Python%E6%96%87%E6%9C%AC%E5%8F%8A%E8%84%9A%E6%9C%AC%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>Python脚本实现异或方法加密和解密文本文件，通过Cython编译为so文件加密Python脚本</p>
<span id="more"></span>

<h1 id="文本加密和解密"><a href="#文本加密和解密" class="headerlink" title="文本加密和解密"></a>文本加密和解密</h1><p>异或是一种简单的加密算法，根据异或的运算规则，通过密钥对明文信息进行异或运算，可以得到加密后的密文信息。<br>同时由于异或运算的可逆性，用同一密钥对密文信息再次进行异或运算，可以得到明文信息。  </p>
<h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><p>以下是对文本文件异或加密及解密的Python实现，Encrypt_Decrypt_Text.py。<br>此脚本里设定的字符编码是UTF-8，可以按需修改。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Python</span><br><span class="line"># Encrypt or decrypt text file with a password</span><br><span class="line"># coding=utf-8</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">EncodeSet = &quot;UTF-8&quot;</span><br><span class="line"></span><br><span class="line">def encrypt(String, Password, Seed):</span><br><span class="line">	if (len(Password) == 0):</span><br><span class="line">		sys.stderr.write(&quot;Password can&#x27;t be empty. Exit.&quot;)</span><br><span class="line">		exit()</span><br><span class="line">	Key_Int = ord(Password[Seed % len(Password)])</span><br><span class="line">	String_Byte = String.encode(EncodeSet)</span><br><span class="line">	String_Int = int.from_bytes(String_Byte, &#x27;big&#x27;)</span><br><span class="line">	String_Encrypt = String_Int ^ Key_Int</span><br><span class="line">	return String_Encrypt</span><br><span class="line"></span><br><span class="line">def decrypt(String, Password, Seed):</span><br><span class="line">	if (len(Password) == 0):</span><br><span class="line">		sys.stderr.write(&quot;Password can&#x27;t be empty. Exit.&quot;)</span><br><span class="line">		exit()</span><br><span class="line">	Key_Int = ord(Password[Seed % len(Password)])</span><br><span class="line">	String_Decrypt = String ^ Key_Int</span><br><span class="line">	Length = (String_Decrypt.bit_length() + 7) // 8</span><br><span class="line">	Decrypt_Byte = int.to_bytes(String_Decrypt, Length, &#x27;big&#x27;)</span><br><span class="line">	Decrypt = Decrypt_Byte.decode(EncodeSet)</span><br><span class="line">	return Decrypt</span><br><span class="line"></span><br><span class="line">def encrypt_file(Input, Password):</span><br><span class="line">	Input = os.path.abspath(Input)</span><br><span class="line">	Encrypt_Output_File = Input + &quot;.encrypt&quot;</span><br><span class="line">	Input_File = open(Input, &quot;rt&quot;, encoding = EncodeSet)</span><br><span class="line">	Output_File = open(Encrypt_Output_File, &quot;wt&quot;, encoding = EncodeSet)</span><br><span class="line">	Counter = 0</span><br><span class="line">	for Line in Input_File:</span><br><span class="line">		Counter = Counter + 1</span><br><span class="line">		Line = Line.strip(&quot;\r&quot;).strip(&quot;\n&quot;)</span><br><span class="line">		for Word in Line:</span><br><span class="line">			Word_Encrypt = encrypt(Word, Password, Counter)</span><br><span class="line">			Output_File.write(str(Word_Encrypt) + &quot; &quot;)</span><br><span class="line">		Output_File.write(&quot;\n&quot;)</span><br><span class="line">	Input_File.close()</span><br><span class="line">	Output_File.close()</span><br><span class="line">	return Encrypt_Output_File</span><br><span class="line"></span><br><span class="line">def decrypt_file(Input, Password):</span><br><span class="line">	Input = os.path.abspath(Input)</span><br><span class="line">	Decrypt_String = &quot;&quot;</span><br><span class="line">	Input_File = open(Input, &quot;rt&quot;, encoding = EncodeSet)</span><br><span class="line">	Counter = 0</span><br><span class="line">	for Line in Input_File:</span><br><span class="line">		Counter = Counter + 1</span><br><span class="line">		Line = Line.strip(&quot;\r&quot;).strip(&quot;\n&quot;)</span><br><span class="line">		Line = Line.strip(&quot; &quot;)</span><br><span class="line">		for Word in Line.split(&quot; &quot;):</span><br><span class="line">			Word_Decrypt = decrypt(int(Word), Password, Counter)</span><br><span class="line">			Decrypt_String = Decrypt_String + Word_Decrypt</span><br><span class="line">		Decrypt_String = Decrypt_String + &quot;\n&quot;</span><br><span class="line">	Input_File.close()</span><br><span class="line">	Decrypt_String = Decrypt_String.strip(&quot;\r&quot;).strip(&quot;\n&quot;)</span><br><span class="line">	return Decrypt_String</span><br></pre></td></tr></table></figure>

<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>以下是加密脚本示例，Encrypt.py。<br>encrypt_file函数返回的是加密文件路径，路径是[原文件路径].encrypt。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">import Encrypt_Decrypt_Text</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">Input = sys.argv[1]</span><br><span class="line">Password = sys.argv[2]</span><br><span class="line"></span><br><span class="line">Encrypt_File_Path = Encrypt_Decrypt_Text.encrypt_file(Input, Password)</span><br><span class="line"></span><br><span class="line">print(Encrypt_File_Path)</span><br></pre></td></tr></table></figure>

<h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>以下是解密脚本示例，Decrypt.py。<br>函数返回解密后的字符串，建议在脚本中解密后直接调用字符串，不要重新保存成文件。<br>假如密码错误，会报错或返回乱码。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">import Encrypt_Decrypt_Text</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">Input = sys.argv[1]</span><br><span class="line">Password = sys.argv[2]</span><br><span class="line"></span><br><span class="line">Decrype_File_Content = Encrypt_Decrypt_Text.decrypt_file(Input, Password)</span><br><span class="line"></span><br><span class="line">print(Decrype_File_Content)</span><br></pre></td></tr></table></figure>

<h1 id="脚本加密"><a href="#脚本加密" class="headerlink" title="脚本加密"></a>脚本加密</h1><p>用于文本文件加密的密钥，如果以明文方式写在脚本里等于没有加密。<br>所以需要对调用解密过程的python脚本再通过Cython加密，那么脚本里密钥的也加密了。  </p>
<h2 id="安装Cython"><a href="#安装Cython" class="headerlink" title="安装Cython"></a>安装Cython</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Python</span><br><span class="line">python -m pip install Cython</span><br></pre></td></tr></table></figure>

<h2 id="Cython脚本"><a href="#Cython脚本" class="headerlink" title="Cython脚本"></a>Cython脚本</h2><p>以下是将python脚本编译为so文件的脚本，Cpython_so.py。<br>以下脚本会生成so文件和清理中间文件，调用此脚本方法见”调用Cython脚本”部分。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Python</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line">############################################################## Help #############################################################</span><br><span class="line"></span><br><span class="line">parser=argparse.ArgumentParser(</span><br><span class="line">	description=&quot;Description: Generate .so from .py. Version of .so is base of python version.&quot;,</span><br><span class="line">	prog=&quot;Cpython_so.py&quot;,</span><br><span class="line">	usage=&quot;python Cpython_so.py [-h] [-V] -i &lt;python script&gt; -o &lt;Output Dir&gt;&quot;,</span><br><span class="line">	formatter_class=argparse.RawTextHelpFormatter</span><br><span class="line">)</span><br><span class="line">parser.add_argument(&#x27;-V&#x27;,&#x27;--version&#x27;,action=&quot;version&quot;,version=&quot;Version 1.0.0&quot;)</span><br><span class="line">parser.add_argument(&#x27;-i&#x27;,&#x27;--input&#x27;,required=True,type=str,help=&quot;File: python script&quot;)</span><br><span class="line">parser.add_argument(&#x27;-o&#x27;,&#x27;--output_dir&#x27;,required=True,type=str,help=&quot;Dir: Output directory path&quot;)</span><br><span class="line">if len(sys.argv[1:]) == 0:</span><br><span class="line">	parser.print_help()</span><br><span class="line">	parser.exit()</span><br><span class="line">args=parser.parse_args()</span><br><span class="line"></span><br><span class="line">############################################################## Run ##############################################################</span><br><span class="line"></span><br><span class="line">Input_Dir = os.path.dirname(os.path.abspath(args.input))</span><br><span class="line">Output_Dir = os.path.abspath(args.output_dir)</span><br><span class="line">if (Input_Dir == Output_Dir):</span><br><span class="line">	sys.stderr.write(&quot;Output directory can&#x27;t be same as python script.  Exit.\n&quot;)</span><br><span class="line">	exit(1)</span><br><span class="line"></span><br><span class="line">if not (os.path.exists(args.output_dir)):</span><br><span class="line">	os.mkdir(args.output_dir)</span><br><span class="line"></span><br><span class="line">Module = re.sub(&quot;.py$&quot;, &quot;&quot;, os.path.basename(args.input))</span><br><span class="line"></span><br><span class="line"># Copy Original Script To Work Dir</span><br><span class="line">Py_Script = os.path.abspath(args.output_dir) + &quot;/&quot; + os.path.basename(args.input)</span><br><span class="line">Command_Cp = &quot;cp &quot; + args.input + &quot; &quot; + Py_Script</span><br><span class="line">os.system(Command_Cp)</span><br><span class="line"></span><br><span class="line"># Generate .so From .py</span><br><span class="line">Cpython_Script = os.path.abspath(args.output_dir) + &quot;/Cpython_Setup.py&quot;</span><br><span class="line">Cpython_Script_File = open(Cpython_Script, &quot;w&quot;)</span><br><span class="line">Cpython_Script_File.write(&quot;from distutils.core import setup&quot; + &quot;\n&quot;)</span><br><span class="line">Cpython_Script_File.write(&quot;from Cython.Build import cythonize&quot; + &quot;\n&quot;)</span><br><span class="line">Cpython_Script_File.write(&quot;&quot; + &quot;\n&quot;)</span><br><span class="line">Cpython_Script_File.write(&quot;setup(ext_modules = cythonize(\&quot;&quot; + Py_Script + &quot;\&quot;))&quot; + &quot;\n&quot;)</span><br><span class="line">Cpython_Script_File.write(&quot;&quot; + &quot;\n&quot;)</span><br><span class="line">Cpython_Script_File.close()</span><br><span class="line"></span><br><span class="line">Py_Version = &quot;python&quot; + &quot;.&quot;.join([str(sys.version_info[0]),str(sys.version_info[1])])</span><br><span class="line">Command_Cpython = Py_Version + &quot; &quot; + Cpython_Script + &quot; build_ext --inplace&quot;</span><br><span class="line">os.system(Command_Cpython)</span><br><span class="line"></span><br><span class="line"># Move Result .so And Clean Temp Dir</span><br><span class="line">So_File = os.getcwd() + &quot;/&quot; + Module + &quot;*.so&quot;</span><br><span class="line">C_File = os.path.abspath(args.output_dir) + &quot;/&quot; + Module + &quot;.c&quot;</span><br><span class="line">Temp_Dir = os.getcwd() + &quot;/&quot; + &quot;build&quot;</span><br><span class="line"></span><br><span class="line">Command_Move = &quot;mv &quot; + So_File + &quot; &quot; + os.path.abspath(args.output_dir)</span><br><span class="line">os.system(Command_Move)</span><br><span class="line"></span><br><span class="line">Commad_Clean = &quot;rm -rf &quot; + &quot; &quot;.join([Py_Script, Cpython_Script, Temp_Dir, C_File])</span><br><span class="line">os.system(Commad_Clean)</span><br><span class="line"></span><br><span class="line"># Generate .py And .sh To Run .so</span><br><span class="line">So_Py_Script = os.path.abspath(args.output_dir) + &quot;/&quot; + Module + &quot;.py&quot;</span><br><span class="line">So_Sh_Script = os.path.abspath(args.output_dir) + &quot;/&quot; + Module + &quot;.sh&quot;</span><br><span class="line"></span><br><span class="line">So_Py_Script_File = open(So_Py_Script, &quot;w&quot;)</span><br><span class="line">So_Py_Script_File.write(&quot;import &quot; + Module + &quot;\n\n&quot;)</span><br><span class="line">So_Py_Script_File.close()</span><br><span class="line"></span><br><span class="line">So_Sh_Script_File = open(So_Sh_Script, &quot;w&quot;)</span><br><span class="line">So_Sh_Script_File.write(Py_Version + &quot; &quot; + So_Py_Script + &quot;\n&quot;)</span><br><span class="line">So_Sh_Script_File.close()</span><br><span class="line"></span><br><span class="line">Command_Chmod = &quot;chmod +x &quot; + So_Py_Script + &quot; &quot; + So_Sh_Script</span><br><span class="line">os.system(Command_Chmod)</span><br></pre></td></tr></table></figure>

<h2 id="调用Cython脚本"><a href="#调用Cython脚本" class="headerlink" title="调用Cython脚本"></a>调用Cython脚本</h2><p>可以写个shell调用，也可以直接命令行调用。<br>-i 是待加密的python脚本路径，-o 是加密后脚本的输出目录路径。<br>不同Python版本加密生成的so文件不一定通用，加密前脚本用哪个Python版本调用，就用哪个版本调用Cython脚本。<br>加密后的.so文件可以作为模块调用，使用方法可参考输出目录生成的.sh文件。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Shell</span><br><span class="line"></span><br><span class="line"># 系统默认的Python版本</span><br><span class="line">python Cpython_so.py -i ../../Cpython_Setup/Step1_Python_To_so/Store_Tumor_Report.py -o ./Test_2.7</span><br><span class="line"></span><br><span class="line"># 指定用Python 3.6版本</span><br><span class="line">python3.6 Cpython_so.py -i ../../Cpython_Setup/Step1_Python_To_so/Store_Tumor_Report.py -o ./Test_3.6</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.boydwang.com/2019/01/xor-powershell/">异或加密(XOR)原理及实现</a></li>
<li><a href="https://blog.51cto.com/u_15316394/4995945">Python 循环异或对文件进行加解密</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/529539134">Python程序加密-cython</a></li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Cython</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>R包安装报错 is not available</title>
    <url>/2023/04/18/R%E5%8C%85%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99-is-not-available/</url>
    <content><![CDATA[<p>R包安装报错ERROR: dependency is not available</p>
<span id="more"></span>


<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><ul>
<li>R版本：version 3.6.0</li>
</ul>
<h1 id="简要过程"><a href="#简要过程" class="headerlink" title="简要过程"></a>简要过程</h1><ul>
<li>安装R包：ComplexHeatmap  </li>
<li>安装命令：<code>BiocManager::install(&quot;ComplexHeatmap&quot;)</code>  </li>
<li>报错信息：ERROR: dependency ‘GetoptLong’ is not available for package ‘ComplexHeatmap’  </li>
<li>原因：ComplexHeatmap依赖的GetoptLong依赖的rjson，要求R版本高于当前版本  </li>
<li>解决：先安装旧版本的rjson，再安装ComplexHeatmap</li>
</ul>
<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>在github有查到报错信息：  </p>
<ul>
<li><a href="https://github.com/jokergoo/ComplexHeatmap/issues/514">找到个相关Issue</a>  </li>
<li>按这个Issue说的，安装更旧版本的GetoptLong。<br><code>install.packages(&quot;https://cran.r-project.org/src/contrib/Archive/GetoptLong/GetoptLong_0.1.8.tar.gz&quot;, repo = NULL)</code></li>
</ul>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>尝试安装更旧版本的GetoptLong时，会报另外一个包的错：  </p>
<ul>
<li>ERROR: dependency ‘rjson’ is not available for package ‘GetoptLong’  </li>
<li>在CRAN上查<a href="https://cran.r-project.org/web/packages/rjson/index.html">rjson</a>，当前这个包的版本是 0.2.21，Depends的R版本要≥ 4.0.0。  </li>
<li><strong>就是这个原因导致ComplexHeatmap安装不上，其实一开始GetoptLong的报错往上翻一点就会看见rjson的报错。</strong><br><img src="https://pic.imgdb.cn/item/643e8fe40d2dde5777cdc74f.jpg" alt="rjson_Depends"></li>
</ul>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><ul>
<li>到Old sources找旧版本，从新往旧，一个个安装试试。0.2.20版本就装得上。<br><code>install.packages(&quot;https://cran.r-project.org/src/contrib/Archive/rjson/rjson_0.2.20.tar.gz&quot;, repo = NULL)</code><br><img src="https://pic.imgdb.cn/item/643e90040d2dde5777cdf9f2.jpg" alt="Old_sources"></li>
</ul>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><ul>
<li>rjson安装成功后，重新安装ComplexHeatmap。  </li>
<li><code>BiocManager::install(&quot;ComplexHeatmap&quot;)</code>安装成功。</li>
</ul>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>ComplexHeatmap</tag>
      </tags>
  </entry>
  <entry>
    <title>VEP安装</title>
    <url>/2023/04/19/VEP%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>VEP安装过程</p>
<span id="more"></span>


<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><pre><code>yum install -y unzip git bgzip tabix
yum install -y &quot;perl(DBD::mysql)&quot;
cpan -i Archive::Zip
cpan -i Devel::CheckLib
cpan -i DBI
cpan -i Module::Metadata
cpan -i LWP::Simple
cpan -i HTTP::Tiny
cpan -i autodie
</code></pre>
<h1 id="安装VEP"><a href="#安装VEP" class="headerlink" title="安装VEP"></a>安装VEP</h1><p><a href="https://grch37.ensembl.org/info/docs/tools/vep/script/vep_download.html">官方安装说明</a></p>
<h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><p><code>git clone https://github.com/Ensembl/ensembl-vep.git</code>    </p>
<h2 id="下载API"><a href="#下载API" class="headerlink" title="下载API"></a>下载API</h2><p>注：–NO_HTSLIB选择不安装Bio::DB::HTS&#x2F;htslib。<br><code>perl [VEP路径]/VEP/ensembl-vep/INSTALL.pl --NO_HTSLIB --NO_UPDATE --AUTO a --CACHEDIR [数据库路径]</code>  </p>
<h2 id="下载数据库"><a href="#下载数据库" class="headerlink" title="下载数据库"></a>下载数据库</h2><p>注：人的注释数据库提供2种版本，通过–ASSEMBLY参数选择：GRCh37（hg19）和GRCh38（hg38）。<br><code>perl [VEP路径]/VEP/ensembl-vep/INSTALL.pl --NO_HTSLIB --NO_UPDATE --AUTO cf --ASSEMBLY GRCh37 --SPECIES homo_sapiens_merged --CACHEDIR [数据库路径]</code>  </p>
<h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><p>可选，某些数据库需要通过插件才能注释，如dbNSFP。<br><a href="https://grch37.ensembl.org/info/docs/tools/vep/script/vep_plugins.html">插件说明信息</a><br>注：<br>    查看INSTALL.pl可以看到下载Plugin的其实是从<code>raw.githubusercontent.com</code>下载，但是这玩意很久之前就被墙了。<br>    所以下载Plugin不是用官方说明提供的命令下载的，是从<code>https://github.com/Ensembl/VEP_plugins</code>下载项目压缩包，再解压到CACHEDIR&#x2F;Plugins的。<br>    VEP首次调用这些插件时，可能会报错误或警告，需要按提示信息下载数据库文件，或者安装依赖模块&#x2F;软件即可。也可以调用前直接看*.pm文件中的DESCRIPTION下载依赖。<br><code>perl [VEP路径]/VEP/ensembl-vep/INSTALL.pl --NO_HTSLIB --NO_UPDATE --AUTO p --ASSEMBLY GRCh37 --SPECIES homo_sapiens_merged --PLUGINS dbNSFP,DisGeNET,ExAC,CADD --CACHEDIR [数据库路径]</code>  </p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>VEP</tag>
        <tag>注释</tag>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title>Salmon的decoy文件</title>
    <url>/2023/05/21/Salmon%E7%9A%84decoy%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>用Salmon计算宏基因组预测基因的丰度，建index是否需要decoy文件。</p>
<span id="more"></span>

<h1 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p><a href="https://salmon.readthedocs.io/en/latest/salmon.html">Salmon用户手册</a>有以下描述：<br>Finally, we recommend using selective alignment with a decoy-aware transcriptome, to mitigate potential spurious mapping of reads that actually arise from some unannotated genomic locus that is sequence-similar to an annotated transcriptome.</p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>Salmon的开发者Rob在<a href="https://www.biostars.org/p/456231/">biostars的一篇帖子</a>的回复：<br>The decoy sequences are regions of the target genome that are sequence similar to annotated transcripts.These are the regions of the genome most likely to cause mismapping (e.g. transcribed pseudogenes, etc.).<br>There are 3 ways to run salmon :<br>(a) with just the annotated transcriptome being indexed<br>(b) with the annotated transcriptome and a small set of decoys computed using MASHMAP to search transcripts against the genome and<br>(c) with the annotated transcriptome and using the entire genome as decoy sequence.  </p>
<p>The (a) method requires the fewest resources,<br>(b) requires a good deal of resources to run the MASHMAP step, but the resulting index is similar to that of (a) and it avoids the most obvious cases of misalignment.<br>(c) results in the largest index, but it’s the most effective at avoiding potentially spurious mappings.  </p>
<p>Salmon can be used without decoy sequences (and sometimes, this is necessary — e.g. in a de novo assembly, there will likely be no possibility for decoys).<br>It can also be run without decoys in reference organisms.<br>It is simply the case that decoys help avoid certain cases of misalignment that can’t be adjudicated with the transcriptome alone, and therefore can lead to somewhat more robust estimates of abundance in the presence of the expression of unannotated sequences.  </p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>decoy序列指的是基因组上与注释出的真实转录本相似的序列。<br>建index时decoy文件的作用是避免后续比对时的错误，如比对到transcribed pseudogenes（可转录的假基因？）。<br>作者列举的3种方法中，(a)是只用注释出的转录本建index的。后面也有说Salmon在某些必要情况下是可以没有decoy序列信息的，例如de novo组装的基因组。<br>同理，如果是宏基因组分析中通过预测的方法得到基因&#x2F;转录本，本身就无法得到所谓的基因组上与转录本相似的区域。<br>因此宏基因组的基因丰度计算前，建Salmon index不需要decoy文件。  </p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">salmon index -p 30 -k 31 -t Gene.fa -i ./Index/Gene</span><br></pre></td></tr></table></figure>
<h2 id="定量"><a href="#定量" class="headerlink" title="定量"></a>定量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">salmon quant -l IU --validateMappings --meta -p 10 -i ./Index/Gene -1 Sample.R1.clean.rmhost.fq.gz -2 Sample.R2.clean.rmhost.fq.gz -o ./Result/Sample</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Transcriptome</tag>
        <tag>mNGS</tag>
        <tag>Salmon</tag>
        <tag>转录组</tag>
        <tag>宏基因组</tag>
      </tags>
  </entry>
  <entry>
    <title>VEP报错</title>
    <url>/2023/04/19/VEP%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>一些VEP使用过程中的报错信息</p>
<span id="more"></span>

<h1 id="Existing-variation全部为"><a href="#Existing-variation全部为" class="headerlink" title="Existing_variation全部为-"></a>Existing_variation全部为-</h1><h2 id="问题及警告信息"><a href="#问题及警告信息" class="headerlink" title="问题及警告信息"></a>问题及警告信息</h2><ul>
<li>问题：VEP注释结果中Existing_variation全部为-。  </li>
<li>警告信息：  WARNING: 6742 : Use of uninitialized value in subtraction (-) at ***&#x2F;ensembl-vep&#x2F;modules&#x2F;Bio&#x2F;EnsEMBL&#x2F;VEP&#x2F;AnnotationSource&#x2F;Cache&#x2F;VariationTabix.pm line 184, <VARS> line 1.</VARS></li>
</ul>
<h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>VariationTabix.pm是用于判断当前突变是否数据库中的已知突变，其中$existing-&gt;{start}和$existing-&gt;{end}未定义，是由于脚本中第172行调用tabix，open VARS, “$TABIX_BIN -f $file $region_string 2&gt;&amp;1 报错：[tabix] failed to load the index file。<br>查看tabix版本，是0.2.5，且帮助文档中没有csi格式index的说明。<br>所以可能是tabix版本太旧，无法识别vep数据库中的.csi格式index导致。  </p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>简要过程<br>  更新tabix，替换~&#x2F;.bashrc中调用的tabix。  </li>
<li>具体过程<br>  tabix独立的安装包只更新到0.2.6，更新的版本只包含于HTSLIB。<br>  一般生信服务器里都已经有装samtools，应该可以直接用samtools路径里的tabix。<br>  这台服务器里已经安装的samtools的版本是1.12，路径下找到了htslib-1.12目录，但是里面没tabix，应该是没有make。    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd htslib-1.12</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
  以上命令make后，在samtools-1.12&#x2F;bin能看到1.12版本的tabix和bgzip。<br>  修改~&#x2F;.bashrc的tabix路径，然后source ~&#x2F;.bashrc，重新开终端，再测试VEP。</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>成功，Existing_variation列有rs编号和COSV编号</p>
<h1 id="dbNSFP插件警告"><a href="#dbNSFP插件警告" class="headerlink" title="dbNSFP插件警告"></a>dbNSFP插件警告</h1><h2 id="警告信息"><a href="#警告信息" class="headerlink" title="警告信息"></a>警告信息</h2><p>Use of uninitialized value $readme_file in concatenation (.) or string at ***&#x2F;vep_data&#x2F;Plugins&#x2F;dbNSFP.pm line 279.  </p>
<h2 id="问题定位-1"><a href="#问题定位-1" class="headerlink" title="问题定位"></a>问题定位</h2><p>dbNSFP.pm第276行，需要dbnsfp.*readme.txt在数据库dbNSFP4.3a_grch37.gz文件同一目录下。  </p>
<h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>解压dbNSFP4.3a.zip，得到dbNSFP4.3a.readme.txt，软链接为dbNSFP4.3a_grch37.readme.txt，放在dbNSFP4.3a_grch37.gz文件同一目录下。  </p>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>VEP</tag>
        <tag>注释</tag>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title>WDL使用目录作为参数</title>
    <url>/2023/04/26/WDL%E4%BD%BF%E7%94%A8%E7%9B%AE%E5%BD%95%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>写WDL时，调用目录作为参数传入</p>
<span id="more"></span>

<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>WDL里用到了kraken2，其中有个参数--db需要数据库目录作为参数。  </p>
<ul>
<li>无法直接传目录。<br>WDL的数据类型只有File，没有Directory。<a href="https://github.com/openwdl/wdl/blob/main/versions/development/SPEC.md">WDL Version 1.1有Directory类型</a>，但目前的Cromwell版本目前不支持WDL Version 1.1。</li>
<li>目录路径每次分析都会改变。<br>数据库没有放在镜像内，所以每次Cromwell投递都会将WDL中列出的一堆数据库文件硬链接到call-task中inputs的随机命名的目录，如86***2571-f*7b-476c-b3be-0bf***fe6cfe&#x2F;call-Kraken2&#x2F;inputs&#x2F;-159***78150。</li>
</ul>
<h1 id="错误方案"><a href="#错误方案" class="headerlink" title="错误方案"></a>错误方案</h1><p>Task中声明kraken2_db变量，然后通过<code>command&lt;&lt;&lt;`dirname 原数据库路径`&gt;&gt;&gt;</code>，再赋值kraken2_db变量。<br>不行，kraken2_db没有被修改，还是一开始声明的值。  </p>
<h1 id="正确方案"><a href="#正确方案" class="headerlink" title="正确方案"></a>正确方案</h1><p>--db传参时，直接用<code>dirname</code>传入。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># WDL</span><br><span class="line"></span><br><span class="line">task Kraken2&#123;</span><br><span class="line"></span><br><span class="line">	input &#123;</span><br><span class="line">		String Sample</span><br><span class="line">		File Read1</span><br><span class="line">		File Read2</span><br><span class="line">		Int Threads = 1</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	File kraken2_db_hash = &quot;/***/Database/Kraken2/hash.k2d&quot;</span><br><span class="line">	File kraken2_db_inspect = &quot;/***/Database/Kraken2/inspect.txt&quot;</span><br><span class="line">	File kraken2_db_opts = &quot;/***/Database/Kraken2/opts.k2d&quot;</span><br><span class="line">	File kraken2_db_seqid2taxid = &quot;/***/Database/Kraken2/seqid2taxid.map&quot;</span><br><span class="line">	File kraken2_db_taxo = &quot;/***/Database/Kraken2/taxo.k2d&quot;</span><br><span class="line">	File kraken2_db_kmer_distrib = &quot;/***/Database/Kraken2/database150mers.kmer_distrib&quot;</span><br><span class="line">	</span><br><span class="line">	command &lt;&lt;&lt;</span><br><span class="line">		kraken2 \</span><br><span class="line">			--threads ~&#123;Threads&#125; \</span><br><span class="line">			--confidence 0.8 \</span><br><span class="line">			--minimum-base-quality 20 \</span><br><span class="line">			--db `dirname ~&#123;kraken2_db_hash&#125;` \</span><br><span class="line">			--output ~&#123;Sample&#125;.output \</span><br><span class="line">			--report ~&#123;Sample&#125;.report \</span><br><span class="line">			--paired \</span><br><span class="line">			~&#123;Read1&#125; \</span><br><span class="line">			~&#123;Read2&#125;</span><br><span class="line"></span><br><span class="line">		bracken \</span><br><span class="line">			-r 150 \</span><br><span class="line">			-l S \</span><br><span class="line">			-t ~&#123;Threads&#125; \</span><br><span class="line">			-d `dirname ~&#123;kraken2_db_hash&#125;` \</span><br><span class="line">			-i ~&#123;Sample&#125;.report \</span><br><span class="line">			-o ~&#123;Sample&#125;.bracken</span><br><span class="line">	&gt;&gt;&gt;</span><br><span class="line">	</span><br><span class="line">	output &#123;</span><br><span class="line">		File k2_output = &quot;~&#123;Sample&#125;.output&quot;</span><br><span class="line">		File k2_report = &quot;~&#123;Sample&#125;.report&quot;</span><br><span class="line">		File bracken = &quot;~&#123;Sample&#125;.report&quot;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	runtime &#123;</span><br><span class="line">		docker: &quot;***/kraken2:v2.1.2&quot;</span><br><span class="line">		cpus: threads</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>WDL</tag>
        <tag>Cromwell</tag>
      </tags>
  </entry>
  <entry>
    <title>Xlsx转MySQL</title>
    <url>/2023/04/21/Xlsx%E8%BD%ACMySQL/</url>
    <content><![CDATA[<p>通过Python的openpyxl和MySQLdb模块，将.xlsx文件转为MySQL的Databse</p>
<span id="more"></span>

<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><ul>
<li>python 3.7.9  </li>
<li>openpyxl模块 3.0.9  </li>
<li>MySQLdb模块 2.1.1？</li>
</ul>
<h1 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># openpyxl模块  </span><br><span class="line">python -m pip install openpyxl  </span><br><span class="line"># MySQLdb模块  </span><br><span class="line">python -m pip install mysqlclient  </span><br></pre></td></tr></table></figure>

<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># python</span><br><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line"># Useage: 将xlsx文件导入为mysql的databse</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import re</span><br><span class="line">import datetime</span><br><span class="line">import argparse</span><br><span class="line">import openpyxl</span><br><span class="line">import MySQLdb</span><br><span class="line"></span><br><span class="line">Charset = &quot;utf8&quot;</span><br><span class="line"></span><br><span class="line">def Xlsx2MySQLdb(Xlsx, User, Password):</span><br><span class="line">	Work_Book = openpyxl.load_workbook(Xlsx)</span><br><span class="line">	Database = re.search(&quot;.*\/(\S+)\.xlsx&quot;, Xlsx).group(1) + &quot;_&quot; + datetime.datetime.now().strftime(&quot;%Y%m%d_%H%M%S&quot;)</span><br><span class="line">	List_Sheet = Work_Book.sheetnames</span><br><span class="line">	# 提示信息</span><br><span class="line">	Time_Stamp = datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">	sys.stdout.write(&quot;*&quot; + Time_Stamp + &quot;* [运行信息]\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[输入文件] &quot; + Xlsx + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[子表数量] &quot; + str(len(List_Sheet)) + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[子表名称] &quot; + &quot;、&quot;.join(List_Sheet) + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[数据库名] &quot; + Database + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[字符编码] &quot; + Charset + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[表头字段] 每个子表的第1行会作为数据库的列名\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[数据类型] 所有内容都保存为TEXT，如需修改，请在MySQL自行修改\n\n&quot;)</span><br><span class="line"></span><br><span class="line">	# 连接MySQL</span><br><span class="line">	SQL_Host = &quot;localhost&quot;</span><br><span class="line">	SQL_Connection = MySQLdb.connect(host = SQL_Host, user = User, passwd = Password, charset = Charset)</span><br><span class="line">	Cursor = SQL_Connection.cursor()</span><br><span class="line">	# 创建数据库</span><br><span class="line">	Cursor.execute(&quot;create database if not exists &quot; + Database)</span><br><span class="line">	Cursor.execute(&quot;use &quot; + Database)</span><br><span class="line">	# 逐个子表处理</span><br><span class="line">	for Sheet in List_Sheet:</span><br><span class="line">		List_Header = []</span><br><span class="line">		List_Table_Header = []</span><br><span class="line">		Data_Type = &quot;TEXT&quot;</span><br><span class="line">		Work_Sheet = Work_Book[Sheet]</span><br><span class="line">		for col_n in range(1, Work_Sheet.max_column+1):</span><br><span class="line">			Header = str(Work_Sheet.cell(row=1, column=col_n).value)</span><br><span class="line">			List_Header.append(&quot;`&quot; + Header + &quot;`&quot;)</span><br><span class="line">			List_Table_Header.append(&quot;`&quot; + Header + &quot;`&quot; + &quot; &quot; + Data_Type)</span><br><span class="line">		# 创建数据表</span><br><span class="line">		Table_Header = &quot;, &quot;.join(List_Table_Header)</span><br><span class="line">		Cursor.execute(&quot;create table if not exists &quot; + Sheet + &quot; (&quot; + Table_Header + &quot;)&quot;)</span><br><span class="line">		# 逐行存入数据</span><br><span class="line">		Header = &quot;, &quot;.join(List_Header)</span><br><span class="line">		for row_n in range(2, Work_Sheet.max_row+1):</span><br><span class="line">			List_Value = []</span><br><span class="line">			for col_n in range(1, Work_Sheet.max_column+1):</span><br><span class="line">				Value = str(Work_Sheet.cell(row = row_n, column = col_n).value)</span><br><span class="line">				List_Value.append(&quot;\&quot;&quot; + Value + &quot;\&quot;&quot;)</span><br><span class="line">			Value = &quot;, &quot;.join(List_Value)</span><br><span class="line">			Cursor.execute(&quot;insert into &quot; + Sheet + &quot; (&quot; + Header + &quot;) values(&quot; + Value + &quot;)&quot;)</span><br><span class="line">			# 提交MyQSL操作</span><br><span class="line">			SQL_Connection.commit()</span><br><span class="line">	# 关闭连接</span><br><span class="line">	Cursor.close()</span><br><span class="line">	SQL_Connection.close()</span><br><span class="line">	# 关闭Xlsx</span><br><span class="line">	Work_Book.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>Python</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>Xlsx转MySQL报错</title>
    <url>/2023/04/21/Xlsx%E8%BD%ACMySQL%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>写Xlsx转MySQL脚本过程中的一些报错信息</p>
<span id="more"></span>


<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="相关脚本"><a href="#相关脚本" class="headerlink" title="相关脚本"></a>相关脚本</h2><p>Cursor.execute(“create database if not exists “ + Database)  </p>
<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>MySQLdb.OperationalError: (1044, “Access denied for user ‘***‘@’localhost’ to database ‘***’”)</p>
<h2 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h2><p>用这个用户进mysql创建数据库，也是这个错误，应该是这个用户没有权限创建数据库。<br>用以下两种方式可以查看<a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html">用户权限</a>。  </p>
<ol>
<li><code>show grants for &#39;***&#39;@&#39;localhost&#39;;</code><br>看到结果只有1个权限<code>GRANT USAGE ON *.* TO &#39;***&#39;@&#39;localhost&#39;</code>。<br>USAGE权限只能用于数据库登录，不能执行任何操作，所以报错是正常的。  </li>
<li><code>select * from mysql.user where user=&#39;***&#39;;</code><br>看到结果是所有*_priv全部都是N，即所有权限都没有。</li>
</ol>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>更换一个有权限的用户连接数据库，或者赋予相应权限给当前用户。  </p>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><h2 id="相关脚本-1"><a href="#相关脚本-1" class="headerlink" title="相关脚本"></a>相关脚本</h2><p>Cursor.execute(“insert into “ + Sheet + “ (“ + Header + “) values(“ + Value + “)”)  </p>
<h2 id="报错信息-1"><a href="#报错信息-1" class="headerlink" title="报错信息"></a>报错信息</h2><p>MySQLdb.ProgrammingError: (1064, “You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘**********’ at line 1”)  </p>
<h2 id="报错原因-1"><a href="#报错原因-1" class="headerlink" title="报错原因"></a>报错原因</h2><p>values里有特殊符号或MySQL的关键词？</p>
<h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>List_Value的字符串两侧加双引号</p>
<h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h2 id="相关脚本-2"><a href="#相关脚本-2" class="headerlink" title="相关脚本"></a>相关脚本</h2><p>Cursor.execute(“create table if not exists “ + Sheet + “ (“ + Table_Header + “)”)  </p>
<h2 id="报错信息-2"><a href="#报错信息-2" class="headerlink" title="报错信息"></a>报错信息</h2><p>MySQLdb.ProgrammingError: (1064, “You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘****)’ at line 1”)  </p>
<h2 id="报错原因-2"><a href="#报错原因-2" class="headerlink" title="报错原因"></a>报错原因</h2><p>报错信息里的***字符串是表头的一部分，前边是一个列名Check。Check是MySQL的<a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">关键词</a>，有冲突，不能直接使用。  </p>
<h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><p>列名两侧加&#96;号（1左边的~按键）    </p>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>Python</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>bamdst软件Raw Reads错误导致比对率低</title>
    <url>/2023/12/03/bamdst%E8%BD%AF%E4%BB%B6Raw-Reads%E9%94%99%E8%AF%AF%E5%AF%BC%E8%87%B4%E6%AF%94%E5%AF%B9%E7%8E%87%E4%BD%8E/</url>
    <content><![CDATA[<p>bamdst的旧版本（21年9月，软件后来有更新，但版本号没变），统计的[Total] Raw Reads (All Reads)错误，导致某些情况下的比对率偏低，On Target Rate也会受影响。</p>
<span id="more"></span>


<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><ul>
<li><a href="https://github.com/shiquan/bamdst">bamdst</a> 1.0.9</li>
</ul>
<h1 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h1><ul>
<li>bamdst把primary + secondary当作分母去算比对率了，Reads和Base都是。假如1条Reads在参考基因组上Multiple Mapping到了2个位置，分母是算+2的。导致当Multiple Mapping的Reads较多时，这个软件算出来的比对率（Read和Base）会偏低。<br><img src="https://pic.imgdb.cn/item/656c3e87c458853aefaab25b.png" alt="Bamdst错误结果"></li>
<li>一般比对率，按Read算，是&#x3D;Mapped Reads &#x2F; (Clean R1 Reads + Clean R2 Reads) * 100</li>
<li>这个样本是：4688627 &#x2F; （2344520 + 2344520）* 100 &#x3D; 99.99%。samtools flagstats算出的比对率就是99.99%。<br><img src="https://pic.imgdb.cn/item/656c3e87c458853aefaab2b0.png" alt="Samtools Flagstats结果"></li>
<li>以上错误的比对率结果是调用21年9月安装的bamdst得到的。2019年12月有个Issue有提到这个问题：<a href="https://github.com/shiquan/bamdst/issues/18">Raw Reads (All reads) are a bit off</a>。</li>
<li>以下是2023年11月重新安装的bamdst，算出来的Raw Reads是对的。</li>
<li>但是这两个的软件版本都是1.0.9，Github上也没有Change Log，那就没法知道具体是什么时候修改成正确的了。<br> <img src="https://pic.imgdb.cn/item/656c3e87c458853aefaab319.png" alt="Bamdst正确结果"></li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>如果bamdst太旧，建议重新从Github下载再编译安装bamdst。</li>
<li>或者直接用samtools flagstats提取比对率。</li>
</ol>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>比对</tag>
        <tag>Bamdst</tag>
      </tags>
  </entry>
  <entry>
    <title>bcl2fastq数据拆分报错</title>
    <url>/2023/05/25/bcl2fastq%E6%95%B0%E6%8D%AE%E6%8B%86%E5%88%86%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>bcl2fastq数据拆分报错，拆分过程中报错中断</p>
<span id="more"></span>

<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><p>有可能出现下面两种报错：</p>
<ul>
<li><p>报错信息 1<br><img src="https://pic1.imgdb.cn/item/646f2ab8f024cca173865ddd.png" alt="报错信息1"><br><code>ERROR: Thread: xxx caught an exception first: ...... bytes_read=0 bytes_expected=xxxxxx</code></p>
</li>
<li><p>报错信息 2<br><img src="https://pic1.imgdb.cn/item/646f2ac6f024cca173867090.png" alt="报错信息1"><br><code>Mismatching cluster count in BCL file: Cycle #xxx, Tile#xxx: bytes_read=0 bytes_expected=xxxxxx</code></p>
</li>
</ul>
<h1 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h1><p>可能是该测序批次数据量太大，缓存读写跟不上，导致有些Cycle文件在写出前就从缓存被丢弃了，文件大小为0，最后导致报错。  </p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>让读写线程大于加载和处理线程，看下是否能避免报错。  </p>
<h1 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h1><h2 id="重复报错信息"><a href="#重复报错信息" class="headerlink" title="重复报错信息"></a>重复报错信息</h2><ul>
<li>bcl2fastq参数设置<br><code>--loading-threads 10 --processing-threads 10 --writing-threads 10</code></li>
<li>测试结果<br>报错，出现上述报错信息 1</li>
</ul>
<h2 id="测试解决方案（较少线程）"><a href="#测试解决方案（较少线程）" class="headerlink" title="测试解决方案（较少线程）"></a>测试解决方案（较少线程）</h2><ul>
<li>bcl2fastq参数设置<br><code>--loading-threads 6 --processing-threads 6 --writing-threads 8</code></li>
<li>测试结果<br>拆分成功，耗时 1 hour 7 min</li>
</ul>
<h2 id="测试解决方案（较多线程）"><a href="#测试解决方案（较多线程）" class="headerlink" title="测试解决方案（较多线程）"></a>测试解决方案（较多线程）</h2><ul>
<li>bcl2fastq参数设置<br><code>--loading-threads 14 --processing-threads 14 --writing-threads 18</code></li>
<li>测试结果<br>拆分成功，耗时 29min</li>
</ul>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>数据拆分</tag>
        <tag>bcl2fastq</tag>
      </tags>
  </entry>
  <entry>
    <title>clusterProfiler富集分析</title>
    <url>/2023/05/14/clusterProfiler%E5%AF%8C%E9%9B%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>clusterProfiler 做 GO 和 KEGG 的富集分析</p>
<span id="more"></span>

<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><ul>
<li>R版本：4.1.0</li>
<li>R包版本：clusterProfiler 4.0.5</li>
</ul>
<h1 id="R包安装"><a href="#R包安装" class="headerlink" title="R包安装"></a>R包安装</h1><p>如果你的R版本比较新，可以先试试直接安装clusterProfiler。<br>当前在用的服务器上的R版本是3.6.0，算比较旧的，装R包经常报错。<br>然后虽然<a href="https://bioconductor.org/packages/release/bioc/html/clusterProfiler.html">Bioconductor的clusterProfiler</a>写着依赖R &gt;&#x3D; 3.5.0，但是很多依赖包都会要求更高的R版本，我都懒得逐个包查哪个版本适配了，所以直接搭个最新版本的R的docker容器算了。  </p>
<ol>
<li>从docker registry获取r-base作为基础镜像<br><code>docker pull r-base</code><br>如需指定4.1.0版本则用<code>docker pull r-base:4.1.0</code>  </li>
<li>搭建clusterProfiler的容器  <ol>
<li>容器搭建   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Shell</span><br><span class="line"></span><br><span class="line">#!/bin/sh</span><br><span class="line">local_path=/xxx/clusterProfiler</span><br><span class="line"># 需要--privileged参数，否则后面安装clusterProfiler包会报错</span><br><span class="line">docker run -tid --privileged --name clusterProfiler_Test --restart=always -v $local_path:/Test r-base:4.1.0 /bin/bash</span><br></pre></td></tr></table></figure></li>
<li>进入容器 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 命令行</span><br><span class="line"></span><br><span class="line">docker exec -ti clusterProfiler_Test /bin/bash</span><br></pre></td></tr></table></figure></li>
<li>容器内安装clusterProfiler <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 命令行，安装依赖</span><br><span class="line">apt-get update</span><br><span class="line">apt install curl libcurl4-openssl-dev libssl-dev libxml2-dev</span><br><span class="line"></span><br><span class="line"># 命令行，进入R</span><br><span class="line">R</span><br><span class="line"></span><br><span class="line"># 进入R后，安装包</span><br><span class="line"># org.Hs.eg.db是人的基因注释数据库；如果是别的物种，这里下载和后面调用的数据库名称，以及物种名称是hsa的，都要换成对应物种的</span><br><span class="line"># OrgDb的19个物种数据库：http://bioconductor.org/packages/release/BiocViews.html#___OrgDb</span><br><span class="line"># pathview、enrichplot、ggplot2都是用来画图的</span><br><span class="line">if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE))</span><br><span class="line">    install.packages(&quot;BiocManager&quot;)</span><br><span class="line">BiocManager::install(&quot;clusterProfiler&quot;)</span><br><span class="line">BiocManager::install(&quot;org.Hs.eg.db&quot;)</span><br><span class="line">BiocManager::install(&quot;pathview&quot;)</span><br><span class="line">BiocManager::install(&quot;enrichplot&quot;)</span><br><span class="line">BiocManager::install(&quot;ggplot2&quot;)</span><br></pre></td></tr></table></figure></li>
<li>GO、KEGG富集分析 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">见后面的[分析脚本]部分</span><br></pre></td></tr></table></figure></li>
<li>退出容器 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 键盘操作</span><br><span class="line"># Ctrl + p + q</span><br></pre></td></tr></table></figure></li>
<li>容器的后续处理</li>
</ol>
<ul>
<li>搭建容器时用了–restart&#x3D;always，容器会保持启动状态，随时可以进入容器分析</li>
<li>如果暂时不需要用了，可以先将容器导出成镜像文件，再删除容器 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 命令行，导出镜像文件</span><br><span class="line">docker export clusterProfiler_Test -o clusterProfiler.tar</span><br><span class="line"></span><br><span class="line"># 命令行，停止和删除容器</span><br><span class="line">docker stop clusterProfiler_Test</span><br><span class="line">docker rm clusterProfiler_Test</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h1 id="分析脚本"><a href="#分析脚本" class="headerlink" title="分析脚本"></a>分析脚本</h1><p>脚本参考clusterProfiler官方文档中Part II: Enrichment analysis的<a href="https://yulab-smu.top/biomedical-knowledge-mining-book/clusterprofiler-go.html">6 GO enrichment analysis</a>和<a href="https://yulab-smu.top/biomedical-knowledge-mining-book/clusterprofiler-kegg.html">7 KEGG enrichment analysis</a>。<br>Over Representation Analysis (ORA, 过表达分析)和Gene Set Enrichment Analysis (GSEA, 基因富集分析)两种分析方法，分别写了两个脚本。<br>GO和KEGG都在同一个脚本里，有哪部分不需要的话，直接注释就行。  </p>
<h2 id="Shell调用Rscript"><a href="#Shell调用Rscript" class="headerlink" title="Shell调用Rscript"></a>Shell调用Rscript</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ORA</span><br><span class="line">Rscript clusterProfiler_ORA.R ORA.list ORA ORA_Result</span><br><span class="line"></span><br><span class="line"># GSEA</span><br><span class="line">Rscript clusterProfiler_GSEA.R GSEA.list GSEA GSEA_Result</span><br></pre></td></tr></table></figure>

<h2 id="ORA脚本"><a href="#ORA脚本" class="headerlink" title="ORA脚本"></a>ORA脚本</h2><h3 id="clusterProfiler-ORA-R"><a href="#clusterProfiler-ORA-R" class="headerlink" title="clusterProfiler_ORA.R"></a>clusterProfiler_ORA.R</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library(&quot;clusterProfiler&quot;)</span><br><span class="line">library(&quot;org.Hs.eg.db&quot;)</span><br><span class="line">library(&quot;pathview&quot;)</span><br><span class="line">library(&quot;ggplot2&quot;)</span><br><span class="line"></span><br><span class="line">args &lt;- commandArgs(T)</span><br><span class="line"># 输入文件，每行1个基因名称（Gene Symbol）</span><br><span class="line">gene_list = args[1]</span><br><span class="line"># 样本名称，会作为输出文件前缀</span><br><span class="line">sample = args[2]</span><br><span class="line"># 输出目录路径</span><br><span class="line">out_dir = args[3]</span><br><span class="line"></span><br><span class="line">GO_output_dir = paste(out_dir, &quot;/GO&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">KEGG_output_dir = paste(out_dir, &quot;/KEGG&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">if (! file.exists(out_dir))&#123;dir.create(out_dir)&#125;</span><br><span class="line">if (! file.exists(GO_output_dir))&#123;dir.create(GO_output_dir)&#125;</span><br><span class="line">if (! file.exists(KEGG_output_dir))&#123;dir.create(KEGG_output_dir)&#125;</span><br><span class="line"></span><br><span class="line">data = read.table(gene_list, head=F, sep=&quot;\t&quot;, comment.char=&quot;#&quot;, colClasses=&quot;character&quot;)</span><br><span class="line">data = as.vector(data[,1])</span><br><span class="line"></span><br><span class="line">p_cutoff = 0.05</span><br><span class="line">q_cutoff = 0.05</span><br><span class="line"></span><br><span class="line"># GO </span><br><span class="line">ontology &lt;- list(&quot;MF&quot;,&quot;CC&quot;,&quot;BP&quot;)</span><br><span class="line">for (item in ontology)&#123;</span><br><span class="line">	output_file = paste(GO_output_dir, &quot;/&quot;, sample, &quot;.&quot;, item, &quot;.xls&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">	output_pic = paste(GO_output_dir, &quot;/&quot;, sample, &quot;.&quot;, item, &quot;.png&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">	# GO enrichment result</span><br><span class="line">	# pvalueCutoff is adjusted pvalue cutoff</span><br><span class="line">	ego &lt;- enrichGO(gene = data, keyType = &quot;SYMBOL&quot;, OrgDb = org.Hs.eg.db, ont = item, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = p_cutoff, qvalueCutoff = q_cutoff)</span><br><span class="line">	if ( (nrow(subset(ego@result, p.adjust&lt;=p_cutoff))==0) | (nrow(subset(ego@result, qvalue&lt;=q_cutoff))==0) )&#123;</span><br><span class="line">		warnning_msg = paste(&quot;Warning: &quot;, item, &quot;&#x27;s enrichGO() has NO result after pvalue.adjust and qvalue cutoff! Won&#x27;t output result of &quot;, item, &quot;!&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">		write(warnning_msg, stderr())</span><br><span class="line">		next</span><br><span class="line">	&#125;</span><br><span class="line">	write.table(ego, file=output_file, quote=FALSE, col.names=TRUE, row.names=FALSE, sep=&quot;\t&quot;)</span><br><span class="line">	# GO directed acyclic graph</span><br><span class="line">	picture &lt;- goplot(ego, showCategory=10, color=&quot;p.adjust&quot;, layout=&quot;sugiyama&quot;, geom=&quot;text&quot;)</span><br><span class="line">	ggsave(file=output_pic, width=250, height=500, unit=&quot;mm&quot;, dpi=300)</span><br><span class="line">	# Bar plot</span><br><span class="line">	output_pic = paste(GO_output_dir, &quot;/&quot;, sample, &quot;.&quot;, item, &quot;.bar.png&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">	picture &lt;- barplot(ego, showCategory=10)</span><br><span class="line">	ggsave(file=output_pic, width=150, height=250, unit=&quot;mm&quot;, dpi=300)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># KEGG</span><br><span class="line">output_file = paste(KEGG_output_dir, &quot;/&quot;, sample, &quot;.KEGG.xls&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line"># Translate Gene Symbol to ENTREZ ID</span><br><span class="line">SYMBOL_ENTREZID &lt;- bitr(data, fromType=&quot;SYMBOL&quot;, toType=&quot;ENTREZID&quot;, OrgDb=org.Hs.eg.db)</span><br><span class="line">if (nrow(SYMBOL_ENTREZID) == 0)&#123;</span><br><span class="line">	error_msg = &quot;Error: All gene symbol in input file can&#x27;t map to Entrezid ID! Stop analyysis!&quot;</span><br><span class="line">	write(error_msg, stderr())</span><br><span class="line">	q()</span><br><span class="line">&#125;</span><br><span class="line">data_ENTREZID = as.vector(SYMBOL_ENTREZID[,2])</span><br><span class="line"># KEGG enrichment result</span><br><span class="line"># pvalueCutoff is adjusted pvalue cutoff</span><br><span class="line">kk &lt;- enrichKEGG(gene=data_ENTREZID, organism=&quot;hsa&quot;, keyType=&quot;kegg&quot;, pAdjustMethod=&quot;BH&quot;, pvalueCutoff=p_cutoff, qvalueCutoff=q_cutoff)</span><br><span class="line">if ( (nrow(subset(kk@result, p.adjust&lt;=p_cutoff))==0) | (nrow(subset(kk@result, qvalue&lt;=q_cutoff))==0) )&#123;</span><br><span class="line">	warnning_msg = &quot;Warning: KEGG&#x27;s enrichKEGG() has NO result after pvalue.adjust and qvalue cutoff! Won&#x27;t output result of KEGG!&quot;</span><br><span class="line">	write(warnning_msg, stderr())</span><br><span class="line">	q()</span><br><span class="line">&#125;</span><br><span class="line">pass_path_id = subset(kk@result, p.adjust&lt;=p_cutoff &amp; qvalue&lt;=q_cutoff, select=ID)</span><br><span class="line">for (path_id in pass_path_id$ID)&#123;</span><br><span class="line">	ENTREZID_Gene &lt;- kk@result$geneID[which(kk@result==path_id)]</span><br><span class="line">	ENTREZID_Gene_List &lt;- strsplit(ENTREZID_Gene, split=&quot;/&quot;)</span><br><span class="line">	ENTREZID_Gene_List &lt;- unlist(ENTREZID_Gene_List)</span><br><span class="line">	Output_Symbol_List &lt;- c()</span><br><span class="line">	n=1</span><br><span class="line">	for (id in ENTREZID_Gene_List)&#123;</span><br><span class="line">		Output_Symbol_List[n] &lt;- SYMBOL_ENTREZID$SYMBOL[which(SYMBOL_ENTREZID$ENTREZID==id)]</span><br><span class="line">		n &lt;- n+1</span><br><span class="line">	&#125;</span><br><span class="line">	Output_Symbol &lt;- paste(Output_Symbol_List, sep=&quot;&quot;, collapse=&quot;/&quot;)</span><br><span class="line">	kk@result$geneID[which(kk@result==path_id)] &lt;- Output_Symbol</span><br><span class="line">&#125;</span><br><span class="line">write.table(kk, file=output_file, quote=FALSE, col.names=TRUE, row.names=FALSE, sep=&quot;\t&quot;)</span><br><span class="line"># Dot plot</span><br><span class="line">output_pic = paste(KEGG_output_dir, &quot;/&quot;, sample, &quot;.KEGG.png&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">picture &lt;- dotplot(kk, showCategory=20)</span><br><span class="line">ggsave(file=output_pic, width=150, height=250, unit=&quot;mm&quot;, dpi=300)</span><br><span class="line"># KEGG pathway view</span><br><span class="line">for (path_id in pass_path_id$ID)&#123;</span><br><span class="line">	output_pic = paste(KEGG_output_dir, &quot;/&quot;, sample, &quot;.&quot;, path_id, &quot;.png&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">	pathview(gene.data=data_ENTREZID, pathway.id=path_id, species=&quot;hsa&quot;, min.nnodes=3)</span><br><span class="line">	rm_command = paste(&quot;rm -f ./&quot;, path_id, &quot;.png &quot;, &quot;./&quot;, path_id, &quot;.xml&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">	mv_command = paste(&quot;mv ./&quot;, path_id, &quot;.pathview.png &quot;, output_pic, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">	system(rm_command)</span><br><span class="line">	system(mv_command)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ORA-list"><a href="#ORA-list" class="headerlink" title="ORA.list"></a>ORA.list</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AP5Z1</span><br><span class="line">ZNF592</span><br><span class="line">FOXRED1</span><br><span class="line">NUBPL</span><br><span class="line">HFE</span><br><span class="line">WDR35</span><br><span class="line">ABHD12</span><br><span class="line">ZNF513</span><br></pre></td></tr></table></figure>

<h3 id="ORA-Result"><a href="#ORA-Result" class="headerlink" title="ORA_Result"></a>ORA_Result</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORA_Result</span><br><span class="line">├── GO</span><br><span class="line">│   ├── ORA.BP.bar.png</span><br><span class="line">│   ├── ORA.BP.png</span><br><span class="line">│   ├── ORA.BP.xls</span><br><span class="line">│   ├── ORA.CC.bar.png</span><br><span class="line">│   ├── ORA.CC.png</span><br><span class="line">│   ├── ORA.CC.xls</span><br><span class="line">│   ├── ORA.MF.bar.png</span><br><span class="line">│   ├── ORA.MF.png</span><br><span class="line">│   └── ORA.MF.xls</span><br><span class="line">└── KEGG</span><br><span class="line">    ├── ORA.hsa00010.png</span><br><span class="line">    ├── ORA.hsa00531.png</span><br><span class="line">    ├── ORA.hsa01230.png</span><br><span class="line">    ├── ORA.hsa04142.png</span><br><span class="line">    ├── ORA.hsa04610.png</span><br><span class="line">    ├── ORA.hsa04977.png</span><br><span class="line">    ├── ORA.KEGG.png</span><br><span class="line">    └── ORA.KEGG.xls</span><br></pre></td></tr></table></figure>

<ul>
<li><p>GO</p>
<ul>
<li>ORA.BP.bar.png<br><img src="https://pic2.imgdb.cn/item/6460ecaa0d2dde57775f71ae.png" alt="ORA.BP.bar.png"></li>
<li>ORA.BP.png<br><img src="https://pic2.imgdb.cn/item/6460ecd60d2dde57775fb89c.png" alt="ORA.BP.png"></li>
<li>ORA.BP.xls<br><img src="https://pic2.imgdb.cn/item/6460ecfb0d2dde57775ff98e.jpg" alt="ORA.BP.xls"></li>
</ul>
</li>
<li><p>KEGG</p>
<ul>
<li>ORA.hsa00531.png<br><img src="https://pic2.imgdb.cn/item/6460ed210d2dde57776034d7.png" alt="ORA.hsa00531.png"></li>
<li>ORA.KEGG.png<br><img src="https://pic2.imgdb.cn/item/6460ed620d2dde577760a98b.png" alt="ORA.KEGG.png"></li>
<li>ORA.KEGG.xls<br><img src="https://pic2.imgdb.cn/item/6460edb00d2dde5777613270.jpg" alt="ORA.KEGG.xls"></li>
</ul>
</li>
</ul>
<h2 id="GSEA脚本"><a href="#GSEA脚本" class="headerlink" title="GSEA脚本"></a>GSEA脚本</h2><h3 id="clusterProfiler-GSEA-R"><a href="#clusterProfiler-GSEA-R" class="headerlink" title="clusterProfiler_GSEA.R"></a>clusterProfiler_GSEA.R</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library(&quot;clusterProfiler&quot;)</span><br><span class="line">library(&quot;org.Hs.eg.db&quot;)</span><br><span class="line">library(&quot;enrichplot&quot;)</span><br><span class="line">library(&quot;ggplot2&quot;)</span><br><span class="line"></span><br><span class="line">args &lt;- commandArgs(T)</span><br><span class="line"># 输入文件，每行两列，第一列是基因名称（Gene Symbol），第二列是Fold Change</span><br><span class="line">gene_list = args[1]</span><br><span class="line"># 样本名称，会作为输出文件前缀</span><br><span class="line">sample = args[2]</span><br><span class="line"># 输出目录路径</span><br><span class="line">out_dir = args[3]</span><br><span class="line"></span><br><span class="line">GO_output_dir = paste(out_dir, &quot;/GO&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">KEGG_output_dir = paste(out_dir, &quot;/KEGG&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">if (! file.exists(out_dir))&#123;dir.create(out_dir)&#125;</span><br><span class="line">if (! file.exists(GO_output_dir))&#123;dir.create(GO_output_dir)&#125;</span><br><span class="line">if (! file.exists(KEGG_output_dir))&#123;dir.create(KEGG_output_dir)&#125;</span><br><span class="line"></span><br><span class="line"># 1st column is Symmbol, 2nd column is FC</span><br><span class="line">data = read.table(gene_list, head=F, sep=&quot;\t&quot;, comment.char=&quot;#&quot;, colClasses=&quot;character&quot;)</span><br><span class="line">geneList = as.numeric(data[,2])</span><br><span class="line">names(geneList) = as.character(data[,1])</span><br><span class="line">geneList = sort(geneList,decreasing=TRUE)</span><br><span class="line"></span><br><span class="line"># Check if any duplicate gene</span><br><span class="line">if (length(names(geneList[duplicated(names(geneList))])) &gt; 0)&#123;</span><br><span class="line">	error_msg = &quot;Error: There are duplicate gene in input file! Stop analyysis!&quot;</span><br><span class="line">	write(error_msg, stderr())</span><br><span class="line">	q()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_cutoff = 0.05</span><br><span class="line">q_cutoff = 0.05</span><br><span class="line"></span><br><span class="line"># GO</span><br><span class="line">ontology &lt;- list(&quot;MF&quot;,&quot;CC&quot;,&quot;BP&quot;)</span><br><span class="line">for (item in ontology)&#123;</span><br><span class="line">	output_file = paste(GO_output_dir, &quot;/&quot;, sample, &quot;.&quot;, item, &quot;.xls&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">	# GO GSEA result</span><br><span class="line">	# pvalueCutoff is adjusted pvalue cutoff</span><br><span class="line">	ego &lt;- gseGO(gene=geneList, keyType=&quot;SYMBOL&quot;, OrgDb=org.Hs.eg.db, ont=item, pAdjustMethod=&quot;BH&quot;, pvalueCutoff=p_cutoff)</span><br><span class="line">	if (nrow(ego)==0)&#123;</span><br><span class="line">		wornning_msg = paste(&quot;Warning: &quot;, item, &quot;&#x27;s gseGO() has NO result after pvalue.adjust cutoff! Won&#x27;t output result of &quot;, item, &quot;!&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">		write(wornning_msg, stderr())</span><br><span class="line">		next</span><br><span class="line">	&#125;</span><br><span class="line">	write.table(ego, file=output_file, quote=FALSE, col.names=TRUE, row.names=FALSE, sep=&quot;\t&quot;)</span><br><span class="line">	# GO GSEA Plot</span><br><span class="line">	for ( n in (1:length(ego$ID)) )&#123;</span><br><span class="line">		GO_id &lt;- gsub(&quot;:&quot;, &quot;_&quot;, ego$ID[n])</span><br><span class="line">		output_pic = paste(GO_output_dir, &quot;/&quot;, sample, &quot;.&quot;, item, &quot;.&quot;, GO_id, &quot;.png&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">		picture &lt;- gseaplot2(ego, geneSetID=n, pvalue_table=TRUE, title=ego$Description[n])</span><br><span class="line">		#picture &lt;- gseaplot2(ego, geneSetID=n, title=ego$Description[n])</span><br><span class="line">		ggsave(file=output_pic, width=260, height=180, unit=&quot;mm&quot;, dpi=300)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># KEGG</span><br><span class="line">output_file = paste(KEGG_output_dir, &quot;/&quot;, sample, &quot;.KEGG.xls&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line"># Translate Gene Symbol to ENTREZ ID</span><br><span class="line">SYMBOL_ENTREZID &lt;- bitr(names(geneList), fromType=&quot;SYMBOL&quot;, toType=&quot;ENTREZID&quot;, OrgDb=org.Hs.eg.db)</span><br><span class="line">if (nrow(SYMBOL_ENTREZID)==0)&#123;</span><br><span class="line">        error_msg = &quot;Error: All gene symbol in input file can&#x27;t map to Entrezid ID! Stop analyysis!&quot;</span><br><span class="line">        write(error_msg, stderr())</span><br><span class="line">        q()</span><br><span class="line">&#125;</span><br><span class="line">names(geneList) = as.character(SYMBOL_ENTREZID[,2])</span><br><span class="line"># Some gene without ENTREZID will become duplicated name &lt;NA&gt;, remove them</span><br><span class="line">geneList &lt;- geneList[!duplicated(names(geneList))]</span><br><span class="line"># KEGG GSEA result</span><br><span class="line"># pvalueCutoff is adjusted pvalue cutoff</span><br><span class="line">kk &lt;- gseKEGG(gene=geneList, organism=&quot;hsa&quot;, keyType=&quot;kegg&quot;, pAdjustMethod=&quot;BH&quot;, pvalueCutoff=p_cutoff)</span><br><span class="line">if (nrow(kk)==0)&#123;</span><br><span class="line">	wornning_msg = &quot;Warning: KEGG&#x27;s gseKEGG() has NO result after pvalue.adjust cutoff! Won&#x27;t output result of KEGG!&quot;</span><br><span class="line">	write(wornning_msg, stderr())</span><br><span class="line">	q()</span><br><span class="line">&#125;</span><br><span class="line">for ( n in (1:length(kk$ID)) )&#123;</span><br><span class="line">	# KEGG GSEA Plot</span><br><span class="line">	output_pic = paste(KEGG_output_dir, &quot;/&quot;, sample, &quot;.&quot;, kk$ID[n], &quot;.png&quot;, sep=&quot;&quot;, collapse=&quot;&quot;)</span><br><span class="line">	picture &lt;- gseaplot2(kk, geneSetID=n, pvalue_table=TRUE, title=kk$Description[n])</span><br><span class="line">	#picture &lt;- gseaplot2(kk, geneSetID=n, title=kk$Description[n])</span><br><span class="line">	ggsave(file=output_pic, width=260, height=180, unit=&quot;mm&quot;, dpi=300)</span><br><span class="line">	# ENTREZ ID to Gene Symbol</span><br><span class="line">	ENTREZID_Gene &lt;- kk$core_enrichment[n]</span><br><span class="line">	ENTREZID_Gene_List &lt;- strsplit(ENTREZID_Gene, split=&quot;/&quot;)</span><br><span class="line">	ENTREZID_Gene_List &lt;- unlist(ENTREZID_Gene_List)</span><br><span class="line">	Output_Symbol_List &lt;- c()</span><br><span class="line">	i=1</span><br><span class="line">	for (id in ENTREZID_Gene_List)&#123;</span><br><span class="line">		Output_Symbol_List[i] &lt;- SYMBOL_ENTREZID$SYMBOL[which(SYMBOL_ENTREZID$ENTREZID==id)]</span><br><span class="line">		i &lt;- i + 1</span><br><span class="line">	&#125;</span><br><span class="line">	Output_Symbol &lt;- paste(Output_Symbol_List, sep=&quot;&quot;, collapse=&quot;/&quot;)</span><br><span class="line">	kk@result$core_enrichment[n] &lt;- Output_Symbol</span><br><span class="line">&#125;</span><br><span class="line">write.table(kk, file=output_file, quote=FALSE, col.names=TRUE, row.names=FALSE, sep=&quot;\t&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="GSEA-list"><a href="#GSEA-list" class="headerlink" title="GSEA.list"></a>GSEA.list</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S100A11	0.695631395</span><br><span class="line">RBPMS2	0.540877695</span><br><span class="line">KRTCAP3	0.558604609</span><br><span class="line">SELE	0.521754428</span><br><span class="line">RNF39	2.770884868</span><br><span class="line">C15orf39	1.372097355</span><br></pre></td></tr></table></figure>

<h3 id="GSEA-Result"><a href="#GSEA-Result" class="headerlink" title="GSEA_Result"></a>GSEA_Result</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GSEA_Result</span><br><span class="line">├── GO</span><br><span class="line">│   ├── GSEA.BP.GO_0000003.png</span><br><span class="line">│   ├── GSEA.BP.GO_1901990.png</span><br><span class="line">│   ├── GSEA.BP.xls</span><br><span class="line">│   ├── GSEA.CC.GO_1903046.png</span><br><span class="line">│   ├── GSEA.CC.GO_1903047.png</span><br><span class="line">│   ├── GSEA.CC.GO_2000026.png</span><br><span class="line">│   ├── GSEA.CC.xls</span><br><span class="line">│   ├── GSEA.MF.GO_0000775.png</span><br><span class="line">│   ├── GSEA.MF.GO_0005694.png</span><br><span class="line">│   ├── GSEA.MF.GO_1902494.png</span><br><span class="line">│   └── GSEA.MF.xls</span><br><span class="line">└── KEGG</span><br><span class="line">    ├── GSEA.hsa04068.png</span><br><span class="line">    ├── GSEA.hsa04141.png</span><br><span class="line">    ├── GSEA.hsa05170.png</span><br><span class="line">    └── GSEA.KEGG.xls</span><br></pre></td></tr></table></figure>

<ul>
<li><p>GO</p>
<ul>
<li>GSEA.CC.GO_1902494.png<br><img src="https://pic2.imgdb.cn/item/6460edff0d2dde577761b487.png" alt="GSEA.CC.GO_1902494.png"></li>
<li>GSEA.CC.xls<br><img src="https://pic2.imgdb.cn/item/6460ee330d2dde5777621903.jpg" alt="GSEA.CC.xls"></li>
</ul>
</li>
<li><p>KEGG</p>
<ul>
<li>GSEA.hsa05170.png<br><img src="https://pic2.imgdb.cn/item/6460ee690d2dde577762687a.png" alt="GSEA.hsa05170.png"></li>
<li>GSEA.KEGG.xls<br><img src="https://pic2.imgdb.cn/item/6460ee840d2dde5777629ca2.png" alt="GSEA.KEGG.xls"></li>
</ul>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>clusterProfiler Github <a href="https://github.com/YuLab-SMU/clusterProfiler">https://github.com/YuLab-SMU/clusterProfiler</a></li>
<li>clusterProfiler 官方文档 <a href="https://yulab-smu.top/biomedical-knowledge-mining-book/index.html">https://yulab-smu.top/biomedical-knowledge-mining-book/index.html</a></li>
<li>富集分析：（一）概述 <a href="https://zhuanlan.zhihu.com/p/534016487">https://zhuanlan.zhihu.com/p/534016487</a></li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>clusterProfiler</tag>
        <tag>GO</tag>
        <tag>KEGG</tag>
        <tag>画图</tag>
      </tags>
  </entry>
  <entry>
    <title>ggplot2设置坐标轴字体颜色</title>
    <url>/2023/05/24/ggplot2%E8%AE%BE%E7%BD%AE%E5%9D%90%E6%A0%87%E8%BD%B4%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<p>通过ggplot2的theme()指定坐标轴的每个刻度标签的字体颜色</p>
<span id="more"></span>

<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><p>设置X轴：<code>theme(axis.text.x = element_text(colour = Data$Color))</code><br>设置Y轴：<code>theme(axis.text.y = element_text(colour = Data$Color))</code></p>
<h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><p>有若干个样本都检出某个物种，需要画检出Reads数的柱状图，当前样本字体颜色和填充颜色为蓝色，其他样本为灰色。</p>
<h1 id="完成示例"><a href="#完成示例" class="headerlink" title="完成示例"></a>完成示例</h1><p><img src="https://pic1.imgdb.cn/item/646db75d0d2dde5777e0998b.png" alt="坐标轴字体颜色"></p>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">args<span class="operator">&lt;-</span>commandArgs<span class="punctuation">(</span><span class="built_in">T</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 数据表</span></span><br><span class="line">Reads_Table<span class="operator">=</span>args<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment"># 输出目录</span></span><br><span class="line">Result_Dir<span class="operator">=</span>args<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment"># 当前样本</span></span><br><span class="line">Plot_Sample <span class="operator">=</span> args<span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据表</span></span><br><span class="line">Data <span class="operator">=</span> read.table<span class="punctuation">(</span>Reads_Table<span class="punctuation">,</span> head<span class="operator">=</span><span class="built_in">T</span><span class="punctuation">,</span> sep<span class="operator">=</span><span class="string">&quot;\t&quot;</span><span class="punctuation">,</span> comment.char<span class="operator">=</span><span class="string">&quot;#&quot;</span><span class="punctuation">,</span> stringsAsFactors<span class="operator">=</span><span class="literal">FALSE</span><span class="punctuation">,</span> check.names<span class="operator">=</span><span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置其他样本和当前样本的分组、颜色信息</span></span><br><span class="line">List_Color <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;#808080&quot;</span><span class="punctuation">,</span> <span class="string">&quot;#1e90ff&quot;</span><span class="punctuation">)</span></span><br><span class="line">Data<span class="operator">$</span>Group <span class="operator">=</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;Other Sample&quot;</span><span class="punctuation">,</span> nrow<span class="punctuation">(</span>Data<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">Data<span class="operator">$</span>Group<span class="punctuation">[</span>with<span class="punctuation">(</span>Data<span class="punctuation">,</span> Sample<span class="operator">==</span>Plot_Sample<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">=</span> <span class="string">&quot;This Sample&quot;</span></span><br><span class="line">Data<span class="operator">$</span>Color <span class="operator">=</span> <span class="built_in">rep</span><span class="punctuation">(</span>List_Color<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span> nrow<span class="punctuation">(</span>Data<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">Data<span class="operator">$</span>Color<span class="punctuation">[</span>with<span class="punctuation">(</span>Data<span class="punctuation">,</span> Sample<span class="operator">==</span>Plot_Sample<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">=</span> List_Color<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span>nrow<span class="punctuation">(</span>Data<span class="punctuation">)</span> <span class="operator">==</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">	List_Color <span class="operator">=</span> List_Color<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用主题</span></span><br><span class="line">plot_font_size<span class="operator">=</span><span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span>plot_font_size <span class="operator">&lt;</span> <span class="number">10</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">	plot_font_size <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">universal_theme<span class="operator">=</span>theme_bw<span class="punctuation">(</span>base_size<span class="operator">=</span>plot_font_size<span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">	theme<span class="punctuation">(</span>axis.line<span class="operator">=</span>element_line<span class="punctuation">(</span>size<span class="operator">=</span><span class="number">0.5</span><span class="punctuation">,</span>colour<span class="operator">=</span><span class="string">&#x27;black&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">	theme<span class="punctuation">(</span>axis.title.x<span class="operator">=</span>element_text<span class="punctuation">(</span>size<span class="operator">=</span>plot_font_size<span class="operator">-</span><span class="number">2</span><span class="punctuation">)</span><span class="punctuation">,</span>axis.title.y<span class="operator">=</span>element_text<span class="punctuation">(</span>size<span class="operator">=</span>plot_font_size<span class="operator">-</span><span class="number">2</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">	theme<span class="punctuation">(</span>axis.text.x<span class="operator">=</span>element_text<span class="punctuation">(</span>size<span class="operator">=</span>plot_font_size<span class="operator">-</span><span class="number">3</span><span class="punctuation">,</span>colour<span class="operator">=</span><span class="string">&#x27;black&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span>axis.text.y<span class="operator">=</span>element_text<span class="punctuation">(</span>size<span class="operator">=</span>plot_font_size<span class="operator">-</span><span class="number">3</span><span class="punctuation">,</span>colour<span class="operator">=</span><span class="string">&#x27;black&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">	theme<span class="punctuation">(</span>legend.key.size<span class="operator">=</span>unit<span class="punctuation">(</span><span class="number">20</span><span class="punctuation">,</span><span class="string">&quot;pt&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span>legend.title<span class="operator">=</span>element_text<span class="punctuation">(</span>size<span class="operator">=</span>plot_font_size<span class="operator">-</span><span class="number">2</span><span class="punctuation">)</span><span class="punctuation">,</span>legend.text<span class="operator">=</span>element_text<span class="punctuation">(</span>size<span class="operator">=</span>plot_font_size<span class="operator">-</span><span class="number">3</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">	theme<span class="punctuation">(</span>panel.border<span class="operator">=</span>element_blank<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">	theme<span class="punctuation">(</span>plot.title<span class="operator">=</span>element_text<span class="punctuation">(</span>hjust<span class="operator">=</span><span class="number">0.5</span><span class="punctuation">,</span>size<span class="operator">=</span>plot_font_size<span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">	theme<span class="punctuation">(</span>legend.position<span class="operator">=</span><span class="string">&quot;none&quot;</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">	theme<span class="punctuation">(</span>panel.grid<span class="operator">=</span>element_blank<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画柱状图</span></span><br><span class="line">picture <span class="operator">=</span> ggplot<span class="punctuation">(</span>data<span class="operator">=</span>Data<span class="punctuation">,</span> aes<span class="punctuation">(</span>x<span class="operator">=</span>Sample<span class="punctuation">,</span> y<span class="operator">=</span>Reads<span class="punctuation">,</span> fill<span class="operator">=</span>Group<span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">	geom_bar<span class="punctuation">(</span>stat<span class="operator">=</span><span class="string">&quot;identity&quot;</span><span class="punctuation">,</span> width<span class="operator">=</span><span class="number">0.7</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">	labs<span class="punctuation">(</span>x<span class="operator">=</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span> y<span class="operator">=</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span> title<span class="operator">=</span><span class="string">&quot;无乳链球菌&quot;</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">	scale_y_continuous<span class="punctuation">(</span>expand <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">	scale_fill_manual<span class="punctuation">(</span>values <span class="operator">=</span> List_Color<span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">	universal_theme <span class="operator">+</span> </span><br><span class="line">	theme<span class="punctuation">(</span>axis.text.y <span class="operator">=</span> element_text<span class="punctuation">(</span>colour <span class="operator">=</span> rev<span class="punctuation">(</span>Data<span class="operator">$</span>Color<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">	coord_flip<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">output_png <span class="operator">=</span> paste<span class="punctuation">(</span>Result_Dir<span class="punctuation">,</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span> <span class="string">&quot;无乳链球菌.png&quot;</span><span class="punctuation">,</span> sep<span class="operator">=</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span> collapse<span class="operator">=</span><span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line">ggsave<span class="punctuation">(</span>output_png<span class="punctuation">,</span> picture<span class="punctuation">,</span> width<span class="operator">=</span><span class="number">8</span><span class="punctuation">,</span> height<span class="operator">=</span><span class="number">10</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<h1 id="警告信息"><a href="#警告信息" class="headerlink" title="警告信息"></a>警告信息</h1><p>使用以上代码画图，会出现警告信息。<br>这是因为用向量变量在element_text中指定颜色并不是官方支持的标准用法，算是个workaround。<br>目前是能正常使用的，但在将来的ggplot2版本不一定依然支持这样的用法。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning message:</span><br><span class="line">Vectorized input to `element_text()` is not officially supported.</span><br><span class="line">Results may be unexpected or may change in future versions of ggplot2.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>画图</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas数据操作</title>
    <url>/2023/08/21/pandas%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>一些以panda为主的数据分析操作</p>
<span id="more"></span>


<h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><ul>
<li>Python      3.8.8rc1</li>
<li>numpy       1.24.4</li>
<li>pandas      2.0.3</li>
<li>matplotlib  3.7.2</li>
<li>seaborn     0.12.2</li>
</ul>
<h1 id="导入Python包"><a href="#导入Python包" class="headerlink" title="导入Python包"></a>导入Python包</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pylab as plt</span><br><span class="line">import seaborn as sns</span><br><span class="line"># 设置matplotlib样式为ggplot</span><br><span class="line">plt.style.use(&#x27;ggplot&#x27;)</span><br><span class="line"># 使数据列数超过200时，才用省略号跳过显示部分列</span><br><span class="line">pd.set_option(&#x27;max_columns&#x27;, 200)</span><br></pre></td></tr></table></figure>

<h1 id="数据读入"><a href="#数据读入" class="headerlink" title="数据读入"></a>数据读入</h1><h2 id="csv或tsv格式的输入文件"><a href="#csv或tsv格式的输入文件" class="headerlink" title="csv或tsv格式的输入文件"></a>csv或tsv格式的输入文件</h2><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># csv格式</span><br><span class="line">df = pd.read_csv(&#x27;xxx/xxx.csv&#x27;)</span><br><span class="line"></span><br><span class="line"># tsv格式</span><br><span class="line">df = pd.read_csv(&#x27;xxx/xxx.tsv&#x27;, sep=&#x27;\t&#x27;)</span><br></pre></td></tr></table></figure>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>完整参数列表：<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html">pandas.read_csv</a></li>
<li>可能常用参数：<ol>
<li>sep：指定作为分隔符的符号或正则表达式，默认是‘,’。当输入值大于1个字符或不是’\s+’时，会被解析为正则表达式。</li>
<li>delimiter：和sep一样。</li>
<li>header:整数，表头所在行。当names参数有设置时，默认是从列名自动判断；如果names参数没有设置，则默认是header&#x3D;0。注：如果skip_blank_lines&#x3D;True，会忽略注释行和空行，因此header&#x3D;0表示数据的第一行而不是文件的第一行。</li>
<li>names：用于指定列名的列表。如果设置了此参数，相当于指定了header &#x3D; None。此列表中不允许有重复项。</li>
<li>index_col：整数，用作行标签的列。</li>
<li>usecols：要选择的列的子集，输入值是列名或列索引的列表。</li>
<li>dtype：字典，指定整个数据集或某一列的数据类型。例如{‘a’: np.float64, ‘b’: np.int32, ‘c’: ‘Int64’}。</li>
<li>true_values：列表，除了不分大小写的‘True’外，还有哪些值会认为是True。</li>
<li>false_values：列表，除了不分大小写的‘False’外，还有哪些值会认为是False。</li>
<li>skipinitialspace：跳过分隔符后的空格，默认是False。</li>
<li>skiprows：文件开头要跳过的第几号（从 0 开始索引）或要跳过的多少行 (int)。如跳过第2和4行：skiprows &#x3D; [2, 4]；跳过前2行：skiprows&#x3D;2。</li>
<li>nrows：整数，指定要读取的文件行数。对于读取大文件很有用。</li>
<li>na_values：除了NA和NaN外，还有哪些值会认为是NA。</li>
<li>keep_default_na：解析数据时，识别的NA符号是否包含默认NaN值（NA和NaN）。</li>
<li>na_filter：是否需要检测缺失值标记（空字符串和na_values指定的值），默认True。在没有任何NA值的数据中，指定na_filter&#x3D;False可以提高读取大文件的性能。</li>
<li>skip_blank_lines：如果为True，则跳过空白行而不是解析为NaN值。</li>
</ol>
</li>
</ul>
<h2 id="xls或xlsx格式的输入文件"><a href="#xls或xlsx格式的输入文件" class="headerlink" title="xls或xlsx格式的输入文件"></a>xls或xlsx格式的输入文件</h2><h3 id="简单示例-1"><a href="#简单示例-1" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># xls格式</span><br><span class="line">df = pd.read_excel(&#x27;xxx/xxx.xls&#x27;, sheet_name=&#x27;xxx&#x27;)</span><br><span class="line"></span><br><span class="line"># xlsx格式</span><br><span class="line">df = pd.read_excel(&#x27;xxx/xxx.xlsx&#x27;, sheet_name=&#x27;xxx&#x27;)</span><br></pre></td></tr></table></figure>
<h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>完整参数列表：<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html">pandas.read_excel</a></li>
<li>支持文件格式： xls xlsx xlsm xlsb odf ods odt</li>
<li>可能常用参数：<ol>
<li>sheet_name：字符串，整数，列表或None，默认为0。指定要读取的工作表。设置为None时，读取所有工作表。</li>
<li>header：整数或整数列表，默认为0。用于指定表头所在行。如果没有标题，请使用None。</li>
<li>names：列表，默认为None。指定列名的列表。如果文件不包含标题行，则应显式传递 header&#x3D;None。</li>
<li>index_col：字符串，整数，整数列表，默认为None。用于指定行名所在列。设置为None代表没有行名。</li>
<li>usecols：要选择的列的子集，输入值是列名或列索引的列表。</li>
<li>dtype：字典，指定整个数据集或某一列的数据类型。例如{‘a’: np.float64, ‘b’: np.int32, ‘c’: ‘Int64’}。</li>
<li>engine：文件解析引擎。“xlrd”支持.xls文件，在1.2.0版本后xlrd只支持.xls文件。“openpyxl”支持更新的Excel文件。“odf”支持OpenDocument文件 .odf, .ods, .odt。“pyxlsb”支持Binary Excel文件。</li>
<li>true_values：列表，除了不分大小写的‘True’外，还有哪些值会认为是True。</li>
<li>false_values：列表，除了不分大小写的‘False’外，还有哪些值会认为是False。</li>
<li>skiprows：文件开头要跳过的第几号（从 0 开始索引）或要跳过的多少行 (int)。如跳过第2和4行：skiprows &#x3D; [2, 4]；跳过前2行：skiprows&#x3D;2。</li>
<li>nrows：整数，指定要读取的文件行数。对于读取大文件很有用。</li>
<li>na_values：除了NA和NaN外，还有哪些值会认为是NA。</li>
<li>keep_default_na：解析数据时，识别的NA符号是否包含默认NaN值（NA和NaN）。</li>
<li>na_filter：是否需要检测缺失值标记（空字符串和na_values指定的值），默认True。在没有任何NA值的数据中，指定na_filter&#x3D;False可以提高读取大文件的性能。</li>
</ol>
</li>
</ul>
<h1 id="数据观察"><a href="#数据观察" class="headerlink" title="数据观察"></a>数据观察</h1><h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><h1 id="特征观察"><a href="#特征观察" class="headerlink" title="特征观察"></a>特征观察</h1><h1 id="特征之间关系"><a href="#特征之间关系" class="headerlink" title="特征之间关系"></a>特征之间关系</h1><h1 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h1><p>完整参数列表：<br><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_csv.html">pandas.DataFrame.to_csv</a><br><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_excel.html">pandas.DataFrame.to_excel</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># csv格式</span><br><span class="line">df.to_csv(&#x27;xxx/output.csv&#x27;, index=False)</span><br><span class="line"></span><br><span class="line"># xlsx格式</span><br><span class="line">df.to_excel(&quot;xxx/output.xlsx&quot;, sheet_name=&#x27;Sheet_1&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/index.html#user-guide">pandas User Guide</a></li>
<li><a href="https://www.kaggle.com/code/robikscube/introduction-to-exploratory-data-analysis/notebook">Introduction to Exploratory Data Analysis</a></li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pandas</tag>
        <tag>seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>sambamba flagstat没有Primary Mapped Reads</title>
    <url>/2023/11/05/sambamba-flagstat%E6%B2%A1%E6%9C%89Primary-Mapped-Reads/</url>
    <content><![CDATA[<p>sambamba flagstat统计结果格式和samtools flagstat不一样，没有Primary Mapped Reads</p>
<span id="more"></span>


<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><ul>
<li>samtools 1.18</li>
<li>sambamba 1.0.1</li>
</ul>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>samtools flagstat与sambamba flagstat输出格式不一样，sambamba flagstat没有Primary Mapped Reads</p>
<h1 id="结果示例"><a href="#结果示例" class="headerlink" title="结果示例"></a>结果示例</h1><h2 id="samtools-flagstat"><a href="#samtools-flagstat" class="headerlink" title="samtools flagstat"></a>samtools flagstat</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4350490 + 0 in total (QC-passed reads + QC-failed reads)</span><br><span class="line">3501080 + 0 primary</span><br><span class="line">481096 + 0 secondary</span><br><span class="line">368314 + 0 supplementary</span><br><span class="line">0 + 0 duplicates</span><br><span class="line">0 + 0 primary duplicates</span><br><span class="line">4319560 + 0 mapped (99.29% : N/A)</span><br><span class="line">3470150 + 0 primary mapped (99.12% : N/A)</span><br><span class="line">3501080 + 0 paired in sequencing</span><br><span class="line">1750540 + 0 read1</span><br><span class="line">1750540 + 0 read2</span><br><span class="line">3469722 + 0 properly paired (99.10% : N/A)</span><br><span class="line">3470118 + 0 with itself and mate mapped</span><br><span class="line">32 + 0 singletons (0.00% : N/A)</span><br><span class="line">76 + 0 with mate mapped to a different chr</span><br><span class="line">20 + 0 with mate mapped to a different chr (mapQ&gt;=5)</span><br></pre></td></tr></table></figure>

<h2 id="sambamba-flagstat"><a href="#sambamba-flagstat" class="headerlink" title="sambamba flagstat"></a>sambamba flagstat</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4350490 + 0 in total (QC-passed reads + QC-failed reads)</span><br><span class="line">481096 + 0 secondary</span><br><span class="line">368314 + 0 supplementary</span><br><span class="line">0 + 0 duplicates</span><br><span class="line">4319560 + 0 mapped (99.29%:N/A)</span><br><span class="line">3501080 + 0 paired in sequencing</span><br><span class="line">1750540 + 0 read1</span><br><span class="line">1750540 + 0 read2</span><br><span class="line">3469722 + 0 properly paired (99.10%:N/A)</span><br><span class="line">3470118 + 0 with itself and mate mapped</span><br><span class="line">32 + 0 singletons (0.00%:N/A)</span><br><span class="line">76 + 0 with mate mapped to a different chr</span><br><span class="line">20 + 0 with mate mapped to a different chr (mapQ&gt;=5)</span><br></pre></td></tr></table></figure>

<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul>
<li>samtools flagstat的primary mapped 等于 sambamba flagstat的mapped - secondary - supplementary</li>
<li>samtools flagstat结果：3470150 + 0 primary mapped (99.12% : N&#x2F;A)</li>
<li>sambamba flagstat结果：3470150 &#x3D; 4319560 - 481096 - 368314</li>
</ul>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Sambamba</tag>
        <tag>Samtools</tag>
      </tags>
  </entry>
  <entry>
    <title>samtools的coverage和bedcov结果不一致</title>
    <url>/2023/11/05/samtools%E7%9A%84coverage%E5%92%8Cbedcov%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4/</url>
    <content><![CDATA[<p>分别用samtools coverage和bedtools bedcov计算区域内的Reads数，得到的结果不一致。</p>
<span id="more"></span>


<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><ul>
<li>samtools 1.18</li>
</ul>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li>samtools coverage的-r参数只能输入1个区域。</li>
<li>samtools bedcov可以统计整个bed文件的所有区域。</li>
<li>但是coverage和bedcov -c，统计同一个bam文件的同一个区域，得到的Reads数不一样。</li>
</ul>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><ul>
<li>bedcov和mpileup一样，受-d depth限制，只统计到设定的深度上限，再多的Reads就不统计了。</li>
<li>coverage默认的-d是1000000。bedcov的帮助文档没写是多少。</li>
</ul>
<h1 id="具体参数"><a href="#具体参数" class="headerlink" title="具体参数"></a>具体参数</h1><h2 id="bedcov帮助文档"><a href="#bedcov帮助文档" class="headerlink" title="bedcov帮助文档"></a>bedcov帮助文档</h2><ul>
<li>-d参数：设置此参数后，结果会多一列，是参考碱基超过-d设定的深度的数量</li>
<li>-c参数：设置此参数后，结果会多一列，是这个区域内的Reads数量<br><img src="https://pic.imgdb.cn/item/654746bcc458853aefb69190.png" alt="bedcov"></li>
</ul>
<h2 id="coverage帮助文档"><a href="#coverage帮助文档" class="headerlink" title="coverage帮助文档"></a>coverage帮助文档</h2><ul>
<li>-d参数：最大深度阈值，默认1000000（一百万），如果设置为0则阈值是整形变量的最大值，相当于没有任何深度限制。<br><img src="https://pic.imgdb.cn/item/654746cdc458853aefb6cc49.png" alt="coverage"></li>
</ul>
<h1 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h1><ul>
<li>bedcov的-d参数统计有多少个参考碱基超过-d设定的深度，没有注明默认值是多少，当-d有设置值时，会在第4列的总碱基数量后面多1列结果，是参考碱基超过-d设定的深度的数量。但实际上结果中第4列的总碱基数量以及-c统计出的Reads数，都会受到-d限制。  </li>
<li>在-d不设置的状态下，-c统计出的Reads数最高只会有64020，但是当-d设置为1000000时，Reads数会统计出更高的结果，而且数量与coverage模块的默认参数（-d 1000000）一样。  </li>
<li>coverage模块的-d参数如果设置为0，会去除深度限制。但是如果bedcov模块的-d设置为0，不会去除深度限制，只是总碱基数量后面会多1列，统计有多少个参考碱基深度超过0。  </li>
<li>查看bedcov的源码，<a href="https://github.com/samtools/samtools/blob/1.18/bedcov.c">samtools&#x2F;bedcov.c at 1.18 · samtools&#x2F;samtools (github.com)</a><ul>
<li>默认最大深度阈值应该是DEFAULT_DEPTH 64000（第43行）</li>
<li>-d输入的参数应该是min_depth（第120行）</li>
<li>如果min_depth &gt; 64000则用min_depth作为最大深度阈值，否则64000就是最大深度阈值（第223~226行）</li>
</ul>
</li>
</ul>
<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;# samtools coverage #&quot;</span><br><span class="line">/xxx/Software/samtools-1.18/bin/samtools coverage -r chr2:29446329-29446350 Test.bam</span><br><span class="line">/xxx/Software/samtools-1.18/bin/samtools coverage -r chr6:117650534-117650556 Test.bam</span><br><span class="line">echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;# samtools bedcov -c #&quot;</span><br><span class="line">/xxx/Software/samtools-1.18/bin/samtools bedcov -c Test.bed Test.bam</span><br><span class="line">echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;# samtools bedcov -c -d 1000000 #&quot;</span><br><span class="line">/xxx/Software/samtools-1.18/bin/samtools bedcov -c -d 10000000 Test.bed Test.bam</span><br><span class="line">echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;# samtools bedcov -c -d 0  #&quot;</span><br><span class="line">/xxx/Software/samtools-1.18/bin/samtools bedcov -c -d 0 Test.bed Test.bam</span><br><span class="line">echo &quot;&quot;</span><br></pre></td></tr></table></figure>

<h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p><img src="https://pic.imgdb.cn/item/654746e3c458853aefb71529.png" alt="result"></p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Samtools</tag>
      </tags>
  </entry>
  <entry>
    <title>热图竖向列名</title>
    <url>/2023/04/17/%E7%83%AD%E5%9B%BE%E7%AB%96%E5%90%91%E5%88%97%E5%90%8D/</url>
    <content><![CDATA[<p>用ComplexHeatmap画热图，列名竖向排列</p>
<span id="more"></span>

<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><ul>
<li>R版本：version 3.6.0  </li>
<li>R包版本：ComplexHeatmap 2.2.0</li>
</ul>
<h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><p>  列名放在热图上方，字体排列是竖向的。  </p>
<ul>
<li>列名放在热图上方很好解决，直接用Heatmap()的column_names_side &#x3D; “top”。  </li>
<li>问题是字体竖向排列。</li>
</ul>
<h1 id="失败方案"><a href="#失败方案" class="headerlink" title="失败方案"></a>失败方案</h1><h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><p>  Heatmap(column_names_rot &#x3D; 90)，不行。<br>  列名是整体旋转，做不到竖向阅读。<br>  <img src="https://pic.imgdb.cn/item/643cf6800d2dde577704aee0.jpg" alt="热图1column_names_rot=90">  </p>
<h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h2><p>  列名插入换行符，不行。<br>  可以竖向阅读，但是列名会和热图区域重叠。<br>  <img src="https://pic.imgdb.cn/item/643cf6ac0d2dde577704eb57.jpg" alt="热图2列名插入换行符">  </p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul>
<li><p>列名插入换行符，并用decorate_dimnames()重绘列名组件。  </p>
</li>
<li><p>热图示例<br><img src="https://pic.imgdb.cn/item/643cf6db0d2dde5777053a3a.jpg" alt="热图3完成">  </p>
</li>
<li><p>数据示例<br><img src="https://pic.imgdb.cn/item/643cf6f50d2dde5777055a3f.jpg" alt="数据示例">  </p>
</li>
<li><p>文本文件的中文编码转换示例<br><code>iconv -c -f GBK -t UTF-8 Input.GBK.tsv -o Output.utf8.tsv</code>  </p>
</li>
<li><p>代码  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ComplexHeatmap参考示例</span></span><br><span class="line"><span class="comment"># https://jokergoo.github.io/ComplexHeatmap-reference/book/</span></span><br><span class="line"></span><br><span class="line">library<span class="punctuation">(</span>ComplexHeatmap<span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>circlize<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">args <span class="operator">&lt;-</span> commandArgs<span class="punctuation">(</span><span class="built_in">T</span><span class="punctuation">)</span></span><br><span class="line">Input_Table <span class="operator">=</span> args<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">Output_Dir <span class="operator">=</span> args<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输出目录不存在，创建它</span></span><br><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span><span class="operator">!</span> dir.exists<span class="punctuation">(</span>Output_Dir<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">        dir.create<span class="punctuation">(</span>Plot_Result_Dir<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出图片文件路径</span></span><br><span class="line">Output_Pic <span class="operator">=</span> paste<span class="punctuation">(</span>Output_Dir<span class="punctuation">,</span> <span class="string">&quot;/Heatmap.png&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> collapse <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################## 数据处理 ##########################</span></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line"><span class="comment"># stringsAsFactors=FALSE 不将字符型变量转为因子，否则对其做字符串操作会报错</span></span><br><span class="line"><span class="comment"># check.names=FALSE 不检查列名的命名有效性，否则列名会被修改：如数字开头会在最前面被加上X、空格被变为.、-被变为.等情况</span></span><br><span class="line"><span class="comment"># check.names=FALSE后，列名的空格会被保留，用列名获取数据时，需要用Data_Frame$`Name With Space`这种格式</span></span><br><span class="line">Data <span class="operator">=</span> read.table<span class="punctuation">(</span>Input_Table<span class="punctuation">,</span> head <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span> comment.char <span class="operator">=</span> <span class="string">&quot;#&quot;</span><span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> check.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：字符串的每个字符中间插入换行符</span></span><br><span class="line">wrap_letters <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        sapply<span class="punctuation">(</span>strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> <span class="string">&#x27;&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> paste0<span class="punctuation">,</span> collapse <span class="operator">=</span> <span class="string">&#x27;\n&#x27;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Data从第2列到最后1列作为画图数据Data_Draw</span></span><br><span class="line">Data_Draw <span class="operator">=</span> Data<span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="operator">:</span>ncol<span class="punctuation">(</span>Data<span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment"># Data的第1列作为画图数据Data_Draw的行名</span></span><br><span class="line">row.names<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span> <span class="operator">=</span> Data<span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment"># 另存画图数据Data_Draw的列名，并在列名的每个字符中间插入换行符</span></span><br><span class="line">Col_Names <span class="operator">=</span> wrap_letters<span class="punctuation">(</span>colnames<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 将Data_Draw的列名替换为空</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span> <span class="operator">=</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span> ncol<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于cell显示数值。read.table(colClasses = &quot;character&quot;)数值全部作为字符串读入，避免format()转换的科学计数法。NA转为空字符串。</span></span><br><span class="line">Cell_Number <span class="operator">=</span> read.table<span class="punctuation">(</span>Input_Table<span class="punctuation">,</span> head <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span> comment.char <span class="operator">=</span> <span class="string">&quot;#&quot;</span><span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> check.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> colClasses <span class="operator">=</span> <span class="string">&quot;character&quot;</span><span class="punctuation">,</span> na.strings <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line">Cell_Number <span class="operator">=</span> Cell_Number<span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="operator">:</span>ncol<span class="punctuation">(</span>Cell_Number<span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">Cell_Number<span class="punctuation">[</span><span class="built_in">is.na</span><span class="punctuation">(</span>Cell_Number<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################## 画图 ############################</span></span><br><span class="line"><span class="comment"># 根据画图数据的行数、列数设置图的尺寸</span></span><br><span class="line">base_size <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">hight_factor <span class="operator">=</span> <span class="built_in">ceiling</span><span class="punctuation">(</span>nrow<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span> <span class="operator">/</span> <span class="number">8</span><span class="punctuation">)</span></span><br><span class="line">width_factor <span class="operator">=</span> <span class="built_in">ceiling</span><span class="punctuation">(</span>ncol<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span> <span class="operator">/</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line">width_value <span class="operator">=</span> base_size <span class="operator">*</span> width_factor <span class="operator">*</span> <span class="number">0.6</span></span><br><span class="line"><span class="keyword">if</span><span class="punctuation">(</span>width_value <span class="operator">&gt;</span> <span class="number">200</span><span class="punctuation">)</span><span class="punctuation">&#123;</span>width_value <span class="operator">=</span> <span class="number">200</span><span class="punctuation">&#125;</span></span><br><span class="line">height_value<span class="operator">=</span><span class="punctuation">(</span>base_size <span class="operator">+</span> <span class="number">2</span><span class="punctuation">)</span> <span class="operator">*</span> hight_factor <span class="operator">*</span> <span class="number">0.65</span></span><br><span class="line"><span class="keyword">if</span><span class="punctuation">(</span>height_value <span class="operator">&gt;</span> <span class="number">300</span><span class="punctuation">)</span><span class="punctuation">&#123;</span>height_value <span class="operator">=</span> <span class="number">300</span><span class="punctuation">&#125;</span></span><br><span class="line">png<span class="punctuation">(</span>Output_Pic<span class="punctuation">,</span> width <span class="operator">=</span> width_value<span class="punctuation">,</span> height <span class="operator">=</span> height_value<span class="punctuation">,</span> units <span class="operator">=</span> <span class="string">&quot;in&quot;</span><span class="punctuation">,</span> res<span class="operator">=</span><span class="number">300</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热图大小占图的80%</span></span><br><span class="line">Heatmap_Width <span class="operator">=</span> width_value <span class="operator">*</span> <span class="number">0.8</span></span><br><span class="line">Heatmap_Height <span class="operator">=</span> height_value <span class="operator">*</span> <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义热图颜色</span></span><br><span class="line">Color_Palette <span class="operator">&lt;-</span> colorRamp2<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">50</span><span class="punctuation">,</span> <span class="number">100</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;white&quot;</span><span class="punctuation">,</span> <span class="string">&quot;green&quot;</span><span class="punctuation">,</span> <span class="string">&quot;yellow&quot;</span><span class="punctuation">,</span> <span class="string">&quot;red&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热图</span></span><br><span class="line">Darw_Heatmap <span class="operator">=</span> Heatmap<span class="punctuation">(</span></span><br><span class="line">  Data_Draw<span class="punctuation">,</span></span><br><span class="line">  name <span class="operator">=</span> <span class="string">&quot;Darw_Heatmap&quot;</span><span class="punctuation">,</span></span><br><span class="line">  width <span class="operator">=</span> unit<span class="punctuation">(</span>Heatmap_Width<span class="punctuation">,</span> <span class="string">&quot;in&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  height <span class="operator">=</span> unit<span class="punctuation">(</span>Heatmap_Height<span class="punctuation">,</span> <span class="string">&quot;in&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  col<span class="operator">=</span>Color_Palette<span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 行、列聚类</span></span><br><span class="line">  cluster_rows <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">  cluster_columns <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 行名相关参数</span></span><br><span class="line">  show_row_names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">  row_names_side <span class="operator">=</span> <span class="string">&quot;right&quot;</span><span class="punctuation">,</span></span><br><span class="line">  row_names_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  row_names_max_width <span class="operator">=</span> max_text_width<span class="punctuation">(</span>row.names<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">,</span> gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  row_names_rot <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 列名相关参数</span></span><br><span class="line">  show_column_names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">  column_names_side <span class="operator">=</span> <span class="string">&quot;top&quot;</span><span class="punctuation">,</span></span><br><span class="line">  column_names_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  column_names_max_height <span class="operator">=</span> max_text_width<span class="punctuation">(</span><span class="built_in">names</span><span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">,</span> gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  column_names_rot <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 相当于pheatmap的border_color和border线宽度</span></span><br><span class="line">  rect_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>col <span class="operator">=</span> <span class="string">&quot;grey&quot;</span><span class="punctuation">,</span> lwd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 每个cell显示对应数值，相当于pheatmap的display_numbers</span></span><br><span class="line">  cell_fun <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>j<span class="punctuation">,</span> i<span class="punctuation">,</span> x<span class="punctuation">,</span> y<span class="punctuation">,</span> width<span class="punctuation">,</span> height<span class="punctuation">,</span> fill<span class="punctuation">)</span> <span class="punctuation">&#123;</span>grid.text<span class="punctuation">(</span>Cell_Number<span class="punctuation">[</span>i<span class="punctuation">,</span>j<span class="punctuation">]</span><span class="punctuation">,</span> x<span class="punctuation">,</span> y<span class="punctuation">,</span> gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">9</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 空值的cell的颜色</span></span><br><span class="line">  na_col <span class="operator">=</span> <span class="string">&quot;white&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 图例相关参数</span></span><br><span class="line">  show_heatmap_legend <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">  heatmap_legend_param <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span>title <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> color_bar <span class="operator">=</span> <span class="string">&quot;continuous&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 图例</span></span><br><span class="line">Draw_Legend <span class="operator">=</span> Legend<span class="punctuation">(</span>col <span class="operator">=</span> Color_Palette<span class="punctuation">,</span> title <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> grid_height <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">6</span><span class="punctuation">,</span> <span class="string">&quot;mm&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> grid_width <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">6</span><span class="punctuation">,</span> <span class="string">&quot;mm&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置热图四周的距离，因为有的列名很长，热图上方需要空出更多空间</span></span><br><span class="line">Heatmap_Left_Padding <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">Heatmap_Bottom_Padding <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">Heatmap_Top_Padding <span class="operator">=</span> <span class="number">94</span></span><br><span class="line">Heatmap_Right_Padding <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 绘制热图和图例</span></span><br><span class="line"><span class="comment"># 热图需要padding，图例要移动位置，所以必须用draw()</span></span><br><span class="line">draw<span class="punctuation">(</span>Darw_Heatmap<span class="punctuation">,</span> padding <span class="operator">=</span> unit<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span>Heatmap_Bottom_Padding<span class="punctuation">,</span> Heatmap_Left_Padding<span class="punctuation">,</span> Heatmap_Top_Padding<span class="punctuation">,</span> Heatmap_Right_Padding<span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&quot;mm&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">draw<span class="punctuation">(</span>Draw_Legend<span class="punctuation">,</span> x <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.98</span><span class="punctuation">,</span> <span class="string">&quot;npc&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> y <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.85</span><span class="punctuation">,</span> <span class="string">&quot;npc&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> just <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;right&quot;</span><span class="punctuation">,</span> <span class="string">&quot;top&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据热图padding设置第一个列名的位置</span></span><br><span class="line">X_Pos <span class="operator">=</span> unit<span class="punctuation">(</span>Heatmap_Left_Padding<span class="operator">+</span><span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;mm&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 每个列名输出后需要移动一定位置，以对齐每个cell。根据热图大小和列数量，计算每个cell的宽度</span></span><br><span class="line">X_Step <span class="operator">=</span> unit<span class="punctuation">(</span>Heatmap_Width<span class="operator">/</span>ncol<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&quot;in&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># decorate_*()系列函数用于绘制热图后，对热图组件做修改 https://jokergoo.github.io/ComplexHeatmap-reference/book/heatmap-decoration.html</span></span><br><span class="line"><span class="comment"># decorate_dimnames(which = &quot;column&quot;)用于修改列名组件</span></span><br><span class="line"><span class="comment"># 注1：decorate_*()必须在热图绘制后才能用。如果Darw_Heatmap = Heatmap(...)后，必须先draw(Darw_Heatmap)；或者不把Heatmap(...)赋给变量和draw()。同理，如果要修改某个组件，该组件必须先被绘制出来；我要修改列名，那必须Heatmap(show_column_names = TRUE)，所以前面要将Data_Draw的列名设为空值，否则Heatmap()和decorate_dimnames()会导致两次的列名重叠。</span></span><br><span class="line"><span class="comment"># 注2：decorate_*()的[heatmap]参数，是name of the heatmap，所以要用Heatmap(name = &quot;xxx&quot;)填的热图名称，而不是Heatmap(...)赋给的变量名</span></span><br><span class="line"><span class="comment"># 注3：这里Col_Names是直接取Data_Draw的列名。如果热图有做列聚类，列名顺序可能改变了，注意修改。</span></span><br><span class="line">decorate_dimnames<span class="punctuation">(</span><span class="string">&quot;Darw_Heatmap&quot;</span><span class="punctuation">,</span> which <span class="operator">=</span> <span class="string">&quot;column&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="keyword">for</span> <span class="punctuation">(</span>Name <span class="keyword">in</span> Col_Names<span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment"># 向下对齐，设置横坐标</span></span><br><span class="line">    grid.text<span class="punctuation">(</span>Name<span class="punctuation">,</span> just <span class="operator">=</span> <span class="string">&quot;bottom&quot;</span><span class="punctuation">,</span> x <span class="operator">=</span> X_Pos<span class="punctuation">)</span></span><br><span class="line">    <span class="comment"># 列名输出后移动位置</span></span><br><span class="line">    X_Pos <span class="operator">=</span> X_Pos <span class="operator">+</span> X_Step</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>ComplexHeatmap</tag>
        <tag>画图</tag>
      </tags>
  </entry>
</search>
