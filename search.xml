<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BLAST及NT库本地化</title>
    <url>/2023/04/16/BLAST%E5%8F%8ANT%E5%BA%93%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
    <content><![CDATA[<p>下载NCBI的NT数据库到服务器本地<br>Blast比对结果中输出物种信息<br>用TaxonKit、blastdbcmd、makeblastdb建立子库  </p>
<span id="more"></span>  

<h1 id="NT库本地化"><a href="#NT库本地化" class="headerlink" title="NT库本地化"></a>NT库本地化</h1><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ol>
<li><p>可选文件格式</p>
<ol>
<li>blast index文件<br> <code>https://ftp.ncbi.nlm.nih.gov/blast/db</code>中的nt.*.tar.gz 。<br> 下载完成后，MD5验证，解压文件，就可以直接用于blast。index中已经包含物种Taxonomy信息。但是压缩包中没有Fasta文件，需要的话可以用blastdbcmd提取。</li>
<li>Fasta文件<br><code>https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA</code>中的nt.gz 。<br>下载完成并解压后，需要自建blast index；如果结果中还需要物种Taxonomy信息，建index前还需要准备好TaxIDMapFile文件。</li>
</ol>
</li>
<li><p>下载blast index文件<br> wget下载有点问题，不知道是服务器还是网络问题，wget下载的文件总是MD5校验失败；有时候重新下又能校验成功。<br> aspera下载不行，链接NCBI失败，可能是必须开放某个指定端口。<br> 最后是用的rsync下载。  </p>
<ol>
<li>文件列表下载   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync --no-motd --files-from=&lt;文件列表&gt; &lt;文件源&gt; &lt;下载存放路径&gt;</span><br><span class="line"># 示例</span><br><span class="line">rsync --no-motd --files-from=***/File.list rsync://ftp.ncbi.nlm.nih.gov/blast/db/ ***/NT_Database</span><br></pre></td></tr></table></figure>
 File.list（每个文件1列）<br> <img src="https://pic.imgdb.cn/item/643c01890d2dde57770d7686.jpg" alt="File.list"></li>
</ol>
<ul>
<li>实际下载文件路径是&lt;文件源&gt;加上File.list中的内容，完整路径如：rsync:&#x2F;&#x2F;ftp.ncbi.nlm.nih.gov&#x2F;blast&#x2F;db&#x2F;nt.22.tar.gz。</li>
<li>当File.list中的内容包含子目录，&lt;下载存放路径&gt;中会自动生成对应层级目录，例如File.list中的内容是“blast&#x2F;db&#x2F;nt.22.tar.gz”，则下载的nt.22.tar.gz会保存在<code>&lt;下载存放路径&gt;/blast/db</code>中。</li>
</ul>
<ol start="2">
<li>并行下载<br> 推荐这种方式，文件列表逐个下载太慢，这个每行加“&amp;”后台并行下载文件比较快。   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync --no-motd &lt;文件源&gt; &lt;下载存放路径&gt;</span><br><span class="line"># 示例</span><br><span class="line">rsync --no-motd rsync://ftp.ncbi.nlm.nih.gov/blast/db/nt.22.tar.gz ***/NT_Database &amp;</span><br><span class="line">rsync --no-motd rsync://ftp.ncbi.nlm.nih.gov/blast/db/nt.23.tar.gz ***/NT_Database &amp;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="MD5验证"><a href="#MD5验证" class="headerlink" title="MD5验证"></a>MD5验证</h2><p><code>https://ftp.ncbi.nlm.nih.gov/blast/db</code>中还有nt.*.tar.gz.md5文件，用于MD5验证。<br>全部nt.<em>.tar.gz和nt.</em>.tar.gz.md5文件都下载完后，md5文件合并一起验证。<br>nt.all.md5.check中，文件名后是OK即文件完整；如果是Fail，则不完整，需要重新下载该文件。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 合并所有md5文件</span><br><span class="line">cat nt.*.tar.gz.md5 &gt; nt.all.md5</span><br><span class="line"># md5验证</span><br><span class="line">md5sum -c nt.all.md5 &gt; nt.all.md5.check</span><br></pre></td></tr></table></figure>

<h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><p><code>tar -zxvf nt.*.tar.gz</code><br>解压后，nt.*.tar.gz文件删除或者备份都可以。<br>一般是删除？除了需要迁移到别的服务器，好像也没有能再用到的地方了。  </p>
<h2 id="Blast比对"><a href="#Blast比对" class="headerlink" title="Blast比对"></a>Blast比对</h2><p>blast结果中Subject Seq-id（NT库的序列ID）格式为“gi|384474605|emb|HE793683.1|”，含有<a href="https://www.ncbi.nlm.nih.gov/genbank/sequenceids/">GI numbers</a>和<a href="https://support.nlm.nih.gov/knowledgebase/article/KA-03436/en-us">GenBank accession numbers</a>；不包含Taxid信息。<br>如果blast index中有Taxonomy信息，可以在输出格式增加staxids sscinames，使结果额外输出物种的Taxid和物种名称。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Shell</span><br><span class="line"></span><br><span class="line">sample=&quot;Input&quot;</span><br><span class="line">query_fa=&quot;Input.fa&quot;</span><br><span class="line"></span><br><span class="line">database=&quot;&lt;NT库目录&gt;/nt&quot;</span><br><span class="line">identity=&quot;98&quot;</span><br><span class="line">cov_hsp=&quot;90&quot;</span><br><span class="line">evalue=&quot;1e-5&quot;</span><br><span class="line"></span><br><span class="line">threads=&quot;8&quot;</span><br><span class="line"></span><br><span class="line"># 如果不export BLASTDB的话，要在bashrc声明BLASTDB，否则报错</span><br><span class="line"># 在-outfmt添加staxids sscinames，使结果额外输出物种Taxid、物种名称</span><br><span class="line">export BLASTDB=&lt;NT库目录&gt; &amp;&amp; blastn -query $&#123;query_fa&#125; -db $&#123;database&#125; -out $&#123;sample&#125;.noheader -outfmt &quot;6  qaccver saccver pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids sscinames stitle&quot; -num_threads $&#123;threads&#125; -evalue $&#123;evalue&#125; -perc_identity $&#123;identity&#125; -qcov_hsp_perc $&#123;cov_hsp&#125;</span><br><span class="line"></span><br><span class="line"># 表头</span><br><span class="line">echo -e &quot;Query Seq-id\tSubject Seq-id\tIdentity\tAlignment length\tMismatch\tGap Open\tQuery Start\tQuery End\tSubject Start\tSubject End\tEvalue\tBitscore\tTaxonomy ID\tScientific Name\tSeq Title&quot; &gt; $&#123;sample&#125;.tsv</span><br><span class="line"></span><br><span class="line"># 合并blast结果和表头</span><br><span class="line">cat $&#123;sample&#125;.noheader &gt;&gt; $&#123;sample&#125;.tsv</span><br><span class="line"></span><br><span class="line"># 删除没有表头的blast结果</span><br><span class="line">rm -f $&#123;sample&#125;.noheader</span><br></pre></td></tr></table></figure>

<h1 id="构建子库"><a href="#构建子库" class="headerlink" title="构建子库"></a>构建子库</h1><ul>
<li>用blastdbcmd可以根据Taxid从NT库抽取相关序列，从而构建子库。  </li>
<li>用<a href="https://bioinf.shenwei.me/taxonkit/">TaxonKit</a>可以获取某个Taxid节点以下所有Taxid，也就是说不止可以抽取单个物种的序列，还可以提供Taxid列表来抽取整个目、科、属…的序列。  </li>
<li>TaxonKit需要<a href="https://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz">taxdump.tar.gz</a>。NT库和taxdump.tar.gz最好日期一致，因为Taxonomy会更新，可能导致NT库的Taxid和TaxonKit提取的有区别。具体见TaxonKit的<a href="https://bioinf.shenwei.me/taxonkit/chinese/#taxid-changelog-taxid">TaxID changelog</a>。  </li>
<li>如果要用Taxid统计blast结果中的物种信息，需要注意有些亚种&#x2F;株的Taxid与物种（Species）等级Taxid不一样。如Streptococcus parasanguinis ATCC 903（Taxid 888048）的Rank是strain；它是属于Streptococcus parasanguinis（Taxid 1318）这个物种的。用taxonkit lineage可以获取某个Taxid在物种等级的名称和Taxid。如<code>echo 888048 | taxonkit lineage | taxonkit reformat -t -f \&quot;&#123;s&#125;\&quot; | cut -f 3,4</code>。  </li>
<li>用子库作为参考序列blast时，将-db参数换成{Index_Dir}&#x2F;${Name}.fa即可。</li>
</ul>
<p>以链球菌属举例，在NCBI的<a href="https://www.ncbi.nlm.nih.gov/taxonomy">Taxonomy数据库</a>可以找到Streptococcus的Taxid是1301。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Shell</span><br><span class="line"></span><br><span class="line">Name=&quot;Streptococcus&quot;</span><br><span class="line">Taxid=&quot;1301&quot;</span><br><span class="line">Index_Dir=&quot;Streptococcus_Index&quot;</span><br><span class="line"></span><br><span class="line"># 获取该Taxid节点以下所有子节点的Taxid</span><br><span class="line">taxonkit list -I &quot;&quot; --ids $Taxid &gt; $&#123;Index_Dir&#125;/$&#123;Name&#125;.taxid</span><br><span class="line"></span><br><span class="line"># 提取相关序列</span><br><span class="line">blastdbcmd -db &lt;NT库目录&gt;/nt -taxidlist $&#123;Index_Dir&#125;/$&#123;Name&#125;.taxid &gt; $&#123;Index_Dir&#125;/$&#123;Name&#125;.fa</span><br><span class="line"></span><br><span class="line"># 提取GenBank accession numbers（GI号也可以）和Taxid的对应关系文件</span><br><span class="line">blastdbcmd -db &lt;NT库目录&gt;/nt -taxidlist $&#123;Index_Dir&#125;/$&#123;Name&#125;.taxid -outfmt &quot;%a %T&quot; &gt; $&#123;Index_Dir&#125;/taxid_map.txt</span><br><span class="line"></span><br><span class="line"># 建blast index，通过-parse_seqids -taxid_map在index中附加物种Taxonomy信息</span><br><span class="line">makeblastdb -dbtype nucl -in $&#123;Index_Dir&#125;/$&#123;Name&#125;.fa -out $&#123;Index_Dir&#125;/$&#123;Name&#125;.fa -parse_seqids -taxid_map $&#123;Index_Dir&#125;/taxid_map.txt</span><br><span class="line"></span><br><span class="line"># 提取序列的GenBank accession numbers、Taxid、物种名称（比对用不上，就是看看参考里有什么）</span><br><span class="line">blastdbcmd -db &lt;NT库目录&gt;/nt -taxidlist $&#123;Index_Dir&#125;/$&#123;Name&#125;.taxid -outfmt &quot;%a  %T  %S&quot; &gt; $&#123;Index_Dir&#125;/$&#123;Name&#125;.Name.tsv</span><br></pre></td></tr></table></figure>
<p>taxid_map.txt（第1列GenBank accession numbers，第2列Taxid）<br><img src="https://pic.imgdb.cn/item/643c01cc0d2dde57770dcff5.jpg" alt="taxid_map.txt"><br>Name.tsv（第1列GenBank accession numbers，第2列Taxid，第3列物种名称）<br><img src="https://pic.imgdb.cn/item/643c01b20d2dde57770dad98.jpg" alt="Name.tsv">  </p>
<h1 id="假如用nt-gz建库"><a href="#假如用nt-gz建库" class="headerlink" title="假如用nt.gz建库"></a>假如用nt.gz建库</h1><ul>
<li>nt.gz解压后是NT库的fasta文件。如果不需要物种信息的话，直接makeblastdb建库就行。如果balst结果要有物种信息，则需要提供GenBank accession numbers和Taxid对应关系，类似上面的子库构建的-parse_seqids -taxid_map方式。  </li>
<li>GenBank accession numbers和Taxid对应关系文件可以用<a href="https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/nucl_gb.accession2taxid.gz">nucl_gb.accession2taxid.gz</a>。和taxdump.tar.gz一样原因，accession2taxid最好与NT库日期一致。  </li>
<li>nucl_gb.accession2taxid.gz格式是tsv，第一列Accession，第二列Accession.version，第三列TaxId，第四列GI；整理成taxid_map格式后，用makeblastdb加-parse_seqids -taxid_map建库就行。</li>
</ul>
<h1 id="一些blastn参数"><a href="#一些blastn参数" class="headerlink" title="一些blastn参数"></a>一些blastn参数</h1><p>-task：默认是megablast，可选blastn、blastn-short、dc-megablast、megablast、rmblastn<br>-query：需要比对的fasta序列<br>-db：数据库路径，写到fasta前缀为止，如***&#x2F;NT_Database&#x2F;nt<br>-out：输出文件<br>-outfmt：输出格式，6是tab分割且无表头的格式，其他格式见blastn帮助文档<br>-num_threads：线程数，默认1；与-mt_mode相关，具体见<a href="https://www.ncbi.nlm.nih.gov/books/NBK571452/">这里</a><br>-evalue：e值过滤阈值，默认10<br>-perc_identity：identity百分比过滤阈值，取值0 ~ 100<br>-qcov_hsp_perc：hsp覆盖度百分比过滤阈值，取值0 ~ 100<br>-max_target_seqs：输出结果保留多少比对上的subject序列，默认500，建议大于等于5<br>-max_hsps：每个query序列比对上的每个subject序列保留多少个HSP，需要填写大于等于1，无默认值  </p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>NT</tag>
        <tag>BLAST</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker转Singularity</title>
    <url>/2023/04/24/Docker%E8%BD%ACSingularity/</url>
    <content><![CDATA[<p>Docker镜像转换为Singularity的sif格式镜像文件</p>
<span id="more"></span>

<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>本地搭建了一些docker镜像，已有的方案用Cromwell投递WDL项目时用的是Singularity镜像，所以需要转为Singularity的sif格式镜像文件。  </p>
<h1 id="错误方案"><a href="#错误方案" class="headerlink" title="错误方案"></a>错误方案</h1><p>同事之前已经写了一个将docker hub的镜像pull下来并转为sif格式的脚本，想改成用singularity build去处理本地docker镜像。<br>但是发现生成的sif文件名称没有sha256后面的验证码。<br>正常生成的sif名称类似：***_varscan2_sha256_b235818***************595db587df.sif，但是singularity build生成的的会类似***<em>varscan2_sha256</em>.sif。<br>原因是sha256验证码取的是docker镜像的RepoDigests，此信息只有当镜像被上传到docker hub后才会有。<br>本地搭建的，未上传到docker hub的镜像，使用docker images –digests查看会见到该镜像的DIGEST列的值为&lt;none&gt;。所以其实是sha256码本身就不存在，所以无法生成对应的文件名。<br>其实没有sha256的Singularity的sif格式镜像文件也可以用于Cromwell投递WDL项目，需要Cromwell配置文件设置参数。[这里挖一个坑，写好填上]  </p>
<p>已有的用于Docker转换为Singularity的脚本：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"></span><br><span class="line">docker=$1</span><br><span class="line"></span><br><span class="line">export SINGULARITY_CACHEDIR=[存放Singularity镜像的目录]</span><br><span class="line">CACHE_DIR=$SINGULARITY_CACHEDIR</span><br><span class="line">DOCKER_NAME=$(echo $docker | cut -d&quot;:&quot; -f 1 | sed -e &#x27;s/\//_/&#x27;)</span><br><span class="line">SHA_NAME=$(docker inspect --format=&#x27;&#123;&#123;index .RepoDigests 0&#125;&#125;&#x27; $&#123;docker&#125; | cut -d&quot;:&quot; -f 2)</span><br><span class="line">SHA_TAG=&quot;sha256_$&#123;SHA_NAME&#125;&quot;</span><br><span class="line">IMAGE=$CACHE_DIR/$&#123;DOCKER_NAME&#125;_$&#123;SHA_TAG&#125;.sif</span><br><span class="line">if [ ! -f $IMAGE ]; then</span><br><span class="line">    singularity pull $IMAGE docker://$&#123;docker&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h1 id="正确方案"><a href="#正确方案" class="headerlink" title="正确方案"></a>正确方案</h1><p>先将本地的docker image上传到docker hub上（<a href="https://blog.csdn.net/u013258415/article/details/80050956/">参考</a>），生成Docker镜像的RepoDigests后，再跑一下上面的shell脚本。  </p>
<ol>
<li>注册docker hub账户，<code>https://hub.docker.com/</code>。  </li>
<li>在服务器上登录docker hub，命令行docker login，输账号密码。  </li>
<li>检查镜像的REPOSITORY命名方式，必须是“注册用户名&#x2F;镜像名”。不符合的可以用docker tag <old_REPOSITORY> <new_REPOSITORY>修改。修改后可以docker rmi 把旧的删掉。  </new_REPOSITORY></old_REPOSITORY></li>
<li>上传镜像到docker hub，命令行docker push REPOSITORY:TAG，等待上传完毕即可。无需重新pull镜像，上传完本地的镜像就会有RepoDigests，可以通过docker images –digests查看。  </li>
<li>退出当前docker hub账号，命令行docker logout。  </li>
<li>使用上面的shell脚本将docker容器转为sif格式，传入参数是docker image的REPOSITORY:TAG。</li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Singularity</tag>
        <tag>WDL</tag>
        <tag>Cromwell</tag>
      </tags>
  </entry>
  <entry>
    <title>IGV自定义参考基因组</title>
    <url>/2023/05/03/IGV%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E8%80%83%E5%9F%BA%E5%9B%A0%E7%BB%84/</url>
    <content><![CDATA[<p>IGV 2.11.0版本以上，自定义参考基因组的方法</p>
<span id="more"></span>

<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><p>IGV版本：2.13.0  </p>
<h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><p>对b37的参考基因组fasta文件做了一些修改，需要在IGV中浏览它，而且需要有Refseq的基因注释信息的Track。  </p>
<h1 id="信息说明"><a href="#信息说明" class="headerlink" title="信息说明"></a>信息说明</h1><h2 id="版本差异"><a href="#版本差异" class="headerlink" title="版本差异"></a>版本差异</h2><p>IGV 2.11.0版本以上，是用一个JSON文件去指定和加载参考基因组的。<br>同时弃用了之前版本的.genome格式；通过选项Genomes -&gt; Greate .genome File…的加载方式也取消了。  </p>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://github.com/igvteam/igv/wiki/JSON-Genome-Format">格式说明</a> <code>https://github.com/igvteam/igv/wiki/JSON-Genome-Format</code><br><a href="https://github.com/igvteam/igv.js/wiki/Reference-Genome">属性说明</a> <code>https://github.com/igvteam/igv.js/wiki/Reference-Genome</code>  </p>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>IGV 2.11.0版本以上自定义参考基因组JSON文件，只有是fastaURL必填，其他都是可选。<br>所有URL都可以是在线资源或本地路径。  </p>
<ul>
<li>id：该参考基因组的名称，可选。就是在Genome下拉框里显示的基因组名称。</li>
<li>name：描述信息，可选。</li>
<li>fastaURL：参考基因组Fasta的URL，必填。可以是线上的，如UCSC等数据库中的fasta文件；也可以是本地的，如服务器上的fasta文件路径。</li>
<li>indexURL：参考基因组Fasta的索引（.fai）文件，可选。但如果不提供.fai文件，会一次性加载整个fasta文件。</li>
<li>cytobandURL：UCSC格式的cytoBand文件的URL，可选。是用于画染色体示意图的，可以在UCSC的goldenPath找到cytoBand.txt.gz，例如<a href="https://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/">hg19</a>的。UCSC上有<a href="https://genome.ucsc.edu/cgi-bin/hgTables?db=hg38&hgta_group=map&hgta_track=cytoBand&hgta_table=cytoBand&hgta_doSchema=describe+table+schema">cytoBand文件格式说明</a>。</li>
<li>tracks：加载参考基因组时，同时加载的一系列Tracks，例如默认的hg19基因组的RefSeq Gene描述信息，可选。IGV的Github有<a href="https://github.com/igvteam/igv.js/wiki/Tracks-2.0">tracks格式说明</a>。</li>
</ul>
<h2 id="加载方法"><a href="#加载方法" class="headerlink" title="加载方法"></a>加载方法</h2><p>写完JSON文件后，在软件中加载自定义参考基因组的方法：Genomes -&gt; Load Genome from File… -&gt; 选择参考基因组json文件</p>
<h1 id="JSON示例"><a href="#JSON示例" class="headerlink" title="JSON示例"></a>JSON示例</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;b37chr&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;Human (b37 with chr)&quot;,</span><br><span class="line">  &quot;fastaURL&quot;: &quot;/xxx/database/b37chr/human_g1k_v37_decoy_chr.fasta&quot;,</span><br><span class="line">  &quot;indexURL&quot;: &quot;/xxx/database/b37chr/human_g1k_v37_decoy_chr.fasta.fai&quot;,</span><br><span class="line">  &quot;cytobandURL&quot;: &quot;/xxx/database/b37chr/cytoBand.txt&quot;,</span><br><span class="line">  &quot;tracks&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Refseq Genes&quot;,</span><br><span class="line">      &quot;format&quot;: &quot;refgene&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;/xxx/database/b37chr/ncbiRefSeq.sorted.txt.gz&quot;,</span><br><span class="line">      &quot;indexURL&quot;: &quot;/xxx/database/b37chr/ncbiRefSeq.sorted.txt.gz.tbi&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Target 1&quot;,</span><br><span class="line">      &quot;format&quot;: &quot;bed&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;/xxx/database/b37chr/bed/Target_1.bed&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Target 2&quot;,</span><br><span class="line">      &quot;format&quot;: &quot;bed&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;/xxx/database/b37chr/bed/Target_2.bed&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>IGV</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置Samba</title>
    <url>/2023/05/01/Linux%E9%85%8D%E7%BD%AESamba/</url>
    <content><![CDATA[<p>Linux系统配置Samba服务，Windows系统设置网络映射，实现共享目录</p>
<span id="more"></span>

<p><a href="https://blog.51cto.com/aby028/1830125">参考文档</a></p>
<h1 id="安装Samba"><a href="#安装Samba" class="headerlink" title="安装Samba"></a>安装Samba</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install samba</span><br></pre></td></tr></table></figure>
<p>这个服务器之前已经安装过了，所以截图里是yum list，看看版本<br><img src="https://pic2.imgdb.cn/item/644f98820d2dde57774b9feb.png" alt="安装Samba"></p>
<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 备份旧的配置文件</span><br><span class="line">cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</span><br><span class="line"># 修改配置文件，添加一段映射目录的设置信息，如下图</span><br><span class="line">vi /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://pic2.imgdb.cn/item/644f98750d2dde57774b9724.png" alt="Samba配置文件">  </p>
<ul>
<li>[blast]是windows系统设置网络映射时要填的目录名称</li>
<li>comment是注释信息</li>
<li>path是Linux本地要映射出去的实际路径</li>
<li>public和browseable是路径是否公共&#x2F;可见？具体区别不太清楚</li>
<li>writeable是可写权限</li>
<li>write list是设置可写用户，用“@用户组名”可以设置可写用户组</li>
<li>creat mask是设置上传的文件读写权限</li>
<li>directory mask是设置上传的文件夹读写权限</li>
</ul>
<h1 id="testparm测试配置文件是否错误"><a href="#testparm测试配置文件是否错误" class="headerlink" title="testparm测试配置文件是否错误"></a>testparm测试配置文件是否错误</h1><p>testparm专门用于测试 &#x2F;etc&#x2F;samba&#x2F;smb.conf 文件格式是否正确<br>命令行输testparm ，回车即可<br><img src="https://pic2.imgdb.cn/item/644f98620d2dde57774b8854.png" alt="testparm测试"></p>
<h1 id="修改Linux要映射的目录权限"><a href="#修改Linux要映射的目录权限" class="headerlink" title="修改Linux要映射的目录权限"></a>修改Linux要映射的目录权限</h1><p>可能不改权限，也能正常写入文件？  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /xxx/data/xxx_BLAST  </span><br></pre></td></tr></table></figure>

<h1 id="关闭防火墙和SElinux"><a href="#关闭防火墙和SElinux" class="headerlink" title="关闭防火墙和SElinux"></a>关闭防火墙和SElinux</h1><p>这个服务器本来就关了，所以下面这2条命令没有测试过<br>不确定是不是不关也可以正常映射  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关闭防火墙的ip包过滤服务？</span><br><span class="line">service iptables stop</span><br><span class="line"># 也可以直接修改/etc/sysconfig/selinux文件</span><br><span class="line">setenforce  0</span><br></pre></td></tr></table></figure>

<h1 id="设置访问用户信息"><a href="#设置访问用户信息" class="headerlink" title="设置访问用户信息"></a>设置访问用户信息</h1><p>samba的访问用户是Linux系统中已存在的用户，只需设置该用户的samba服务密码即可<br>注意该用户名或该用户组，在Samba配置时是不是在write list里  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># [user]是用户名，回车后，输2次密码，完成设置</span><br><span class="line">smbpasswd -a [user]</span><br><span class="line"># 重启samba服务</span><br><span class="line">service smb restart</span><br></pre></td></tr></table></figure>

<h1 id="Windows设置网络映射"><a href="#Windows设置网络映射" class="headerlink" title="Windows设置网络映射"></a>Windows设置网络映射</h1><p>我的电脑，右键，映射网络驱动器<br>驱动器随便选一个盘符，映射成功之后，我的电脑里会出现这个盘<br>文件夹格式：\\[服务器ip]\[Samba配置文件设置的目录名称，如上面的blast]<br><img src="https://pic2.imgdb.cn/item/644f98320d2dde57774b61ec.jpg" alt="设置网络映射1"><br>输入samba访问用户和密码，点击确定，完成映射<br><img src="https://pic2.imgdb.cn/item/644f98520d2dde57774b78e1.png" alt="设置网络映射2"></p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Samba</tag>
        <tag>网络映射</tag>
        <tag>共享目录</tag>
      </tags>
  </entry>
  <entry>
    <title>R包安装报错 is not available</title>
    <url>/2023/04/18/R%E5%8C%85%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99-is-not-available/</url>
    <content><![CDATA[<p>R包安装报错ERROR: dependency is not available</p>
<span id="more"></span>


<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><ul>
<li>R版本：version 3.6.0</li>
</ul>
<h1 id="简要过程"><a href="#简要过程" class="headerlink" title="简要过程"></a>简要过程</h1><ul>
<li>安装R包：ComplexHeatmap  </li>
<li>安装命令：<code>BiocManager::install(&quot;ComplexHeatmap&quot;)</code>  </li>
<li>报错信息：ERROR: dependency ‘GetoptLong’ is not available for package ‘ComplexHeatmap’  </li>
<li>原因：ComplexHeatmap依赖的GetoptLong依赖的rjson，要求R版本高于当前版本  </li>
<li>解决：先安装旧版本的rjson，再安装ComplexHeatmap</li>
</ul>
<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>在github有查到报错信息：  </p>
<ul>
<li><a href="https://github.com/jokergoo/ComplexHeatmap/issues/514">找到个相关Issue</a>  </li>
<li>按这个Issue说的，安装更旧版本的GetoptLong。<br><code>install.packages(&quot;https://cran.r-project.org/src/contrib/Archive/GetoptLong/GetoptLong_0.1.8.tar.gz&quot;, repo = NULL)</code></li>
</ul>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>尝试安装更旧版本的GetoptLong时，会报另外一个包的错：  </p>
<ul>
<li>ERROR: dependency ‘rjson’ is not available for package ‘GetoptLong’  </li>
<li>在CRAN上查<a href="https://cran.r-project.org/web/packages/rjson/index.html">rjson</a>，当前这个包的版本是 0.2.21，Depends的R版本要≥ 4.0.0。  </li>
<li><strong>就是这个原因导致ComplexHeatmap安装不上，其实一开始GetoptLong的报错往上翻一点就会看见rjson的报错。</strong><br><img src="https://pic.imgdb.cn/item/643e8fe40d2dde5777cdc74f.jpg" alt="rjson_Depends"></li>
</ul>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><ul>
<li>到Old sources找旧版本，从新往旧，一个个安装试试。0.2.20版本就装得上。<br><code>install.packages(&quot;https://cran.r-project.org/src/contrib/Archive/rjson/rjson_0.2.20.tar.gz&quot;, repo = NULL)</code><br><img src="https://pic.imgdb.cn/item/643e90040d2dde5777cdf9f2.jpg" alt="Old_sources"></li>
</ul>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><ul>
<li>rjson安装成功后，重新安装ComplexHeatmap。  </li>
<li><code>BiocManager::install(&quot;ComplexHeatmap&quot;)</code>安装成功。</li>
</ul>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>ComplexHeatmap</tag>
      </tags>
  </entry>
  <entry>
    <title>VEP安装</title>
    <url>/2023/04/19/VEP%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>VEP安装过程</p>
<span id="more"></span>


<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><pre><code>yum install -y unzip git bgzip tabix
yum install -y &quot;perl(DBD::mysql)&quot;
cpan -i Archive::Zip
cpan -i Devel::CheckLib
cpan -i DBI
cpan -i Module::Metadata
cpan -i LWP::Simple
cpan -i HTTP::Tiny
cpan -i autodie
</code></pre>
<h1 id="安装VEP"><a href="#安装VEP" class="headerlink" title="安装VEP"></a>安装VEP</h1><p><a href="https://grch37.ensembl.org/info/docs/tools/vep/script/vep_download.html">官方安装说明</a></p>
<h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><p><code>git clone https://github.com/Ensembl/ensembl-vep.git</code>    </p>
<h2 id="下载API"><a href="#下载API" class="headerlink" title="下载API"></a>下载API</h2><p>注：–NO_HTSLIB选择不安装Bio::DB::HTS&#x2F;htslib。<br><code>perl [VEP路径]/VEP/ensembl-vep/INSTALL.pl --NO_HTSLIB --NO_UPDATE --AUTO a --CACHEDIR [数据库路径]</code>  </p>
<h2 id="下载数据库"><a href="#下载数据库" class="headerlink" title="下载数据库"></a>下载数据库</h2><p>注：人的注释数据库提供2种版本，通过–ASSEMBLY参数选择：GRCh37（hg19）和GRCh38（hg38）。<br><code>perl [VEP路径]/VEP/ensembl-vep/INSTALL.pl --NO_HTSLIB --NO_UPDATE --AUTO cf --ASSEMBLY GRCh37 --SPECIES homo_sapiens_merged --CACHEDIR [数据库路径]</code>  </p>
<h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><p>可选，某些数据库需要通过插件才能注释，如dbNSFP。<br><a href="https://grch37.ensembl.org/info/docs/tools/vep/script/vep_plugins.html">插件说明信息</a><br>注：<br>    查看INSTALL.pl可以看到下载Plugin的其实是从<code>raw.githubusercontent.com</code>下载，但是这玩意很久之前就被墙了。<br>    所以下载Plugin不是用官方说明提供的命令下载的，是从<code>https://github.com/Ensembl/VEP_plugins</code>下载项目压缩包，再解压到CACHEDIR&#x2F;Plugins的。<br>    VEP首次调用这些插件时，可能会报错误或警告，需要按提示信息下载数据库文件，或者安装依赖模块&#x2F;软件即可。也可以调用前直接看*.pm文件中的DESCRIPTION下载依赖。<br><code>perl [VEP路径]/VEP/ensembl-vep/INSTALL.pl --NO_HTSLIB --NO_UPDATE --AUTO p --ASSEMBLY GRCh37 --SPECIES homo_sapiens_merged --PLUGINS dbNSFP,DisGeNET,ExAC,CADD --CACHEDIR [数据库路径]</code>  </p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>VEP</tag>
        <tag>注释</tag>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title>VEP报错</title>
    <url>/2023/04/19/VEP%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>一些VEP使用过程中的报错信息</p>
<span id="more"></span>

<h1 id="Existing-variation全部为"><a href="#Existing-variation全部为" class="headerlink" title="Existing_variation全部为-"></a>Existing_variation全部为-</h1><h2 id="问题及警告信息"><a href="#问题及警告信息" class="headerlink" title="问题及警告信息"></a>问题及警告信息</h2><ul>
<li>问题：VEP注释结果中Existing_variation全部为-。  </li>
<li>警告信息：  WARNING: 6742 : Use of uninitialized value in subtraction (-) at ***&#x2F;ensembl-vep&#x2F;modules&#x2F;Bio&#x2F;EnsEMBL&#x2F;VEP&#x2F;AnnotationSource&#x2F;Cache&#x2F;VariationTabix.pm line 184, <VARS> line 1.</VARS></li>
</ul>
<h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>VariationTabix.pm是用于判断当前突变是否数据库中的已知突变，其中$existing-&gt;{start}和$existing-&gt;{end}未定义，是由于脚本中第172行调用tabix，open VARS, “$TABIX_BIN -f $file $region_string 2&gt;&amp;1 报错：[tabix] failed to load the index file。<br>查看tabix版本，是0.2.5，且帮助文档中没有csi格式index的说明。<br>所以可能是tabix版本太旧，无法识别vep数据库中的.csi格式index导致。  </p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>简要过程<br>  更新tabix，替换~&#x2F;.bashrc中调用的tabix。  </li>
<li>具体过程<br>  tabix独立的安装包只更新到0.2.6，更新的版本只包含于HTSLIB。<br>  一般生信服务器里都已经有装samtools，应该可以直接用samtools路径里的tabix。<br>  这台服务器里已经安装的samtools的版本是1.12，路径下找到了htslib-1.12目录，但是里面没tabix，应该是没有make。    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd htslib-1.12</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
  以上命令make后，在samtools-1.12&#x2F;bin能看到1.12版本的tabix和bgzip。<br>  修改~&#x2F;.bashrc的tabix路径，然后source ~&#x2F;.bashrc，重新开终端，再测试VEP。</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>成功，Existing_variation列有rs编号和COSV编号</p>
<h1 id="dbNSFP插件警告"><a href="#dbNSFP插件警告" class="headerlink" title="dbNSFP插件警告"></a>dbNSFP插件警告</h1><h2 id="警告信息"><a href="#警告信息" class="headerlink" title="警告信息"></a>警告信息</h2><p>Use of uninitialized value $readme_file in concatenation (.) or string at ***&#x2F;vep_data&#x2F;Plugins&#x2F;dbNSFP.pm line 279.  </p>
<h2 id="问题定位-1"><a href="#问题定位-1" class="headerlink" title="问题定位"></a>问题定位</h2><p>dbNSFP.pm第276行，需要dbnsfp.*readme.txt在数据库dbNSFP4.3a_grch37.gz文件同一目录下。  </p>
<h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>解压dbNSFP4.3a.zip，得到dbNSFP4.3a.readme.txt，软链接为dbNSFP4.3a_grch37.readme.txt，放在dbNSFP4.3a_grch37.gz文件同一目录下。  </p>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>VEP</tag>
        <tag>注释</tag>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title>WDL使用目录作为参数</title>
    <url>/2023/04/26/WDL%E4%BD%BF%E7%94%A8%E7%9B%AE%E5%BD%95%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>写WDL时，调用目录作为参数传入</p>
<span id="more"></span>

<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>WDL里用到了kraken2，其中有个参数--db需要数据库目录作为参数。  </p>
<ul>
<li>无法直接传目录。<br>WDL的数据类型只有File，没有Directory。<a href="https://github.com/openwdl/wdl/blob/main/versions/development/SPEC.md">WDL Version 1.1有Directory类型</a>，但目前的Cromwell版本目前不支持WDL Version 1.1。</li>
<li>目录路径每次分析都会改变。<br>数据库没有放在镜像内，所以每次Cromwell投递都会将WDL中列出的一堆数据库文件硬链接到call-task中inputs的随机命名的目录，如86***2571-f*7b-476c-b3be-0bf***fe6cfe&#x2F;call-Kraken2&#x2F;inputs&#x2F;-159***78150。</li>
</ul>
<h1 id="错误方案"><a href="#错误方案" class="headerlink" title="错误方案"></a>错误方案</h1><p>Task中声明kraken2_db变量，然后通过<code>command&lt;&lt;&lt;`dirname 原数据库路径`&gt;&gt;&gt;</code>，再赋值kraken2_db变量。<br>不行，kraken2_db没有被修改，还是一开始声明的值。  </p>
<h1 id="正确方案"><a href="#正确方案" class="headerlink" title="正确方案"></a>正确方案</h1><p>--db传参时，直接用<code>dirname</code>传入。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># WDL</span><br><span class="line"></span><br><span class="line">task Kraken2&#123;</span><br><span class="line"></span><br><span class="line">	input &#123;</span><br><span class="line">		String Sample</span><br><span class="line">		File Read1</span><br><span class="line">		File Read2</span><br><span class="line">		Int Threads = 1</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	File kraken2_db_hash = &quot;/***/Database/Kraken2/hash.k2d&quot;</span><br><span class="line">	File kraken2_db_inspect = &quot;/***/Database/Kraken2/inspect.txt&quot;</span><br><span class="line">	File kraken2_db_opts = &quot;/***/Database/Kraken2/opts.k2d&quot;</span><br><span class="line">	File kraken2_db_seqid2taxid = &quot;/***/Database/Kraken2/seqid2taxid.map&quot;</span><br><span class="line">	File kraken2_db_taxo = &quot;/***/Database/Kraken2/taxo.k2d&quot;</span><br><span class="line">	File kraken2_db_kmer_distrib = &quot;/***/Database/Kraken2/database150mers.kmer_distrib&quot;</span><br><span class="line">	</span><br><span class="line">	command &lt;&lt;&lt;</span><br><span class="line">		kraken2 \</span><br><span class="line">			--threads ~&#123;Threads&#125; \</span><br><span class="line">			--confidence 0.8 \</span><br><span class="line">			--minimum-base-quality 20 \</span><br><span class="line">			--db `dirname ~&#123;kraken2_db_hash&#125;` \</span><br><span class="line">			--output ~&#123;Sample&#125;.output \</span><br><span class="line">			--report ~&#123;Sample&#125;.report \</span><br><span class="line">			--paired \</span><br><span class="line">			~&#123;Read1&#125; \</span><br><span class="line">			~&#123;Read2&#125;</span><br><span class="line"></span><br><span class="line">		bracken \</span><br><span class="line">			-r 150 \</span><br><span class="line">			-l S \</span><br><span class="line">			-t ~&#123;Threads&#125; \</span><br><span class="line">			-d `dirname ~&#123;kraken2_db_hash&#125;` \</span><br><span class="line">			-i ~&#123;Sample&#125;.report \</span><br><span class="line">			-o ~&#123;Sample&#125;.bracken</span><br><span class="line">	&gt;&gt;&gt;</span><br><span class="line">	</span><br><span class="line">	output &#123;</span><br><span class="line">		File k2_output = &quot;~&#123;Sample&#125;.output&quot;</span><br><span class="line">		File k2_report = &quot;~&#123;Sample&#125;.report&quot;</span><br><span class="line">		File bracken = &quot;~&#123;Sample&#125;.report&quot;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	runtime &#123;</span><br><span class="line">		docker: &quot;***/kraken2:v2.1.2&quot;</span><br><span class="line">		cpus: threads</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>WDL</tag>
        <tag>Cromwell</tag>
      </tags>
  </entry>
  <entry>
    <title>Xlsx转MySQL</title>
    <url>/2023/04/21/Xlsx%E8%BD%ACMySQL/</url>
    <content><![CDATA[<p>通过Python的openpyxl和MySQLdb模块，将.xlsx文件转为MySQL的Databse</p>
<span id="more"></span>

<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><ul>
<li>python 3.7.9  </li>
<li>openpyxl模块 3.0.9  </li>
<li>MySQLdb模块 2.1.1？</li>
</ul>
<h1 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># openpyxl模块  </span><br><span class="line">python -m pip install openpyxl  </span><br><span class="line"># MySQLdb模块  </span><br><span class="line">python -m pip install mysqlclient  </span><br></pre></td></tr></table></figure>

<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># python</span><br><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line"># Useage: 将xlsx文件导入为mysql的databse</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import re</span><br><span class="line">import datetime</span><br><span class="line">import argparse</span><br><span class="line">import openpyxl</span><br><span class="line">import MySQLdb</span><br><span class="line"></span><br><span class="line">Charset = &quot;utf8&quot;</span><br><span class="line"></span><br><span class="line">def Xlsx2MySQLdb(Xlsx, User, Password):</span><br><span class="line">	Work_Book = openpyxl.load_workbook(Xlsx)</span><br><span class="line">	Database = re.search(&quot;.*\/(\S+)\.xlsx&quot;, Xlsx).group(1) + &quot;_&quot; + datetime.datetime.now().strftime(&quot;%Y%m%d_%H%M%S&quot;)</span><br><span class="line">	List_Sheet = Work_Book.sheetnames</span><br><span class="line">	# 提示信息</span><br><span class="line">	Time_Stamp = datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">	sys.stdout.write(&quot;*&quot; + Time_Stamp + &quot;* [运行信息]\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[输入文件] &quot; + Xlsx + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[子表数量] &quot; + str(len(List_Sheet)) + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[子表名称] &quot; + &quot;、&quot;.join(List_Sheet) + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[数据库名] &quot; + Database + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[字符编码] &quot; + Charset + &quot;\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[表头字段] 每个子表的第1行会作为数据库的列名\n&quot;)</span><br><span class="line">	sys.stdout.write(&quot;[数据类型] 所有内容都保存为TEXT，如需修改，请在MySQL自行修改\n\n&quot;)</span><br><span class="line"></span><br><span class="line">	# 连接MySQL</span><br><span class="line">	SQL_Host = &quot;localhost&quot;</span><br><span class="line">	SQL_Connection = MySQLdb.connect(host = SQL_Host, user = User, passwd = Password, charset = Charset)</span><br><span class="line">	Cursor = SQL_Connection.cursor()</span><br><span class="line">	# 创建数据库</span><br><span class="line">	Cursor.execute(&quot;create database if not exists &quot; + Database)</span><br><span class="line">	Cursor.execute(&quot;use &quot; + Database)</span><br><span class="line">	# 逐个子表处理</span><br><span class="line">	for Sheet in List_Sheet:</span><br><span class="line">		List_Header = []</span><br><span class="line">		List_Table_Header = []</span><br><span class="line">		Data_Type = &quot;TEXT&quot;</span><br><span class="line">		Work_Sheet = Work_Book[Sheet]</span><br><span class="line">		for col_n in range(1, Work_Sheet.max_column+1):</span><br><span class="line">			Header = str(Work_Sheet.cell(row=1, column=col_n).value)</span><br><span class="line">			List_Header.append(&quot;`&quot; + Header + &quot;`&quot;)</span><br><span class="line">			List_Table_Header.append(&quot;`&quot; + Header + &quot;`&quot; + &quot; &quot; + Data_Type)</span><br><span class="line">		# 创建数据表</span><br><span class="line">		Table_Header = &quot;, &quot;.join(List_Table_Header)</span><br><span class="line">		Cursor.execute(&quot;create table if not exists &quot; + Sheet + &quot; (&quot; + Table_Header + &quot;)&quot;)</span><br><span class="line">		# 逐行存入数据</span><br><span class="line">		Header = &quot;, &quot;.join(List_Header)</span><br><span class="line">		for row_n in range(2, Work_Sheet.max_row+1):</span><br><span class="line">			List_Value = []</span><br><span class="line">			for col_n in range(1, Work_Sheet.max_column+1):</span><br><span class="line">				Value = str(Work_Sheet.cell(row = row_n, column = col_n).value)</span><br><span class="line">				List_Value.append(&quot;\&quot;&quot; + Value + &quot;\&quot;&quot;)</span><br><span class="line">			Value = &quot;, &quot;.join(List_Value)</span><br><span class="line">			Cursor.execute(&quot;insert into &quot; + Sheet + &quot; (&quot; + Header + &quot;) values(&quot; + Value + &quot;)&quot;)</span><br><span class="line">			# 提交MyQSL操作</span><br><span class="line">			SQL_Connection.commit()</span><br><span class="line">	# 关闭连接</span><br><span class="line">	Cursor.close()</span><br><span class="line">	SQL_Connection.close()</span><br><span class="line">	# 关闭Xlsx</span><br><span class="line">	Work_Book.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Python</tag>
        <tag>MySQL</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>Xlsx转MySQL报错</title>
    <url>/2023/04/21/Xlsx%E8%BD%ACMySQL%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>写Xlsx转MySQL脚本过程中的一些报错信息</p>
<span id="more"></span>


<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="相关脚本"><a href="#相关脚本" class="headerlink" title="相关脚本"></a>相关脚本</h2><p>Cursor.execute(“create database if not exists “ + Database)  </p>
<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>MySQLdb.OperationalError: (1044, “Access denied for user ‘***‘@’localhost’ to database ‘***’”)</p>
<h2 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h2><p>用这个用户进mysql创建数据库，也是这个错误，应该是这个用户没有权限创建数据库。<br>用以下两种方式可以查看<a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html">用户权限</a>。  </p>
<ol>
<li><code>show grants for &#39;***&#39;@&#39;localhost&#39;;</code><br>看到结果只有1个权限<code>GRANT USAGE ON *.* TO &#39;***&#39;@&#39;localhost&#39;</code>。<br>USAGE权限只能用于数据库登录，不能执行任何操作，所以报错是正常的。  </li>
<li><code>select * from mysql.user where user=&#39;***&#39;;</code><br>看到结果是所有*_priv全部都是N，即所有权限都没有。</li>
</ol>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>更换一个有权限的用户连接数据库，或者赋予相应权限给当前用户。  </p>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><h2 id="相关脚本-1"><a href="#相关脚本-1" class="headerlink" title="相关脚本"></a>相关脚本</h2><p>Cursor.execute(“insert into “ + Sheet + “ (“ + Header + “) values(“ + Value + “)”)  </p>
<h2 id="报错信息-1"><a href="#报错信息-1" class="headerlink" title="报错信息"></a>报错信息</h2><p>MySQLdb.ProgrammingError: (1064, “You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘**********’ at line 1”)  </p>
<h2 id="报错原因-1"><a href="#报错原因-1" class="headerlink" title="报错原因"></a>报错原因</h2><p>values里有特殊符号或MySQL的关键词？</p>
<h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>List_Value的字符串两侧加双引号</p>
<h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h2 id="相关脚本-2"><a href="#相关脚本-2" class="headerlink" title="相关脚本"></a>相关脚本</h2><p>Cursor.execute(“create table if not exists “ + Sheet + “ (“ + Table_Header + “)”)  </p>
<h2 id="报错信息-2"><a href="#报错信息-2" class="headerlink" title="报错信息"></a>报错信息</h2><p>MySQLdb.ProgrammingError: (1064, “You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘****)’ at line 1”)  </p>
<h2 id="报错原因-2"><a href="#报错原因-2" class="headerlink" title="报错原因"></a>报错原因</h2><p>报错信息里的***字符串是表头的一部分，前边是一个列名Check。Check是MySQL的<a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">关键词</a>，有冲突，不能直接使用。  </p>
<h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><p>列名两侧加&#96;号（1左边的~按键）    </p>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Python</tag>
        <tag>MySQL</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>热图竖向列名</title>
    <url>/2023/04/17/%E7%83%AD%E5%9B%BE%E7%AB%96%E5%90%91%E5%88%97%E5%90%8D/</url>
    <content><![CDATA[<p>用ComplexHeatmap画热图，列名竖向排列</p>
<span id="more"></span>

<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><ul>
<li>R版本：version 3.6.0  </li>
<li>R包版本：ComplexHeatmap 2.2.0</li>
</ul>
<h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><p>  列名放在热图上方，字体排列是竖向的。  </p>
<ul>
<li>列名放在热图上方很好解决，直接用Heatmap()的column_names_side &#x3D; “top”。  </li>
<li>问题是字体竖向排列。</li>
</ul>
<h1 id="失败方案"><a href="#失败方案" class="headerlink" title="失败方案"></a>失败方案</h1><h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><p>  Heatmap(column_names_rot &#x3D; 90)，不行。<br>  列名是整体旋转，做不到竖向阅读。<br>  <img src="https://pic.imgdb.cn/item/643cf6800d2dde577704aee0.jpg" alt="热图1column_names_rot=90">  </p>
<h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h2><p>  列名插入换行符，不行。<br>  可以竖向阅读，但是列名会和热图区域重叠。<br>  <img src="https://pic.imgdb.cn/item/643cf6ac0d2dde577704eb57.jpg" alt="热图2列名插入换行符">  </p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul>
<li><p>列名插入换行符，并用decorate_dimnames()重绘列名组件。  </p>
</li>
<li><p>热图示例<br><img src="https://pic.imgdb.cn/item/643cf6db0d2dde5777053a3a.jpg" alt="热图3完成">  </p>
</li>
<li><p>数据示例<br><img src="https://pic.imgdb.cn/item/643cf6f50d2dde5777055a3f.jpg" alt="数据示例">  </p>
</li>
<li><p>文本文件的中文编码转换示例<br><code>iconv -c -f GBK -t UTF-8 Input.GBK.tsv -o Output.utf8.tsv</code>  </p>
</li>
<li><p>代码  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ComplexHeatmap参考示例</span></span><br><span class="line"><span class="comment"># https://jokergoo.github.io/ComplexHeatmap-reference/book/</span></span><br><span class="line"></span><br><span class="line">library<span class="punctuation">(</span>ComplexHeatmap<span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>circlize<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">args <span class="operator">&lt;-</span> commandArgs<span class="punctuation">(</span><span class="built_in">T</span><span class="punctuation">)</span></span><br><span class="line">Input_Table <span class="operator">=</span> args<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">Output_Dir <span class="operator">=</span> args<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输出目录不存在，创建它</span></span><br><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span><span class="operator">!</span> dir.exists<span class="punctuation">(</span>Output_Dir<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">        dir.create<span class="punctuation">(</span>Plot_Result_Dir<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出图片文件路径</span></span><br><span class="line">Output_Pic <span class="operator">=</span> paste<span class="punctuation">(</span>Output_Dir<span class="punctuation">,</span> <span class="string">&quot;/Heatmap.png&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> collapse <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################## 数据处理 ##########################</span></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line"><span class="comment"># stringsAsFactors=FALSE 不将字符型变量转为因子，否则对其做字符串操作会报错</span></span><br><span class="line"><span class="comment"># check.names=FALSE 不检查列名的命名有效性，否则列名会被修改：如数字开头会在最前面被加上X、空格被变为.、-被变为.等情况</span></span><br><span class="line"><span class="comment"># check.names=FALSE后，列名的空格会被保留，用列名获取数据时，需要用Data_Frame$`Name With Space`这种格式</span></span><br><span class="line">Data <span class="operator">=</span> read.table<span class="punctuation">(</span>Input_Table<span class="punctuation">,</span> head <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span> comment.char <span class="operator">=</span> <span class="string">&quot;#&quot;</span><span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> check.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：字符串的每个字符中间插入换行符</span></span><br><span class="line">wrap_letters <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        sapply<span class="punctuation">(</span>strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> <span class="string">&#x27;&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> paste0<span class="punctuation">,</span> collapse <span class="operator">=</span> <span class="string">&#x27;\n&#x27;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Data从第2列到最后1列作为画图数据Data_Draw</span></span><br><span class="line">Data_Draw <span class="operator">=</span> Data<span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="operator">:</span>ncol<span class="punctuation">(</span>Data<span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment"># Data的第1列作为画图数据Data_Draw的行名</span></span><br><span class="line">row.names<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span> <span class="operator">=</span> Data<span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment"># 另存画图数据Data_Draw的列名，并在列名的每个字符中间插入换行符</span></span><br><span class="line">Col_Names <span class="operator">=</span> wrap_letters<span class="punctuation">(</span>colnames<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 将Data_Draw的列名替换为空</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span> <span class="operator">=</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span> ncol<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于cell显示数值。read.table(colClasses = &quot;character&quot;)数值全部作为字符串读入，避免format()转换的科学计数法。NA转为空字符串。</span></span><br><span class="line">Cell_Number <span class="operator">=</span> read.table<span class="punctuation">(</span>Input_Table<span class="punctuation">,</span> head <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span> comment.char <span class="operator">=</span> <span class="string">&quot;#&quot;</span><span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> check.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> colClasses <span class="operator">=</span> <span class="string">&quot;character&quot;</span><span class="punctuation">,</span> na.strings <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line">Cell_Number <span class="operator">=</span> Cell_Number<span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="operator">:</span>ncol<span class="punctuation">(</span>Cell_Number<span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">Cell_Number<span class="punctuation">[</span><span class="built_in">is.na</span><span class="punctuation">(</span>Cell_Number<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################## 画图 ############################</span></span><br><span class="line"><span class="comment"># 根据画图数据的行数、列数设置图的尺寸</span></span><br><span class="line">base_size <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">hight_factor <span class="operator">=</span> <span class="built_in">ceiling</span><span class="punctuation">(</span>nrow<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span> <span class="operator">/</span> <span class="number">8</span><span class="punctuation">)</span></span><br><span class="line">width_factor <span class="operator">=</span> <span class="built_in">ceiling</span><span class="punctuation">(</span>ncol<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span> <span class="operator">/</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line">width_value <span class="operator">=</span> base_size <span class="operator">*</span> width_factor <span class="operator">*</span> <span class="number">0.6</span></span><br><span class="line"><span class="keyword">if</span><span class="punctuation">(</span>width_value <span class="operator">&gt;</span> <span class="number">200</span><span class="punctuation">)</span><span class="punctuation">&#123;</span>width_value <span class="operator">=</span> <span class="number">200</span><span class="punctuation">&#125;</span></span><br><span class="line">height_value<span class="operator">=</span><span class="punctuation">(</span>base_size <span class="operator">+</span> <span class="number">2</span><span class="punctuation">)</span> <span class="operator">*</span> hight_factor <span class="operator">*</span> <span class="number">0.65</span></span><br><span class="line"><span class="keyword">if</span><span class="punctuation">(</span>height_value <span class="operator">&gt;</span> <span class="number">300</span><span class="punctuation">)</span><span class="punctuation">&#123;</span>height_value <span class="operator">=</span> <span class="number">300</span><span class="punctuation">&#125;</span></span><br><span class="line">png<span class="punctuation">(</span>Output_Pic<span class="punctuation">,</span> width <span class="operator">=</span> width_value<span class="punctuation">,</span> height <span class="operator">=</span> height_value<span class="punctuation">,</span> units <span class="operator">=</span> <span class="string">&quot;in&quot;</span><span class="punctuation">,</span> res<span class="operator">=</span><span class="number">300</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热图大小占图的80%</span></span><br><span class="line">Heatmap_Width <span class="operator">=</span> width_value <span class="operator">*</span> <span class="number">0.8</span></span><br><span class="line">Heatmap_Height <span class="operator">=</span> height_value <span class="operator">*</span> <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义热图颜色</span></span><br><span class="line">Color_Palette <span class="operator">&lt;-</span> colorRamp2<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">50</span><span class="punctuation">,</span> <span class="number">100</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;white&quot;</span><span class="punctuation">,</span> <span class="string">&quot;green&quot;</span><span class="punctuation">,</span> <span class="string">&quot;yellow&quot;</span><span class="punctuation">,</span> <span class="string">&quot;red&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热图</span></span><br><span class="line">Darw_Heatmap <span class="operator">=</span> Heatmap<span class="punctuation">(</span></span><br><span class="line">  Data_Draw<span class="punctuation">,</span></span><br><span class="line">  name <span class="operator">=</span> <span class="string">&quot;Darw_Heatmap&quot;</span><span class="punctuation">,</span></span><br><span class="line">  width <span class="operator">=</span> unit<span class="punctuation">(</span>Heatmap_Width<span class="punctuation">,</span> <span class="string">&quot;in&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  height <span class="operator">=</span> unit<span class="punctuation">(</span>Heatmap_Height<span class="punctuation">,</span> <span class="string">&quot;in&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  col<span class="operator">=</span>Color_Palette<span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 行、列聚类</span></span><br><span class="line">  cluster_rows <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">  cluster_columns <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 行名相关参数</span></span><br><span class="line">  show_row_names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">  row_names_side <span class="operator">=</span> <span class="string">&quot;right&quot;</span><span class="punctuation">,</span></span><br><span class="line">  row_names_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  row_names_max_width <span class="operator">=</span> max_text_width<span class="punctuation">(</span>row.names<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">,</span> gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  row_names_rot <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 列名相关参数</span></span><br><span class="line">  show_column_names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">  column_names_side <span class="operator">=</span> <span class="string">&quot;top&quot;</span><span class="punctuation">,</span></span><br><span class="line">  column_names_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  column_names_max_height <span class="operator">=</span> max_text_width<span class="punctuation">(</span><span class="built_in">names</span><span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">,</span> gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  column_names_rot <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 相当于pheatmap的border_color和border线宽度</span></span><br><span class="line">  rect_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>col <span class="operator">=</span> <span class="string">&quot;grey&quot;</span><span class="punctuation">,</span> lwd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 每个cell显示对应数值，相当于pheatmap的display_numbers</span></span><br><span class="line">  cell_fun <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>j<span class="punctuation">,</span> i<span class="punctuation">,</span> x<span class="punctuation">,</span> y<span class="punctuation">,</span> width<span class="punctuation">,</span> height<span class="punctuation">,</span> fill<span class="punctuation">)</span> <span class="punctuation">&#123;</span>grid.text<span class="punctuation">(</span>Cell_Number<span class="punctuation">[</span>i<span class="punctuation">,</span>j<span class="punctuation">]</span><span class="punctuation">,</span> x<span class="punctuation">,</span> y<span class="punctuation">,</span> gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">9</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 空值的cell的颜色</span></span><br><span class="line">  na_col <span class="operator">=</span> <span class="string">&quot;white&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment"># 图例相关参数</span></span><br><span class="line">  show_heatmap_legend <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">  heatmap_legend_param <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span>title <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> color_bar <span class="operator">=</span> <span class="string">&quot;continuous&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 图例</span></span><br><span class="line">Draw_Legend <span class="operator">=</span> Legend<span class="punctuation">(</span>col <span class="operator">=</span> Color_Palette<span class="punctuation">,</span> title <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> grid_height <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">6</span><span class="punctuation">,</span> <span class="string">&quot;mm&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> grid_width <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">6</span><span class="punctuation">,</span> <span class="string">&quot;mm&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置热图四周的距离，因为有的列名很长，热图上方需要空出更多空间</span></span><br><span class="line">Heatmap_Left_Padding <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">Heatmap_Bottom_Padding <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">Heatmap_Top_Padding <span class="operator">=</span> <span class="number">94</span></span><br><span class="line">Heatmap_Right_Padding <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 绘制热图和图例</span></span><br><span class="line"><span class="comment"># 热图需要padding，图例要移动位置，所以必须用draw()</span></span><br><span class="line">draw<span class="punctuation">(</span>Darw_Heatmap<span class="punctuation">,</span> padding <span class="operator">=</span> unit<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span>Heatmap_Bottom_Padding<span class="punctuation">,</span> Heatmap_Left_Padding<span class="punctuation">,</span> Heatmap_Top_Padding<span class="punctuation">,</span> Heatmap_Right_Padding<span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&quot;mm&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">draw<span class="punctuation">(</span>Draw_Legend<span class="punctuation">,</span> x <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.98</span><span class="punctuation">,</span> <span class="string">&quot;npc&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> y <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.85</span><span class="punctuation">,</span> <span class="string">&quot;npc&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> just <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;right&quot;</span><span class="punctuation">,</span> <span class="string">&quot;top&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据热图padding设置第一个列名的位置</span></span><br><span class="line">X_Pos <span class="operator">=</span> unit<span class="punctuation">(</span>Heatmap_Left_Padding<span class="operator">+</span><span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;mm&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 每个列名输出后需要移动一定位置，以对齐每个cell。根据热图大小和列数量，计算每个cell的宽度</span></span><br><span class="line">X_Step <span class="operator">=</span> unit<span class="punctuation">(</span>Heatmap_Width<span class="operator">/</span>ncol<span class="punctuation">(</span>Data_Draw<span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&quot;in&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># decorate_*()系列函数用于绘制热图后，对热图组件做修改 https://jokergoo.github.io/ComplexHeatmap-reference/book/heatmap-decoration.html</span></span><br><span class="line"><span class="comment"># decorate_dimnames(which = &quot;column&quot;)用于修改列名组件</span></span><br><span class="line"><span class="comment"># 注1：decorate_*()必须在热图绘制后才能用。如果Darw_Heatmap = Heatmap(...)后，必须先draw(Darw_Heatmap)；或者不把Heatmap(...)赋给变量和draw()。同理，如果要修改某个组件，该组件必须先被绘制出来；我要修改列名，那必须Heatmap(show_column_names = TRUE)，所以前面要将Data_Draw的列名设为空值，否则Heatmap()和decorate_dimnames()会导致两次的列名重叠。</span></span><br><span class="line"><span class="comment"># 注2：decorate_*()的[heatmap]参数，是name of the heatmap，所以要用Heatmap(name = &quot;xxx&quot;)填的热图名称，而不是Heatmap(...)赋给的变量名</span></span><br><span class="line"><span class="comment"># 注3：这里Col_Names是直接取Data_Draw的列名。如果热图有做列聚类，列名顺序可能改变了，注意修改。</span></span><br><span class="line">decorate_dimnames<span class="punctuation">(</span><span class="string">&quot;Darw_Heatmap&quot;</span><span class="punctuation">,</span> which <span class="operator">=</span> <span class="string">&quot;column&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="keyword">for</span> <span class="punctuation">(</span>Name <span class="keyword">in</span> Col_Names<span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment"># 向下对齐，设置横坐标</span></span><br><span class="line">    grid.text<span class="punctuation">(</span>Name<span class="punctuation">,</span> just <span class="operator">=</span> <span class="string">&quot;bottom&quot;</span><span class="punctuation">,</span> x <span class="operator">=</span> X_Pos<span class="punctuation">)</span></span><br><span class="line">    <span class="comment"># 列名输出后移动位置</span></span><br><span class="line">    X_Pos <span class="operator">=</span> X_Pos <span class="operator">+</span> X_Step</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>ComplexHeatmap</tag>
        <tag>画图</tag>
      </tags>
  </entry>
</search>
